{"version":3,"file":"ValidationRuleResult.js","sources":["../../../../src/utils/Validator/ValidationRuleResult.ts"],"sourcesContent":["import { ErrorMessageObject, ValidatorRule, ValidatorMode } from './types';\n\n/**\n * Holds the result of a validation\n */\nexport class ValidationRuleResult {\n    private readonly shouldValidate: boolean;\n    public isValid: boolean;\n    public errorMessage: string | ErrorMessageObject;\n\n    constructor(rule: ValidatorRule, value: string, mode: ValidatorMode, context) {\n        this.shouldValidate = rule.modes.includes(mode);\n        this.isValid = rule.validate(value, context);\n        this.errorMessage = rule.errorMessage;\n    }\n\n    /**\n     * Whether the validation is considered an error.\n     * A field is only considered to be an error if the validation rule applies to the current mode i.e. 'blur' or 'input'.\n     * Also, if a validation function returns a null value e.g. when the field is empty, then the field will not be considered to be in error\n     * unless the whole form is being validated\n     */\n    hasError(isValidatingForm = false): boolean {\n        return isValidatingForm ? !this.isValid && this.shouldValidate : this.isValid != null && !this.isValid && this.shouldValidate;\n    }\n}\n"],"names":["ValidationRuleResult","hasError","isValidatingForm","this","isValid","shouldValidate","constructor","rule","value","mode","context","_define_property","errorMessage","modes","includes","validate"],"mappings":"wHAKO,MAAMA,EAiBTC,QAAAA,CAASC,GAAmB,GACxB,OAAOA,GAAoBC,KAAKC,SAAWD,KAAKE,eAAiC,MAAhBF,KAAKC,UAAoBD,KAAKC,SAAWD,KAAKE,cACnH,CAdAC,WAAAA,CAAYC,EAAqBC,EAAeC,EAAqBC,GAJrEC,EAAAR,KAAiBE,sBAAjB,GACAM,EAAAR,KAAOC,eAAP,GACAO,EAAAR,KAAOS,oBAAP,GAGIT,KAAKE,eAAiBE,EAAKM,MAAMC,SAASL,GAC1CN,KAAKC,QAAUG,EAAKQ,SAASP,EAAOE,GACpCP,KAAKS,aAAeL,EAAKK,YAC7B"}