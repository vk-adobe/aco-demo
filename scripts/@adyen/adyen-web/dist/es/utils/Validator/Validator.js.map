{"version":3,"file":"Validator.js","sources":["../../../../src/utils/Validator/Validator.ts"],"sourcesContent":["import { ValidatorRules, ValidatorRule, FieldContext, FieldData } from './types';\nimport { ValidationRuleResult } from './ValidationRuleResult';\n\nclass ValidationResult {\n    private validationResults: ValidationRuleResult[];\n\n    constructor(results: ValidationRuleResult[]) {\n        this.validationResults = results;\n    }\n\n    /** Checks if all validation rules have passed */\n    get isValid(): boolean {\n        return this.validationResults.reduce((acc, result) => acc && result.isValid, true);\n    }\n\n    /** Checks if any validation rule returned an error */\n    hasError(isValidatingForm = false): boolean {\n        return Boolean(this.getError(isValidatingForm));\n    }\n\n    /** Returns the first validation result that returned an error */\n    getError(isValidatingForm = false) {\n        return this.validationResults.find(result => result.hasError(isValidatingForm));\n    }\n\n    /** Returns all validation results that returned an error */\n    getAllErrors() {\n        return this.validationResults.filter(result => result.hasError());\n    }\n}\n\nclass Validator {\n    public rules: ValidatorRules = {\n        default: {\n            validate: () => true,\n            modes: ['blur', 'input']\n        }\n    };\n\n    constructor(rules) {\n        this.setRules(rules);\n    }\n\n    setRules(newRules) {\n        this.rules = {\n            ...this.rules,\n            ...newRules\n        };\n    }\n\n    /**\n     * Get all validation rules for a field\n     */\n    private getRulesFor(field: string): ValidatorRule[] {\n        let fieldRules: ValidatorRule | ValidatorRule[] = this.rules[field] ?? this.rules['default'];\n\n        if (!Array.isArray(fieldRules)) {\n            fieldRules = [fieldRules];\n        }\n\n        return fieldRules;\n    }\n\n    /**\n     * Validates a field\n     */\n    validate({ key, value, mode = 'blur' }: FieldData, context?: FieldContext) {\n        const fieldRules = this.getRulesFor(key);\n        // create an ValidationRuleResult, we run the actual validation inside of it\n        // validate is called in the constructor of ValidationRuleResult\n        // line rule.validate(value, context);\n        //\n        const validationRulesResult = fieldRules.map(rule => new ValidationRuleResult(rule, value, mode, context));\n\n        return new ValidationResult(validationRulesResult);\n    }\n}\n\nexport default Validator;\n"],"names":["ValidationResult","isValid","this","validationResults","reduce","acc","result","hasError","isValidatingForm","Boolean","getError","find","getAllErrors","filter","constructor","results","_define_property","Validator","setRules","newRules","rules","getRulesFor","field","fieldRules","Array","isArray","validate","key","value","mode","context","validationRulesResult","map","rule","ValidationRuleResult","default","modes"],"mappings":"yLAGA,MAAMA,EAQF,WAAIC,GACA,OAAOC,KAAKC,kBAAkBC,QAAO,CAACC,EAAKC,IAAWD,GAAOC,EAAOL,UAAS,EACjF,CAGAM,QAAAA,CAASC,GAAmB,GACxB,OAAOC,QAAQP,KAAKQ,SAASF,GACjC,CAGAE,QAAAA,CAASF,GAAmB,GACxB,OAAON,KAAKC,kBAAkBQ,MAAKL,GAAUA,EAAOC,SAASC,IACjE,CAGAI,YAAAA,GACI,OAAOV,KAAKC,kBAAkBU,QAAOP,GAAUA,EAAOC,YAC1D,CAtBAO,WAAAA,CAAYC,GAFZC,EAAAd,KAAQC,yBAAR,GAGID,KAAKC,kBAAoBY,CAC7B,EAuBJ,MAAME,EAYFC,QAAAA,CAASC,GACLjB,KAAKkB,MAAQ,IACNlB,KAAKkB,SACLD,EAEX,CAKQE,WAAAA,CAAYC,GAChB,IAAIC,EAA8CrB,KAAKkB,MAAME,IAAUpB,KAAKkB,MAAgB,QAM5F,OAJKI,MAAMC,QAAQF,KACfA,EAAa,CAACA,IAGXA,CACX,CAKAG,QAAAA,EAASC,IAAEA,EAAGC,MAAEA,EAAKC,KAAEA,EAAO,QAAqBC,GAC/C,MAKMC,EALa7B,KAAKmB,YAAYM,GAKKK,KAAIC,GAAQ,IAAIC,EAAqBD,EAAML,EAAOC,EAAMC,KAEjG,OAAO,IAAI9B,EAAiB+B,EAChC,CApCAjB,WAAAA,CAAYM,GAPZJ,EAAAd,KAAOkB,QAAwB,CAC3Be,QAAS,CACLT,SAAU,KAAM,EAChBU,MAAO,CAAC,OAAQ,YAKpBlC,KAAKgB,SAASE,EAClB"}