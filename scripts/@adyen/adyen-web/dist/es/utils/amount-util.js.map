{"version":3,"file":"amount-util.js","sources":["../../../src/utils/amount-util.ts"],"sourcesContent":["import CURRENCY_CODES from './constants/currency-codes';\nimport CURRENCY_DECIMALS from './constants/currency-decimals';\nimport { currencyMinorUnitsConfig } from './constants/currency-minor-units';\n\n/**\n * @internal\n * @param currencyCode -\n * Get divider amount\n */\nexport const getDivider = (currencyCode: string): number => CURRENCY_DECIMALS[currencyCode] || 100;\n\n/**\n * @internal\n * @param currencyCode -\n * Returns whether a CURRENCY CODE is valid\n */\nexport const isValidCurrencyCode = (currencyCode: string): boolean => !!CURRENCY_CODES[currencyCode];\n\n/**\n * @internal\n */\nexport const getCurrencyCode = (currencyCode: string): string => (isValidCurrencyCode(currencyCode) ? CURRENCY_CODES[currencyCode] : false);\n\n/**\n * @internal\n */\nexport const getDecimalAmount = (amount: number | string, currencyCode: string): number => {\n    const divider = getDivider(currencyCode);\n    return parseInt(String(amount), 10) / divider;\n};\n\n/**\n * @internal\n */\nexport const getLocalisedAmount = (amount: number, locale: string, currencyCode: string, options = {}): string => {\n    const stringAmount = amount.toString(); // Changing amount to string to avoid 0-value from returning false\n\n    const decimalAmount = getDecimalAmount(stringAmount, currencyCode);\n    const formattedLocale = locale.replace('_', '-');\n\n    const modifiedOptions = currencyMinorUnitsConfig[currencyCode] ? { ...options, ...currencyMinorUnitsConfig[currencyCode] } : options;\n    const localeOptions = {\n        style: 'currency',\n        currency: currencyCode,\n        currencyDisplay: 'symbol',\n        ...modifiedOptions\n    };\n\n    try {\n        return decimalAmount.toLocaleString(formattedLocale, localeOptions);\n    } catch (e) {\n        return stringAmount;\n    }\n};\n\n/**\n * @internal\n */\nexport const getLocalisedPercentage = (percent = 0, locale: string): string => {\n    const decimalPercent = percent / 100 / 100;\n    const localeOptions: Intl.NumberFormatOptions = {\n        style: 'percent',\n        maximumFractionDigits: 2\n    };\n\n    try {\n        return decimalPercent.toLocaleString(locale, localeOptions);\n    } catch (e) {\n        return null;\n    }\n};\n"],"names":["getDivider","currencyCode","CURRENCY_DECIMALS","getDecimalAmount","amount","divider","parseInt","String","getLocalisedAmount","locale","options","stringAmount","toString","decimalAmount","formattedLocale","replace","localeOptions","style","currency","currencyDisplay","currencyMinorUnitsConfig","toLocaleString","e"],"mappings":"qIASaA,EAAcC,GAAiCC,EAAkBD,IAAiB,IAiBlFE,EAAmB,CAACC,EAAyBH,KACtD,MAAMI,EAAUL,EAAWC,GAC3B,OAAOK,SAASC,OAAOH,GAAS,IAAMC,CAAAA,EAM7BG,EAAqB,CAACJ,EAAgBK,EAAgBR,EAAsBS,EAAU,MAC/F,MAAMC,EAAeP,EAAOQ,WAEtBC,EAAgBV,EAAiBQ,EAAcV,GAC/Ca,EAAkBL,EAAOM,QAAQ,IAAK,KAGtCC,EAAgB,CAClBC,MAAO,WACPC,SAAUjB,EACVkB,gBAAiB,YAJGC,EAAyBnB,GAAgB,IAAKS,KAAYU,EAAyBnB,IAAkBS,GAQ7H,IACI,OAAOG,EAAcQ,eAAeP,EAAiBE,EACzD,CAAE,MAAOM,GACL,OAAOX,CACX"}