{"version":3,"file":"reducer.js","sources":["../../../../src/utils/useForm/reducer.ts"],"sourcesContent":["const omitKeys = (obj, omit) =>\n    Object.keys(obj)\n        .filter(k => !omit.includes(k))\n        .reduce((a, c) => {\n            a[c] = obj[c];\n            return a;\n        }, {});\n\nconst addKeys = (obj, add, initialValue, defaultData, pendingData) =>\n    add.reduce((a, c) => ({ ...a, [c]: a[c] ?? pendingData?.[c] ?? defaultData?.[c] ?? initialValue }), obj);\n\n/**\n * Processes default data and sets as default in state\n */\nexport function init({ schema, defaultData, processField, fieldProblems }) {\n    const getProcessedState = fieldKey => {\n        if (typeof defaultData[fieldKey] === 'undefined')\n            return { valid: false, errors: null, data: null, fieldProblems: fieldProblems?.[fieldKey] ?? null };\n\n        const [formattedValue, validationResult] = processField(\n            { key: fieldKey, value: defaultData[fieldKey], mode: 'blur' },\n            { state: { data: defaultData } }\n        );\n\n        return {\n            valid: (validationResult.isValid && !fieldProblems?.[fieldKey]) || false,\n            errors: validationResult.hasError() ? validationResult.getError() : null,\n            data: formattedValue,\n            fieldProblems: fieldProblems?.[fieldKey] ?? null\n        };\n    };\n\n    const formData = schema.reduce(\n        (acc: any, fieldKey) => {\n            const { valid, errors, data, fieldProblems } = getProcessedState(fieldKey);\n\n            return {\n                valid: { ...acc.valid, [fieldKey]: valid },\n                errors: { ...acc.errors, [fieldKey]: errors },\n                data: { ...acc.data, [fieldKey]: data },\n                fieldProblems: { ...acc.fieldProblems, [fieldKey]: fieldProblems }\n            };\n        },\n        { data: {}, valid: {}, errors: {}, fieldProblems: {} }\n    );\n\n    return {\n        schema,\n        data: formData.data,\n        valid: formData.valid,\n        errors: formData.errors,\n        fieldProblems: formData.fieldProblems\n    };\n}\n\nexport function getReducer(processField) {\n    return function reducer(state, { type, key, value, mode, schema, defaultData, formValue, selectedSchema, fieldProblems, data }) {\n        const validationSchema: string[] = selectedSchema || state.schema;\n\n        switch (type) {\n            case 'setData': {\n                return { ...state, data: { ...state['data'], [key]: value } };\n            }\n            case 'mergeData': {\n                return { ...state, data: { ...state['data'], ...data } };\n            }\n            case 'setValid': {\n                return { ...state, valid: { ...state['valid'], [key]: value } };\n            }\n            case 'setErrors': {\n                return { ...state, errors: { ...state['errors'], [key]: value } };\n            }\n            case 'setFieldProblems': {\n                return (\n                    state?.schema?.reduce(\n                        (acc, key) => ({\n                            ...acc,\n                            fieldProblems: { ...state['fieldProblems'], [key]: fieldProblems?.[key] ?? null },\n                            valid: { ...state['valid'], [key]: state['valid']?.[key] && !fieldProblems[key] }\n                        }),\n                        state\n                    ) ?? state\n                );\n            }\n            case 'updateField': {\n                const [formattedValue, validation] = processField({ key, value, mode }, { state });\n                const oldValue = state.data[key];\n                const fieldProblems = { ...state.fieldProblems };\n                if (oldValue !== formattedValue) {\n                    fieldProblems[key] = null;\n                }\n                return {\n                    ...state,\n                    data: { ...state['data'], [key]: formattedValue },\n                    errors: { ...state['errors'], [key]: validation.hasError() ? validation.getError() : null },\n                    valid: { ...state['valid'], [key]: (validation.isValid && !fieldProblems[key]) || false },\n                    fieldProblems\n                };\n            }\n            case 'mergeForm': {\n                // To provide a uniform result from forms even if there are multiple levels of nested forms are present\n                const mergedState = {\n                    ...state,\n                    data: { ...state['data'], ...formValue['data'] },\n                    errors: { ...state['errors'], ...formValue['errors'] },\n                    valid: { ...state['valid'], ...formValue['valid'] },\n                    fieldProblems: { ...state['fieldProblems'], ...formValue['fieldProblems'] }\n                };\n                if (mergedState['valid']) {\n                    mergedState.isValid = Object.values(mergedState.valid).every(isValid => isValid);\n                }\n                return mergedState;\n            }\n            case 'setSchema': {\n                const defaultState = init({ schema, defaultData, processField, fieldProblems });\n                const removedSchemaFields = state.schema.filter(x => !schema.includes(x));\n                const newSchemaFields = schema.filter(x => !state.schema.includes(x));\n\n                // if we remove a key from the schema we also lost the latest value of the field\n                // to prevent this we have to store the value in a local state so we can recover it when the key is re-added to the schema\n                const local = {\n                    data: omitKeys(state.data, newSchemaFields),\n                    errors: omitKeys(state.errors, newSchemaFields),\n                    valid: omitKeys(state.valid, newSchemaFields)\n                };\n\n                // reindex data and validation according to the new schema\n                const data = addKeys(omitKeys(state.data, removedSchemaFields), newSchemaFields, null, defaultState.data, state.local?.data);\n                const valid = addKeys(omitKeys(state.valid, removedSchemaFields), newSchemaFields, false, defaultState.valid, state.local?.valid);\n                const errors = addKeys(omitKeys(state.errors, removedSchemaFields), newSchemaFields, null, defaultState.errors, state.local?.errors);\n\n                return { ...state, schema, data, valid, errors, local };\n            }\n            case 'validateForm': {\n                const formValidation = validationSchema.reduce(\n                    (acc, cur) => {\n                        const [, validation] = processField({ key: cur, value: state.data[cur], mode: 'blur' }, { state });\n                        return {\n                            valid: { ...acc['valid'], [cur]: (validation.isValid && !state.fieldProblems[cur]) || false },\n                            errors: { ...acc['errors'], [cur]: validation.hasError(true) ? validation.getError(true) : null }\n                        };\n                    },\n                    { valid: state.valid, errors: state.errors }\n                );\n\n                return { ...state, valid: formValidation.valid, errors: formValidation.errors };\n            }\n            default:\n                throw new Error('Undefined useForm action');\n        }\n    };\n}\n"],"names":["omitKeys","obj","omit","Object","keys","filter","k","includes","reduce","a","c","addKeys","add","initialValue","defaultData","pendingData","init","schema","processField","fieldProblems","getProcessedState","fieldKey","valid","errors","data","formattedValue","validationResult","key","value","mode","state","isValid","hasError","getError","formData","acc","getReducer","type","formValue","selectedSchema","validationSchema","validation","oldValue","mergedState","values","every","defaultState","removedSchemaFields","x","newSchemaFields","local","formValidation","cur","Error"],"mappings":"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"}