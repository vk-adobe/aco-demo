{"version":3,"file":"utils.js","sources":["../../../src/core/utils.ts"],"sourcesContent":["import { GENERIC_OPTIONS } from './config';\nimport type { CoreConfiguration } from './types';\n\n/**\n * Filter properties in a global configuration object from an allow list (GENERIC_OPTIONS)\n * @param globalOptions -\n * @returns any\n */\nexport function processGlobalOptions(globalOptions) {\n    return Object.keys(globalOptions).reduce((r, e) => {\n        if (GENERIC_OPTIONS.includes(e)) r[e] = globalOptions[e];\n        return r;\n    }, {});\n}\n\n/**\n * Validates that there is no unknown property as part of the CoreConfiguration.\n * The validator makes sure to throw a lint error in case a property is added to CoreConfiguration, but it is not added here\n *\n * @param props - AdyenCheckout props\n */\nexport function assertConfigurationPropertiesAreValid(propsSetByMerchant: CoreConfiguration): void {\n    /** Helper that creates a function that validates the array contain ALL CoreConfiguration properties in it */\n    function createConfigurationKeysValidator<T>() {\n        const arrayOfAll =\n            <T>() =>\n            <U extends T[]>(array: U & ([T] extends [U[number]] ? unknown : 'Invalid')) =>\n                array;\n        const arrayWithAllKeys = arrayOfAll<T>();\n        return arrayWithAllKeys;\n    }\n\n    const validator = createConfigurationKeysValidator<keyof CoreConfiguration>();\n    const possibleFields = validator([\n        'session',\n        'environment',\n        '_environmentUrls',\n        'showPayButton',\n        'clientKey',\n        'locale',\n        'translations',\n        'paymentMethodsResponse',\n        'amount',\n        'secondaryAmount',\n        'countryCode',\n        'allowPaymentMethods',\n        'removePaymentMethods',\n        'srConfig',\n        'analytics',\n        'risk',\n        'order',\n        'exposeLibraryMetadata',\n        'beforeRedirect',\n        'beforeSubmit',\n        'onPaymentCompleted',\n        'onPaymentFailed',\n        'onSubmit',\n        'onAdditionalDetails',\n        'onActionHandled',\n        'onChange',\n        'onError',\n        'onBalanceCheck',\n        'onOrderRequest',\n        'onPaymentMethodsRequest',\n        'onOrderCancel',\n        'onOrderUpdated',\n        'loadingContext',\n        'onEnterKeyPressed',\n        'afterAdditionalDetails'\n    ]);\n\n    Object.keys(propsSetByMerchant).forEach((prop: keyof CoreConfiguration) => {\n        if (!possibleFields.includes(prop)) {\n            console.warn(\n                `AdyenCheckout - Configuration property \"${prop}\" is not a valid AdyenCheckout property. If it is a payment method configuration, make sure to pass it directly to the Component. If you are using Drop-in, make sure to pass it to \"paymentMethodsConfiguration\" object`\n            );\n        }\n    });\n}\n\n/**\n * TODO: Check if this is correct place\n * Type guard for enums, helpful to make sure strings keep enum value\n * Comes from this: https://github.com/microsoft/TypeScript/issues/30611#issuecomment-570773496\n * @param enumVariable\n */\nexport function createEnumChecker<T extends string, TEnumValue extends string>(enumVariable: { [key in T]: TEnumValue }) {\n    const enumValues = Object.values(enumVariable);\n    return (value: string): value is TEnumValue => enumValues.includes(value);\n}\n"],"names":["processGlobalOptions","globalOptions","Object","keys","reduce","r","e","GENERIC_OPTIONS","includes","assertConfigurationPropertiesAreValid","propsSetByMerchant","possibleFields","array","validator","forEach","prop","console","warn","createEnumChecker","enumVariable","enumValues","values","value"],"mappings":"8CAQO,SAASA,EAAqBC,GACjC,OAAOC,OAAOC,KAAKF,GAAeG,QAAO,CAACC,EAAGC,KACrCC,EAAgBC,SAASF,KAAID,EAAEC,GAAKL,EAAcK,IAC/CD,IACR,GACP,CAQO,SAASI,EAAsCC,GAWlD,MACMC,EAPE,CAAgBC,GACZA,EAMWC,CAAU,CAC7B,UACA,cACA,mBACA,gBACA,YACA,SACA,eACA,yBACA,SACA,kBACA,cACA,sBACA,uBACA,WACA,YACA,OACA,QACA,wBACA,iBACA,eACA,qBACA,kBACA,WACA,sBACA,kBACA,WACA,UACA,iBACA,iBACA,0BACA,gBACA,iBACA,iBACA,oBACA,2BAGJX,OAAOC,KAAKO,GAAoBI,SAASC,IAChCJ,EAAeH,SAASO,IACzBC,QAAQC,KACJ,2CAA2CF,4NAEnD,GAER,CAQO,SAASG,EAA+DC,GAC3E,MAAMC,EAAalB,OAAOmB,OAAOF,GACjC,OAAQG,GAAuCF,EAAWZ,SAASc,EACvE"}