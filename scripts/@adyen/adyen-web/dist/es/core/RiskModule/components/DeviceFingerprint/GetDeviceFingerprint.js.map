{"version":3,"file":"GetDeviceFingerprint.js","sources":["../../../../../../src/core/RiskModule/components/DeviceFingerprint/GetDeviceFingerprint.tsx"],"sourcesContent":["import { Component, h } from 'preact';\nimport Iframe from '../../../../components/internal/IFrame';\nimport promiseTimeout from '../../../../utils/promiseTimeout';\nimport { DEVICE_FINGERPRINT, DF_TIMEOUT, FAILED_DFP_RESOLVE_OBJECT_TIMEOUT } from '../../constants';\nimport getProcessMessageHandler from '../../../../utils/get-process-message-handler';\nimport { getOrigin } from '../../../../utils/getOrigin';\nimport { GetDeviceFingerprintProps } from './types';\n\nconst iframeName = 'dfIframe';\nconst allowProperties = 'geolocation; microphone; camera;';\n\nclass GetDeviceFingerprint extends Component<GetDeviceFingerprintProps> {\n    public postMessageDomain;\n    public processMessageHandler;\n    public deviceFingerPrintPromise;\n\n    constructor(props) {\n        super(props);\n\n        this.postMessageDomain = getOrigin(this.props.loadingContext) || this.props.loadingContext;\n    }\n\n    getDfpPromise(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            /**\n             * Listen for postMessage responses from the notification url\n             */\n            this.processMessageHandler = getProcessMessageHandler(this.postMessageDomain, resolve, reject, DEVICE_FINGERPRINT);\n\n            window.addEventListener('message', this.processMessageHandler);\n        });\n    }\n\n    componentDidMount() {\n        // Get device fingerprint\n        this.deviceFingerPrintPromise = promiseTimeout(DF_TIMEOUT, this.getDfpPromise(), FAILED_DFP_RESOLVE_OBJECT_TIMEOUT);\n        this.deviceFingerPrintPromise.promise\n            .then(resolveObject => {\n                this.props.onCompleteFingerprint(resolveObject);\n                window.removeEventListener('message', this.processMessageHandler);\n            })\n            .catch(rejectObject => {\n                this.props.onErrorFingerprint(rejectObject);\n                window.removeEventListener('message', this.processMessageHandler);\n            });\n    }\n\n    render({ dfpURL }) {\n        return (\n            <div className=\"adyen-checkout-risk__device-fingerprint\">\n                <Iframe name={iframeName} src={dfpURL} allow={allowProperties} title=\"devicefingerprinting iframe\" />\n            </div>\n        );\n    }\n}\n\nexport default GetDeviceFingerprint;\n"],"names":["GetDeviceFingerprint","Component","getDfpPromise","Promise","resolve","reject","this","processMessageHandler","getProcessMessageHandler","postMessageDomain","DEVICE_FINGERPRINT","window","addEventListener","componentDidMount","deviceFingerPrintPromise","promiseTimeout","DF_TIMEOUT","FAILED_DFP_RESOLVE_OBJECT_TIMEOUT","promise","then","resolveObject","props","onCompleteFingerprint","removeEventListener","catch","rejectObject","onErrorFingerprint","render","dfpURL","h","div","className","Iframe","name","src","allow","title","constructor","super","_define_property","getOrigin","loadingContext"],"mappings":"+iBAWA,MAAMA,UAA6BC,EAW/BC,aAAAA,GACI,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAIzBC,KAAKC,sBAAwBC,EAAyBF,KAAKG,kBAAmBL,EAASC,EAAQK,GAE/FC,OAAOC,iBAAiB,UAAWN,KAAKC,sBAAqB,GAErE,CAEAM,iBAAAA,GAEIP,KAAKQ,yBAA2BC,EAAeC,EAAYV,KAAKJ,gBAAiBe,GACjFX,KAAKQ,yBAAyBI,QACzBC,MAAKC,IACFd,KAAKe,MAAMC,sBAAsBF,GACjCT,OAAOY,oBAAoB,UAAWjB,KAAKC,sBAAqB,IAEnEiB,OAAMC,IACHnB,KAAKe,MAAMK,mBAAmBD,GAC9Bd,OAAOY,oBAAoB,UAAWjB,KAAKC,sBAAqB,GAE5E,CAEAoB,MAAAA,EAAOC,OAAEA,IACL,OACIC,EAACC,MAAAA,CAAIC,UAAU,2CACXF,EAACG,EAAAA,CAAOC,KA1CL,WA0CuBC,IAAKN,EAAQO,MAzC/B,mCAyCuDC,MAAM,gCAGjF,CArCAC,WAAAA,CAAYhB,GACRiB,MAAMjB,GALVkB,EAAO9B,KAAAA,yBAAP,GACA8B,EAAOhC,KAAAA,6BAAP,GACAgC,EAAOzB,KAAAA,gCAAP,GAKIR,KAAKG,kBAAoB+B,EAAUlC,KAAKe,MAAMoB,iBAAmBnC,KAAKe,MAAMoB,cAChF"}