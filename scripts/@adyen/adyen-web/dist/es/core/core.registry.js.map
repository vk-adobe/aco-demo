{"version":3,"file":"core.registry.js","sources":["../../../src/core/core.registry.ts"],"sourcesContent":["import UIElement from '../components/internal/UIElement/UIElement';\nimport ThreeDS2Challenge from '../components/ThreeDS2/ThreeDS2Challenge';\nimport ThreeDS2DeviceFingerprint from '../components/ThreeDS2/ThreeDS2DeviceFingerprint';\nimport Redirect from '../components/Redirect';\nimport { TxVariants } from '../components/tx-variants';\nimport type { ICore } from './types';\n\nfunction assertClassHasType(Class: any): Class is typeof UIElement {\n    const hasValidType = typeof Class.type === 'string' && !!Class.type;\n    return hasValidType;\n}\n\nexport type NewableComponent = new (checkout: ICore, props?) => UIElement;\n\nexport interface IRegistry {\n    add(...items: NewableComponent[]): void;\n    getComponent(type: string): NewableComponent | undefined;\n}\n\nconst defaultComponents = {\n    [TxVariants.redirect]: Redirect,\n    [TxVariants.threeDS2Challenge]: ThreeDS2Challenge,\n    [TxVariants.threeDS2DeviceFingerprint]: ThreeDS2DeviceFingerprint\n};\n\nclass Registry implements IRegistry {\n    public componentsMap: Record<string, NewableComponent> = defaultComponents;\n\n    public supportedTxVariants: Set<string> = new Set(Object.values(TxVariants));\n\n    public add(...items: NewableComponent[]) {\n        this.componentsMap = {\n            ...this.componentsMap,\n            ...this.createComponentsMap(items)\n        };\n    }\n\n    public getComponent(type: string): NewableComponent | undefined {\n        const Component = this.componentsMap[type];\n        if (Component) {\n            return Component;\n        }\n\n        if (this.supportedTxVariants.has(type)) {\n            return;\n        }\n\n        return Redirect;\n    }\n\n    public createComponentsMap(components: NewableComponent[]) {\n        const componentsMap = components.reduce((memo, component) => {\n            const isValid = assertClassHasType(component);\n\n            if (!isValid) {\n                console.error('CoreRegistry: Attempt to register Class failed. The Class is not a valid UIElement');\n                return memo;\n            }\n            if (component.type === 'dropin') {\n                return memo;\n            }\n\n            const supportedTxVariants = [component.type, ...component.txVariants].filter(txVariant => txVariant);\n\n            supportedTxVariants.forEach(txVariant => {\n                memo = {\n                    ...memo,\n                    [txVariant]: component\n                };\n            });\n\n            return memo;\n        }, {});\n\n        return componentsMap;\n    }\n}\n\nexport default new Registry();\n"],"names":["defaultComponents","TxVariants","redirect","Redirect","threeDS2Challenge","ThreeDS2Challenge","threeDS2DeviceFingerprint","ThreeDS2DeviceFingerprint","registry","add","items","this","componentsMap","createComponentsMap","getComponent","type","Component","supportedTxVariants","has","components","reduce","memo","component","Class","console","error","txVariants","filter","txVariant","forEach","_define_property","Set","Object","values"],"mappings":"kWAmBA,MAAMA,EAAoB,CACtB,CAACC,EAAWC,UAAWC,EACvB,CAACF,EAAWG,mBAAoBC,EAChC,CAACJ,EAAWK,2BAA4BC,GAwD5C,IAAeC,EAAA,IArDf,MAKWC,GAAAA,IAAOC,GACVC,KAAKC,cAAgB,IACdD,KAAKC,iBACLD,KAAKE,oBAAoBH,GAEpC,CAEOI,YAAAA,CAAaC,GAChB,MAAMC,EAAYL,KAAKC,cAAcG,GACrC,OAAIC,IAIAL,KAAKM,oBAAoBC,IAAIH,QAAjC,EAIOZ,EACX,CAEOU,mBAAAA,CAAoBM,GAwBvB,OAvBsBA,EAAWC,QAAO,CAACC,EAAMC,KA5CvD,IAA4BC,EA+ChB,KA9CmC,iBADnBA,EA6CmBD,GA5CTP,QAAuBQ,EAAMR,MAgDnD,OADAS,QAAQC,MAAM,sFACPJ,EAEX,GAAuB,WAAnBC,EAAUP,KACV,OAAOM,EAYX,MAT4B,CAACC,EAAUP,QAASO,EAAUI,YAAYC,QAAOC,GAAaA,IAEtEC,SAAQD,IACxBP,EAAO,IACAA,EACHO,CAACA,GAAYN,EACjB,IAGGD,CAAAA,GACR,GAGP,eAjDAS,EAAAnB,KAAOC,gBAAkDZ,GAEzD8B,EAAAnB,KAAOM,sBAAmC,IAAIc,IAAIC,OAAOC,OAAOhC"}