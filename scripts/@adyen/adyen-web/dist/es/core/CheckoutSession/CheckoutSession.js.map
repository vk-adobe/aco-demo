{"version":3,"file":"CheckoutSession.js","sources":["../../../../src/core/CheckoutSession/CheckoutSession.ts"],"sourcesContent":["import makePayment from '../Services/sessions/make-payment';\nimport submitDetails from '../Services/sessions/submit-details';\nimport setupSession from '../Services/sessions/setup-session';\nimport checkBalance from '../Services/sessions/check-balance';\nimport Storage from '../../utils/Storage';\nimport createOrder from '../Services/sessions/create-order';\nimport { sanitizeSession } from './utils';\nimport {\n    CheckoutSession,\n    CheckoutSessionBalanceResponse,\n    CheckoutSessionDetailsResponse,\n    CheckoutSessionOrdersResponse,\n    CheckoutSessionPaymentResponse,\n    CheckoutSessionSetupResponse,\n    SessionConfiguration,\n    SetupSessionOptions\n} from './types';\nimport cancelOrder from '../Services/sessions/cancel-order';\nimport { onOrderCancelData } from '../../components/Dropin/types';\nimport type { AdditionalDetailsData } from '../types';\nimport collectBrowserInfo from '../../utils/browserInfo';\n\nclass Session {\n    private readonly session: CheckoutSession;\n    private readonly storage: Storage<CheckoutSession>;\n    public readonly clientKey: string;\n    public readonly loadingContext: string;\n    public configuration: SessionConfiguration;\n\n    constructor(rawSession: Partial<CheckoutSession>, clientKey: string, loadingContext: string) {\n        const session = sanitizeSession(rawSession) as CheckoutSession;\n\n        if (!clientKey) throw new Error('No clientKey available');\n        if (!loadingContext) throw new Error('No loadingContext available');\n\n        this.storage = new Storage('session', 'localStorage');\n        this.clientKey = clientKey;\n        this.loadingContext = loadingContext;\n        this.session = session;\n\n        if (!this.session.sessionData) {\n            this.session = this.getStoredSession();\n        } else {\n            this.storeSession();\n        }\n    }\n\n    get shopperLocale() {\n        return this.session.shopperLocale;\n    }\n\n    get id() {\n        return this.session.id;\n    }\n\n    get data() {\n        return this.session.sessionData;\n    }\n\n    /**\n     * Updates the session.data with the latest data blob\n     */\n    private updateSessionData(latestData: string): void {\n        this.session.sessionData = latestData;\n        this.storeSession();\n    }\n\n    /**\n     * Fetches data from a session\n     */\n    setupSession(options: SetupSessionOptions): Promise<CheckoutSessionSetupResponse> {\n        const mergedOptions = { ...options, browserInfo: collectBrowserInfo() };\n        return setupSession(this, mergedOptions).then(response => {\n            if (response.configuration) {\n                this.configuration = { ...response.configuration };\n            }\n\n            if (response.sessionData) {\n                this.updateSessionData(response.sessionData);\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Submits a session payment\n     */\n    submitPayment(data): Promise<CheckoutSessionPaymentResponse> {\n        return makePayment(data, this).then(response => {\n            if (response.sessionData) {\n                this.updateSessionData(response.sessionData);\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Submits session payment additional details\n     */\n    submitDetails(data: AdditionalDetailsData['data']): Promise<CheckoutSessionDetailsResponse> {\n        return submitDetails(data, this).then(response => {\n            if (response.sessionData) {\n                this.updateSessionData(response.sessionData);\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Checks the balance for a payment method\n     */\n    checkBalance(data): Promise<CheckoutSessionBalanceResponse> {\n        return checkBalance(data, this).then(response => {\n            if (response.sessionData) {\n                this.updateSessionData(response.sessionData);\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Creates an order for the current session\n     */\n    createOrder(): Promise<CheckoutSessionOrdersResponse> {\n        return createOrder(this).then(response => {\n            if (response.sessionData) {\n                this.updateSessionData(response.sessionData);\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Cancels an order for the current session\n     */\n    cancelOrder(data: onOrderCancelData): Promise<CheckoutSessionOrdersResponse> {\n        return cancelOrder(data.order, this).then(response => {\n            if (response.sessionData) {\n                this.updateSessionData(response.sessionData);\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Gets the stored session but only if the current id and the stored id match\n     */\n    getStoredSession(): CheckoutSession {\n        const storedSession = this.storage.get();\n        return this.id === storedSession?.id ? storedSession : this.session;\n    }\n\n    /**\n     * Stores the session\n     */\n    storeSession(): void {\n        this.storage.set({ id: this.session.id, sessionData: this.session.sessionData });\n    }\n\n    /**\n     * Clears the stored session\n     */\n    removeStoredSession(): void {\n        this.storage.remove();\n    }\n}\n\nexport default Session;\n"],"names":["Session","shopperLocale","this","session","id","data","sessionData","updateSessionData","latestData","storeSession","setupSession","options","mergedOptions","browserInfo","collectBrowserInfo","then","response","configuration","submitPayment","makePayment","submitDetails","checkBalance","createOrder","cancelOrder","order","getStoredSession","storedSession","storage","get","set","removeStoredSession","remove","constructor","rawSession","clientKey","loadingContext","_define_property","sanitizeSession","Error","Storage"],"mappings":"ijBAsBA,MAAMA,EAyBF,iBAAIC,GACA,OAAOC,KAAKC,QAAQF,aACxB,CAEA,MAAIG,GACA,OAAOF,KAAKC,QAAQC,EACxB,CAEA,QAAIC,GACA,OAAOH,KAAKC,QAAQG,WACxB,CAKQC,iBAAAA,CAAkBC,GACtBN,KAAKC,QAAQG,YAAcE,EAC3BN,KAAKO,cACT,CAKAC,YAAAA,CAAaC,GACT,MAAMC,EAAgB,IAAKD,EAASE,YAAaC,KACjD,OAAOJ,EAAaR,KAAMU,GAAeG,MAAKC,IACtCA,EAASC,gBACTf,KAAKe,cAAgB,IAAKD,EAASC,gBAGnCD,EAASV,aACTJ,KAAKK,kBAAkBS,EAASV,aAG7BU,IAEf,CAKAE,aAAAA,CAAcb,GACV,OAAOc,EAAYd,EAAMH,MAAMa,MAAKC,IAC5BA,EAASV,aACTJ,KAAKK,kBAAkBS,EAASV,aAG7BU,IAEf,CAKAI,aAAAA,CAAcf,GACV,OAAOe,EAAcf,EAAMH,MAAMa,MAAKC,IAC9BA,EAASV,aACTJ,KAAKK,kBAAkBS,EAASV,aAG7BU,IAEf,CAKAK,YAAAA,CAAahB,GACT,OAAOgB,EAAahB,EAAMH,MAAMa,MAAKC,IAC7BA,EAASV,aACTJ,KAAKK,kBAAkBS,EAASV,aAG7BU,IAEf,CAKAM,WAAAA,GACI,OAAOA,EAAYpB,MAAMa,MAAKC,IACtBA,EAASV,aACTJ,KAAKK,kBAAkBS,EAASV,aAG7BU,IAEf,CAKAO,WAAAA,CAAYlB,GACR,OAAOkB,EAAYlB,EAAKmB,MAAOtB,MAAMa,MAAKC,IAClCA,EAASV,aACTJ,KAAKK,kBAAkBS,EAASV,aAG7BU,IAEf,CAKAS,gBAAAA,GACI,MAAMC,EAAgBxB,KAAKyB,QAAQC,MACnC,OAAO1B,KAAKE,KAAOsB,GAAetB,GAAKsB,EAAgBxB,KAAKC,OAChE,CAKAM,YAAAA,GACIP,KAAKyB,QAAQE,IAAI,CAAEzB,GAAIF,KAAKC,QAAQC,GAAIE,YAAaJ,KAAKC,QAAQG,aACtE,CAKAwB,mBAAAA,GACI5B,KAAKyB,QAAQI,QACjB,CA7IAC,WAAAA,CAAYC,EAAsCC,EAAmBC,GANrEC,EAAAlC,KAAiBC,eAAjB,GACAiC,EAAAlC,KAAiByB,eAAjB,GACAS,EAAAlC,KAAgBgC,iBAAhB,GACAE,EAAAlC,KAAgBiC,sBAAhB,GACAC,EAAAlC,KAAOe,qBAAP,GAGI,MAAMd,EAAUkC,EAAgBJ,GAEhC,IAAKC,EAAW,MAAM,IAAII,MAAM,0BAChC,IAAKH,EAAgB,MAAM,IAAIG,MAAM,+BAErCpC,KAAKyB,QAAU,IAAIY,EAAQ,UAAW,gBACtCrC,KAAKgC,UAAYA,EACjBhC,KAAKiC,eAAiBA,EACtBjC,KAAKC,QAAUA,EAEVD,KAAKC,QAAQG,YAGdJ,KAAKO,eAFLP,KAAKC,QAAUD,KAAKuB,kBAI5B"}