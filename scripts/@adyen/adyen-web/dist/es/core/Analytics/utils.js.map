{"version":3,"file":"utils.js","sources":["../../../../src/core/Analytics/utils.ts"],"sourcesContent":["import { AnalyticsData } from './types';\nimport { errorCodeMapping, ALLOWED_ANALYTICS_DATA } from './constants';\nimport { digitsOnlyFormatter } from '../../utils/Formatters/formatters';\nimport { ERROR_FIELD_REQUIRED, ERROR_INVALID_FORMAT_EXPECTS } from '../Errors/constants';\n\nexport const getUTCTimestamp = () => Date.now();\n\nexport const mapErrorCodesForAnalytics = (errorCode: string, target: string) => {\n    // Some of the more generic error codes required combination with target to retrieve a specific code\n    if (errorCode === ERROR_FIELD_REQUIRED || errorCode === ERROR_INVALID_FORMAT_EXPECTS) {\n        return errorCodeMapping[`${errorCode}.${target}`] ?? errorCode;\n    }\n\n    let errCode = errorCodeMapping[errorCode] ?? errorCode;\n\n    // If errCode isn't now a number - then we just need to remove any non-digits\n    // since the correct error code is already contained within the string e.g. securedField related errors\n    if (isNaN(Number(errCode))) {\n        errCode = digitsOnlyFormatter(errCode);\n    }\n\n    return errCode;\n};\n\nexport const processAnalyticsData = (analyticsData: AnalyticsData): AnalyticsData => {\n    return Object.keys(analyticsData).reduce((acc, prop) => {\n        if (ALLOWED_ANALYTICS_DATA.includes(prop)) acc[prop] = analyticsData[prop];\n        return acc;\n    }, {});\n};\n"],"names":["getUTCTimestamp","Date","now","mapErrorCodesForAnalytics","errorCode","target","ERROR_FIELD_REQUIRED","ERROR_INVALID_FORMAT_EXPECTS","errorCodeMapping","errCode","isNaN","Number","digitsOnlyFormatter","processAnalyticsData","analyticsData","Object","keys","reduce","acc","prop","ALLOWED_ANALYTICS_DATA","includes"],"mappings":"yPAKaA,MAAAA,EAAkB,IAAMC,KAAKC,MAE7BC,EAA4B,CAACC,EAAmBC,KAEzD,GAAID,IAAcE,GAAwBF,IAAcG,EACpD,OAAOC,EAAiB,GAAGJ,KAAaC,MAAaD,EAGzD,IAAIK,EAAUD,EAAiBJ,IAAcA,EAQ7C,OAJIM,MAAMC,OAAOF,MACbA,EAAUG,EAAoBH,IAG3BA,CAAAA,EAGEI,EAAwBC,GAC1BC,OAAOC,KAAKF,GAAeG,QAAO,CAACC,EAAKC,KACvCC,EAAuBC,SAASF,KAAOD,EAAIC,GAAQL,EAAcK,IAC9DD,IACR"}