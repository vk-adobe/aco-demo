{"version":3,"file":"SRMessages.js","sources":["../../../../src/core/Errors/SRMessages.tsx"],"sourcesContent":["import { h, Fragment } from 'preact';\nimport { useRef, useState } from 'preact/hooks';\nimport { SRMessagesProps } from './types';\n\n// An interface for the members exposed by SRMessages to its parent\nexport interface SRMessagesRef {\n    setMessages?: (who: string[]) => void;\n}\n\nexport function SRMessages({ setComponentRef }: SRMessagesProps) {\n    const messagesRef = useRef<SRMessagesRef>({});\n    // Just call once to create the object by which we expose the members expected by the parent comp\n    if (!Object.keys(messagesRef.current).length) {\n        setComponentRef?.(messagesRef.current);\n    }\n\n    const [messages, setMessages] = useState(null);\n\n    // Expose method expected by parent\n    messagesRef.current.setMessages = (msgs: string[]) => {\n        setMessages(msgs);\n    };\n\n    return messages ? (\n        <Fragment>\n            {messages.map(msg => {\n                return (\n                    <div key={msg} className=\"adyen-checkout-sr-panel__msg\" {...(process.env.NODE_ENV !== 'production' && { 'data-testid': msg })}>\n                        {msg}\n                    </div>\n                );\n            })}\n        </Fragment>\n    ) : null;\n}\n"],"names":["SRMessages","setComponentRef","messagesRef","useRef","Object","keys","current","length","messages","setMessages","useState","msgs","h","Fragment","map","msg","div","key","className"],"mappings":"oKASO,SAASA,GAAWC,gBAAEA,IACzB,MAAMC,EAAcC,EAAsB,IAErCC,OAAOC,KAAKH,EAAYI,SAASC,QAClCN,IAAkBC,EAAYI,SAGlC,MAAOE,EAAUC,GAAeC,EAAS,MAOzC,OAJAR,EAAYI,QAAQG,YAAeE,IAC/BF,EAAYE,EAAAA,EAGTH,EACHI,EAACC,EAAAA,KACIL,EAASM,KAAIC,GAENH,EAACI,MAAAA,CAAIC,IAAKF,EAAKG,UAAU,gCACpBH,MAKjB,IACR"}