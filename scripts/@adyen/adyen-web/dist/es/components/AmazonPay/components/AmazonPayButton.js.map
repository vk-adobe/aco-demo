{"version":3,"file":"AmazonPayButton.js","sources":["../../../../../src/components/AmazonPay/components/AmazonPayButton.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\nimport { getAmazonSignature } from '../services';\nimport { getAmazonPaySettings, getPayloadJSON } from '../utils';\nimport { AmazonPayButtonProps, CheckoutSessionConfig, PayloadJSON } from '../types';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\n\nexport default function AmazonPayButton(props: AmazonPayButtonProps) {\n    const { loadingContext } = useCoreContext();\n    const { amazonRef, configuration = {} } = props;\n    const [signature, setSignature] = useState<string>(null);\n    const payloadJSON: PayloadJSON = getPayloadJSON(props);\n    const settings = getAmazonPaySettings(props);\n\n    const handleOnClick = () => {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        new Promise(props.onClick).then(this.initCheckout).catch(error => {\n            if (props.onError) props.onError(error, this.componentRef);\n        });\n    };\n\n    const renderAmazonPayButton = (): void => {\n        const amazonPayButton = amazonRef.Pay.renderButton('#amazonPayButton', settings);\n        amazonPayButton.onClick(handleOnClick);\n    };\n\n    this.initCheckout = () => {\n        const checkoutSessionConfig: CheckoutSessionConfig = {\n            payloadJSON: JSON.stringify(payloadJSON),\n            publicKeyId: configuration.publicKeyId,\n            signature\n        };\n\n        amazonRef.Pay.initCheckout({\n            ...settings,\n            createCheckoutSessionConfig: checkoutSessionConfig\n        });\n    };\n\n    useEffect(() => {\n        const { clientKey } = props;\n\n        getAmazonSignature(loadingContext, clientKey, payloadJSON)\n            .then(response => {\n                if (!response?.signature) return console.error('Could not get AmazonPay signature');\n                setSignature(response.signature);\n                if (props.showPayButton) renderAmazonPayButton();\n            })\n            .catch(error => {\n                console.error(error);\n                if (props.onError) props.onError(error, this.componentRef);\n            });\n    }, []);\n\n    if (!props.showPayButton) return null;\n    return <div className=\"adyen-checkout__amazonpay__button\" id=\"amazonPayButton\" />;\n}\n"],"names":["AmazonPayButton","props","loadingContext","useCoreContext","amazonRef","configuration","signature","setSignature","useState","payloadJSON","getPayloadJSON","settings","getAmazonPaySettings","handleOnClick","Promise","onClick","then","this","initCheckout","catch","error","onError","componentRef","checkoutSessionConfig","JSON","stringify","publicKeyId","Pay","createCheckoutSessionConfig","useEffect","clientKey","getAmazonSignature","response","console","showPayButton","renderButton","renderAmazonPayButton","h","div","className","id"],"mappings":"iWAOe,SAASA,EAAgBC,GACpC,MAAMC,eAAEA,GAAmBC,KACrBC,UAAEA,EAASC,cAAEA,EAAgB,CAAA,GAAOJ,GACnCK,EAAWC,GAAgBC,EAAiB,MAC7CC,EAA2BC,EAAeT,GAC1CU,EAAWC,EAAqBX,GAEhCY,EAAgB,KAElB,IAAIC,QAAQb,EAAMc,SAASC,KAAKC,KAAKC,cAAcC,OAAMC,IACjDnB,EAAMoB,SAASpB,EAAMoB,QAAQD,EAAOH,KAAKK,aAAY,GAC7D,EAoCJ,OA5BAL,KAAKC,aAAe,KAChB,MAAMK,EAA+C,CACjDd,YAAae,KAAKC,UAAUhB,GAC5BiB,YAAarB,EAAcqB,YAC3BpB,aAGJF,EAAUuB,IAAIT,aAAa,IACpBP,EACHiB,4BAA6BL,GACjC,EAGJM,GAAU,KACN,MAAMC,UAAEA,GAAc7B,EAEtB8B,EAAmB7B,EAAgB4B,EAAWrB,GACzCO,MAAKgB,IACF,IAAKA,GAAU1B,UAAW,OAAO2B,QAAQb,MAAM,qCAC/Cb,EAAayB,EAAS1B,WAClBL,EAAMiC,eAxBM9B,EAAUuB,IAAIQ,aAAa,mBAAoBxB,GACvDI,QAAQF,EAuBSuB,IAE5BjB,OAAMC,IACHa,QAAQb,MAAMA,GACVnB,EAAMoB,SAASpB,EAAMoB,QAAQD,EAAOH,KAAKK,aAAY,GAC7D,GACL,IAEErB,EAAMiC,cACJG,EAACC,MAAAA,CAAIC,UAAU,oCAAoCC,GAAG,oBAD5B,IAErC"}