{"version":3,"file":"Card.js","sources":["../../../../src/components/Card/Card.tsx"],"sourcesContent":["import { h } from 'preact';\nimport CardInput from './components/CardInput';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport collectBrowserInfo from '../../utils/browserInfo';\nimport { BinLookupResponse, CardElementData, CardConfiguration } from './types';\nimport triggerBinLookUp from '../internal/SecuredFields/binLookup/triggerBinLookUp';\nimport { CardBinLookupData, CardConfigSuccessData, CardFocusData } from '../internal/SecuredFields/lib/types';\nimport { fieldTypeToSnakeCase } from '../internal/SecuredFields/utils';\nimport { reject } from '../../utils/commonUtils';\nimport { hasValidInstallmentsObject } from './components/CardInput/utils';\nimport createClickToPayService from '../internal/ClickToPay/services/create-clicktopay-service';\nimport { ClickToPayCheckoutPayload, IClickToPayService } from '../internal/ClickToPay/services/types';\nimport ClickToPayWrapper from './components/ClickToPayWrapper';\nimport { ComponentFocusObject } from '../../types/global-types';\nimport SRPanelProvider from '../../core/Errors/SRPanelProvider';\nimport { TxVariants } from '../tx-variants';\nimport type { PayButtonFunctionProps, UIElementStatus } from '../internal/UIElement/types';\nimport UIElement from '../internal/UIElement';\nimport PayButton from '../internal/PayButton';\nimport type { ICore } from '../../core/types';\nimport { ANALYTICS_FOCUS_STR, ANALYTICS_CONFIGURED_STR, ANALYTICS_UNFOCUS_STR, ANALYTICS_RENDERED_STR } from '../../core/Analytics/constants';\nimport { ALL_SECURED_FIELDS } from '../internal/SecuredFields/lib/constants';\nimport { hasOwnProperty } from '../../utils/hasOwnProperty';\nimport AdyenCheckoutError, { IMPLEMENTATION_ERROR } from '../../core/Errors/AdyenCheckoutError';\nimport CardInputDefaultProps from './components/CardInput/defaultProps';\nimport { getCardConfigData } from './components/CardInput/utils';\nimport { AnalyticsEvent } from '../../core/Analytics/AnalyticsEvent';\nimport { AnalyticsInfoEvent } from '../../core/Analytics/AnalyticsInfoEvent';\n\nexport class CardElement extends UIElement<CardConfiguration> {\n    public static type = TxVariants.scheme;\n\n    private readonly clickToPayService: IClickToPayService | null;\n\n    /**\n     * Reference to the 'ClickToPayComponent'\n     */\n    private clickToPayRef = null;\n\n    constructor(checkout: ICore, props?: CardConfiguration) {\n        super(checkout, props);\n\n        if (props && !props._disableClickToPay) {\n            this.clickToPayService = createClickToPayService(this.props.configuration, this.props.clickToPayConfiguration, this.props.environment);\n            void this.clickToPayService?.initialize();\n        }\n    }\n\n    protected static defaultProps = {\n        showFormInstruction: true,\n        _disableClickToPay: false,\n        doBinLookup: true,\n        // Merge most of CardInput's defaultProps\n        ...reject(['type', 'setComponentRef']).from(CardInputDefaultProps)\n    };\n\n    public setStatus(status: UIElementStatus, props?): this {\n        if (this.componentRef?.setStatus) {\n            this.componentRef.setStatus(status, props);\n        }\n        if (this.clickToPayRef?.setStatus) {\n            this.clickToPayRef.setStatus(status, props);\n        }\n        return this;\n    }\n\n    private setClickToPayRef = ref => {\n        this.clickToPayRef = ref;\n    };\n\n    formatProps(props: CardConfiguration): CardConfiguration {\n        // The value from a session should be used, before falling back to the merchant configuration\n        const enableStoreDetails = props.session?.configuration?.enableStoreDetails ?? props.enableStoreDetails;\n\n        const isZeroAuth = props.amount?.value === 0;\n        const showStoreDetailsCheckbox = isZeroAuth ? false : enableStoreDetails;\n\n        const storedCardID = props.storedPaymentMethodId || props.id; // check if we've been passed a (checkout) processed storedCard or one that merchant has pulled from the PMs response\n        const isEcommerceStoredCard = storedCardID && props?.supportedShopperInteractions?.includes('Ecommerce'); // If we have a storedCard does it support Ecommerce (it might not if the merchant has pulled it from the PMs response)\n\n        // If we have a storedPM but it doesn't support Ecommerce - we can't make a storedCard component from it\n        if (storedCardID && !isEcommerceStoredCard) {\n            // TODO - Decide if an error is too severe? Would a console.warning suffice?\n            throw new AdyenCheckoutError(\n                IMPLEMENTATION_ERROR,\n                'You are trying to create a storedCard from a stored PM that does not support Ecommerce interactions'\n            );\n        }\n\n        return {\n            ...props,\n            // Mismatch between hasHolderName & holderNameRequired which can mean card can never be valid\n            holderNameRequired: !props.hasHolderName ? false : props.holderNameRequired,\n            // False for *stored* BCMC cards & if merchant explicitly wants to hide the CVC field\n            hasCVC: !((props.brand && props.brand === 'bcmc') || props.hideCVC),\n            // billingAddressRequired only available for non-stored cards\n            billingAddressRequired: props.storedPaymentMethodId ? false : props.billingAddressRequired,\n            // edge case where merchant has defined both an onAddressLookup callback AND set billingAddressMode: 'partial' - which leads to some strange behaviour in the address UI\n            billingAddressMode: props.onAddressLookup ? CardInputDefaultProps.billingAddressMode : props.billingAddressMode,\n            /** props.brand will be specified in the case of a StoredCard or a Bancontact component, for a regular Card we default it to 'card' */\n            brand: props.brand ?? TxVariants.card,\n            countryCode: props.countryCode ? props.countryCode.toLowerCase() : null,\n            // Required for transition period (until configuration object becomes the norm)\n            // - if merchant has defined value directly in props, use this instead\n            configuration: {\n                ...props.configuration,\n                socialSecurityNumberMode: props.configuration?.socialSecurityNumberMode ?? 'auto'\n            },\n            brandsConfiguration: props.brandsConfiguration || props.configuration?.brandsConfiguration || {},\n            icon: props.icon || props.configuration?.icon,\n            // installmentOptions of a session should be used before falling back to the merchant configuration\n            installmentOptions: props.session?.configuration?.installmentOptions || props.installmentOptions,\n            enableStoreDetails,\n            showStoreDetailsCheckbox,\n            /**\n             * Click to Pay configuration\n             * - If email is set explicitly in the configuration, then it can override the one used in the session creation\n             */\n            clickToPayConfiguration: {\n                ...props.clickToPayConfiguration,\n                disableOtpAutoFocus: props.clickToPayConfiguration?.disableOtpAutoFocus || false,\n                shopperEmail: props.clickToPayConfiguration?.shopperEmail || this.core.options?.session?.shopperEmail,\n                telephoneNumber: props.clickToPayConfiguration?.telephoneNumber || this.core.options?.session?.telephoneNumber,\n                locale: props.clickToPayConfiguration?.locale || props.i18n?.locale?.replace('-', '_')\n            },\n            ...(storedCardID && { storedPaymentMethodId: storedCardID })\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    formatData(): CardElementData {\n        /**\n         *  this.state.selectedBrandValue will be set when:\n         *  - /binLookup detects a single brand,\n         *  - when /binLookup detects a dual-branded card and the shopper makes a brand selection\n         *  - or, in the case of a storedCard\n         */\n        const cardBrand = this.state.selectedBrandValue;\n\n        return {\n            paymentMethod: {\n                type: CardElement.type,\n                ...this.state.data,\n                ...(this.props.storedPaymentMethodId && {\n                    storedPaymentMethodId: this.props.storedPaymentMethodId,\n                    holderName: this.props.holderName ?? ''\n                }),\n                ...(cardBrand && { brand: cardBrand }),\n                ...(this.props.fundingSource && { fundingSource: this.props.fundingSource }),\n                ...(this.state.fastlaneData && { fastlaneData: btoa(JSON.stringify(this.state.fastlaneData)) })\n            },\n            ...(this.state.billingAddress && { billingAddress: this.state.billingAddress }),\n            ...(this.state.socialSecurityNumber && { socialSecurityNumber: this.state.socialSecurityNumber }),\n            ...this.storePaymentMethodPayload,\n            ...(hasValidInstallmentsObject(this.state.installments) && { installments: this.state.installments }),\n            browserInfo: this.browserInfo,\n            origin: !!window && window.location.origin\n        };\n    }\n\n    updateStyles(stylesObj) {\n        if (this.componentRef?.updateStyles) this.componentRef.updateStyles(stylesObj);\n        return this;\n    }\n\n    setFocusOn(fieldName) {\n        if (this.componentRef?.setFocusOn) this.componentRef.setFocusOn(fieldName);\n        return this;\n    }\n\n    public onBrand = event => {\n        this.props.onBrand?.(event);\n    };\n\n    processBinLookupResponse(binLookupResponse: BinLookupResponse, isReset = false) {\n        if (this.componentRef?.processBinLookupResponse) this.componentRef.processBinLookupResponse(binLookupResponse, isReset);\n        return this;\n    }\n\n    handleUnsupportedCard(errObj) {\n        if (this.componentRef?.handleUnsupportedCard) this.componentRef.handleUnsupportedCard(errObj);\n        return this;\n    }\n\n    private handleClickToPaySubmit = (payload: ClickToPayCheckoutPayload) => {\n        this.setState({ data: { ...payload }, valid: {}, errors: {}, isValid: true });\n        this.submit();\n    };\n\n    onBinLookup(obj: CardBinLookupData) {\n        // Handler for regular card comp doesn't need this 'raw' data or to know about 'resets'\n        if (!obj.isReset) {\n            const nuObj = reject('supportedBrandsRaw').from(obj);\n            this.props.onBinLookup?.(nuObj);\n        }\n    }\n\n    protected submitAnalytics(analyticsObj: AnalyticsEvent) {\n        const isInfoType = analyticsObj instanceof AnalyticsInfoEvent;\n\n        if ((isInfoType && analyticsObj.type === ANALYTICS_RENDERED_STR) || (isInfoType && analyticsObj.type === ANALYTICS_CONFIGURED_STR)) {\n            // Check if it's a storedCard\n            if (this.constructor['type'] === 'scheme') {\n                if (hasOwnProperty(this.props, 'supportedShopperInteractions')) {\n                    analyticsObj.isStoredPaymentMethod = true;\n                    analyticsObj.brand = this.props.brand;\n                }\n            }\n\n            // Add config data\n            if (isInfoType && analyticsObj.type === ANALYTICS_RENDERED_STR) {\n                analyticsObj.configData = getCardConfigData(this.props);\n            }\n        }\n\n        super.submitAnalytics(analyticsObj);\n    }\n\n    private onConfigSuccess = (obj: CardConfigSuccessData) => {\n        const event = new AnalyticsInfoEvent({ type: ANALYTICS_CONFIGURED_STR });\n        this.submitAnalytics(event);\n\n        this.props.onConfigSuccess?.(obj);\n    };\n\n    private onFocus = (obj: ComponentFocusObject) => {\n        const event = new AnalyticsInfoEvent({ type: ANALYTICS_FOCUS_STR, target: fieldTypeToSnakeCase(obj.fieldType) });\n        this.submitAnalytics(event);\n\n        // Call merchant defined callback\n        if (ALL_SECURED_FIELDS.includes(obj.fieldType)) {\n            this.props.onFocus?.(obj.event as CardFocusData);\n        } else {\n            this.props.onFocus?.(obj);\n        }\n    };\n\n    private onBlur = (obj: ComponentFocusObject) => {\n        const event = new AnalyticsInfoEvent({ type: ANALYTICS_UNFOCUS_STR, target: fieldTypeToSnakeCase(obj.fieldType) });\n        this.submitAnalytics(event);\n\n        // Call merchant defined callback\n        if (ALL_SECURED_FIELDS.includes(obj.fieldType)) {\n            this.props.onBlur?.(obj.event as CardFocusData);\n        } else {\n            this.props.onBlur?.(obj);\n        }\n    };\n\n    public onBinValue = triggerBinLookUp(this);\n\n    get storePaymentMethodPayload() {\n        const isStoredCard = this.props.storedPaymentMethodId?.length > 0;\n        if (isStoredCard) {\n            return {};\n        }\n\n        /**\n         * For regular card, zero auth payments, we store the payment method, *if* the configuration says we should:\n         *  - For sessions, this means if the session has been created with storePaymentMethodMode: 'askForConsent'\n         *  - For the advanced flow, this means if the merchant has still set enableStoreDetails: true\n         *\n         * What we are doing is.. if for a normal payment we would show the \"Save for my next payment\" checkbox,\n         * for a zero-auth payment we effectively click the checkbox on behalf of the shopper.\n         */\n        const isZeroAuth = this.props.amount?.value === 0;\n        if (isZeroAuth) {\n            return this.props.enableStoreDetails ? { storePaymentMethod: true } : {};\n        }\n\n        // For regular card, non-zero auth payments, we store the payment method based on the checkbox value.\n        const includeStorePaymentMethod = this.props.showStoreDetailsCheckbox && typeof this.state.storePaymentMethod !== 'undefined';\n        return includeStorePaymentMethod ? { storePaymentMethod: Boolean(this.state.storePaymentMethod) } : {};\n    }\n\n    get isValid() {\n        return !!this.state.isValid;\n    }\n\n    get icon() {\n        return this.props.icon ?? this.resources.getImage()(this.props.brand);\n    }\n\n    get brands(): { icon: any; name: string }[] {\n        const { brands, brandsConfiguration } = this.props;\n        if (brands) {\n            return brands.map(brand => {\n                const brandIcon = brandsConfiguration[brand]?.icon ?? this.props.modules.resources.getImage()(brand);\n                return { icon: brandIcon, name: brand };\n            });\n        }\n\n        return [];\n    }\n\n    get displayName(): string {\n        if (this.props.storedPaymentMethodId) {\n            return `•••• ${this.props.lastFour}`;\n        }\n\n        return this.props.name || CardElement.type;\n    }\n\n    get accessibleName(): string {\n        // Use display name, unless it's a stored payment method, there inform user\n        return (\n            (this.props.name || CardElement.type) +\n            (this.props.storedPaymentMethodId\n                ? ' ' + this.props.i18n.get('creditCard.storedCard.description.ariaLabel').replace('%@', this.props.lastFour)\n                : '')\n        );\n    }\n\n    get browserInfo() {\n        return collectBrowserInfo();\n    }\n\n    protected override payButton = (props: PayButtonFunctionProps) => {\n        const isZeroAuth = this.props.amount?.value === 0;\n        const isStoredCard = this.props.storedPaymentMethodId?.length > 0;\n        return (\n            <PayButton\n                {...props}\n                amount={this.props.amount}\n                secondaryAmount={this.props.secondaryAmount}\n                label={isZeroAuth && !isStoredCard ? this.props.i18n.get('payButton.saveDetails') : ''}\n                onClick={this.submit}\n            />\n        );\n    };\n\n    private renderCardInput(isCardPrimaryInput = true): h.JSX.Element {\n        return (\n            <CardInput\n                setComponentRef={this.setComponentRef}\n                {...this.props}\n                {...this.state}\n                onSubmitAnalytics={this.submitAnalytics}\n                onChange={this.setState}\n                onSubmit={this.submit}\n                handleKeyPress={this.handleKeyPress}\n                payButton={this.payButton}\n                onBrand={this.onBrand}\n                onBinValue={this.onBinValue}\n                brand={this.props.brand}\n                brandsIcons={this.brands}\n                isPayButtonPrimaryVariant={isCardPrimaryInput}\n                resources={this.resources}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n                onConfigSuccess={this.onConfigSuccess}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                <SRPanelProvider srPanel={this.props.modules.srPanel}>\n                    <ClickToPayWrapper\n                        amount={this.props.amount}\n                        configuration={this.props.clickToPayConfiguration}\n                        clickToPayService={this.clickToPayService}\n                        isStandaloneComponent={false}\n                        setClickToPayRef={this.setClickToPayRef}\n                        onSetStatus={this.setElementStatus}\n                        onSubmit={this.handleClickToPaySubmit}\n                        onError={this.handleError}\n                    >\n                        {isCardPrimaryInput => this.renderCardInput(isCardPrimaryInput)}\n                    </ClickToPayWrapper>\n                </SRPanelProvider>\n            </CoreProvider>\n        );\n    }\n}\n\nexport default CardElement;\n"],"names":["CardElement","UIElement","setStatus","status","props","this","componentRef","clickToPayRef","formatProps","enableStoreDetails","session","configuration","showStoreDetailsCheckbox","amount","value","storedCardID","storedPaymentMethodId","id","isEcommerceStoredCard","supportedShopperInteractions","includes","AdyenCheckoutError","IMPLEMENTATION_ERROR","holderNameRequired","hasHolderName","hasCVC","brand","hideCVC","billingAddressRequired","billingAddressMode","onAddressLookup","CardInputDefaultProps","TxVariants","card","countryCode","toLowerCase","socialSecurityNumberMode","brandsConfiguration","icon","installmentOptions","clickToPayConfiguration","disableOtpAutoFocus","shopperEmail","core","options","telephoneNumber","locale","i18n","replace","formatData","cardBrand","state","selectedBrandValue","paymentMethod","type","data","holderName","fundingSource","fastlaneData","btoa","JSON","stringify","billingAddress","socialSecurityNumber","storePaymentMethodPayload","hasValidInstallmentsObject","installments","browserInfo","origin","window","location","updateStyles","stylesObj","setFocusOn","fieldName","processBinLookupResponse","binLookupResponse","isReset","handleUnsupportedCard","errObj","onBinLookup","obj","nuObj","reject","from","submitAnalytics","analyticsObj","isInfoType","AnalyticsInfoEvent","ANALYTICS_RENDERED_STR","ANALYTICS_CONFIGURED_STR","constructor","hasOwnProperty","isStoredPaymentMethod","configData","getCardConfigData","super","length","storePaymentMethod","Boolean","isValid","resources","getImage","brands","map","modules","name","displayName","lastFour","accessibleName","get","collectBrowserInfo","renderCardInput","isCardPrimaryInput","h","CardInput","setComponentRef","onSubmitAnalytics","onChange","setState","onSubmit","submit","handleKeyPress","payButton","onBrand","onBinValue","brandsIcons","isPayButtonPrimaryVariant","onFocus","onBlur","onConfigSuccess","render","CoreProvider","loadingContext","SRPanelProvider","srPanel","ClickToPayWrapper","clickToPayService","isStandaloneComponent","setClickToPayRef","onSetStatus","setElementStatus","handleClickToPaySubmit","onError","handleError","checkout","_define_property","ref","event","payload","valid","errors","ANALYTICS_FOCUS_STR","target","fieldTypeToSnakeCase","fieldType","ALL_SECURED_FIELDS","ANALYTICS_UNFOCUS_STR","triggerBinLookUp","isZeroAuth","isStoredCard","PayButton","secondaryAmount","label","onClick","_disableClickToPay","createClickToPayService","environment","initialize","scheme","defaultProps","showFormInstruction","doBinLookup"],"mappings":"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"}