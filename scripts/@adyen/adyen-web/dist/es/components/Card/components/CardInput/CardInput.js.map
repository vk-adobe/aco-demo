{"version":3,"file":"CardInput.js","sources":["../../../../../../src/components/Card/components/CardInput/CardInput.tsx"],"sourcesContent":["import { h, Fragment } from 'preact';\nimport { useState, useEffect, useRef, useMemo, useCallback } from 'preact/hooks';\nimport SecuredFieldsProvider from '../../../internal/SecuredFields/SFP/SecuredFieldsProvider';\nimport { OnChangeEventDetails, SFPState } from '../../../internal/SecuredFields/SFP/types';\nimport defaultProps from './defaultProps';\nimport './CardInput.scss';\nimport { AddressModeOptions, CardInputDataState, CardInputErrorState, CardInputProps, CardInputRef, CardInputValidState } from './types';\nimport { CVC_POLICY_REQUIRED, DATE_POLICY_REQUIRED, ENCRYPTED_CARD_NUMBER } from '../../../internal/SecuredFields/lib/constants';\nimport { BinLookupResponse } from '../../types';\nimport { cardInputFormatters, cardInputValidationRules, getRuleByNameAndMode } from './validate';\nimport CIExtensions from '../../../internal/SecuredFields/binLookup/extensions';\nimport useForm from '../../../../utils/useForm';\nimport { SortedErrorObject } from '../../../../core/Errors/types';\nimport { handlePartialAddressMode, extractPropsForCardFields, extractPropsForSFP, getLayout } from './utils';\nimport Specifications from '../../../internal/Address/Specifications';\nimport { StoredCardFieldsWrapper } from './components/StoredCardFieldsWrapper';\nimport { CardFieldsWrapper } from './components/CardFieldsWrapper';\nimport { getAddressHandler, getAutoJumpHandler, getFocusHandler } from './handlers';\nimport { InstallmentsObj } from './components/Installments/Installments';\nimport { TouchStartEventObj } from './components/types';\nimport classNames from 'classnames';\nimport { getPartialAddressValidationRules } from '../../../internal/Address/validate';\nimport useImage from '../../../../core/Context/useImage';\nimport { getArrayDifferences } from '../../../../utils/arrayUtils';\nimport FormInstruction from '../../../internal/FormInstruction';\nimport { AddressData } from '../../../../types/global-types';\nimport { CardBrandData, CardFocusData } from '../../../internal/SecuredFields/lib/types';\nimport { PREFIX } from '../../../internal/Icon/constants';\nimport useSRPanelForCardInputErrors from './useSRPanelForCardInputErrors';\nimport FastlaneSignup from '../Fastlane/FastlaneSignup';\nimport { ANALYTICS_VALIDATION_ERROR_STR, ANALYTICS_DISPLAYED_STR, ANALYTICS_SELECTED_STR } from '../../../../core/Analytics/constants';\nimport { fieldTypeToSnakeCase } from '../../../internal/SecuredFields/utils';\nimport { getErrorMessageFromCode } from '../../../../core/Errors/utils';\nimport { SF_ErrorCodes } from '../../../../core/Errors/constants';\nimport { usePrevious } from '../../../../utils/hookUtils';\nimport { AnalyticsInfoEvent } from '../../../../core/Analytics/AnalyticsInfoEvent';\n\nconst DUAL_BRAND_BUTTON = 'dual_brand_button';\n\nconst CardInput = (props: CardInputProps) => {\n    const sfp = useRef(null);\n    const isValidating = useRef(false);\n    const getImage = useImage();\n\n    const billingAddressRef = useRef(null);\n    const setAddressRef = ref => {\n        billingAddressRef.current = ref;\n    };\n\n    const cardInputRef = useRef<CardInputRef>({});\n    // Just call once to create the object by which we expose the members expected by the parent Card comp\n    if (!Object.keys(cardInputRef.current).length) {\n        props.setComponentRef(cardInputRef.current);\n    }\n\n    const hasPanLengthRef = useRef(0);\n    const isAutoJumping = useRef(false);\n\n    const specifications = useMemo(() => new Specifications(props.specifications), [props.specifications]);\n\n    // Store ref to sfp (useful for 'deep' debugging)\n    cardInputRef.current.sfp = sfp;\n\n    /**\n     * STATE HOOKS\n     */\n    const [status, setStatus] = useState('ready');\n\n    const [errors, setErrors] = useState<CardInputErrorState>({});\n    const [valid, setValid] = useState<CardInputValidState>({\n        ...(props.holderNameRequired && { holderName: false })\n    });\n    const [data, setData] = useState<CardInputDataState>({\n        ...(props.hasHolderName && { holderName: props.data.holderName ?? '' })\n    });\n\n    const [focusedElement, setFocusedElement] = useState('');\n    const [isSfpValid, setIsSfpValid] = useState(false);\n    const [expiryDatePolicy, setExpiryDatePolicy] = useState(DATE_POLICY_REQUIRED);\n    const [cvcPolicy, setCvcPolicy] = useState(CVC_POLICY_REQUIRED);\n    const [issuingCountryCode, setIssuingCountryCode] = useState<string>(null);\n\n    const [dualBrandSelectElements, setDualBrandSelectElements] = useState([]);\n    const [selectedBrandValue, setSelectedBrandValue] = useState(props.storedPaymentMethodId ? props.brand : ''); // If this is a storedCard comp initialise state with the storedCard's brand\n\n    const showBillingAddress = props.billingAddressMode !== AddressModeOptions.none && props.billingAddressRequired;\n\n    const partialAddressSchema = handlePartialAddressMode(props.billingAddressMode);\n    // Keeps the value of the country set initially by the merchant, before the Address Component mutates it\n    const partialAddressCountry = useRef<string>(partialAddressSchema && props.data?.billingAddress?.country);\n\n    const [storePaymentMethod, setStorePaymentMethod] = useState(false);\n    const [billingAddress, setBillingAddress] = useState<AddressData>(showBillingAddress ? props.data.billingAddress : null);\n    const [showSocialSecurityNumber, setShowSocialSecurityNumber] = useState(false);\n    const [socialSecurityNumber, setSocialSecurityNumber] = useState('');\n    const [installments, setInstallments] = useState<InstallmentsObj>({ value: null });\n\n    // re. Disable arrows for iOS: The name of the element calling for other elements to be disabled\n    // - either a securedField type (like 'encryptedCardNumber') when call is coming from SF\n    // or else the name of an internal, Adyen-web, element (like 'holderName')\n    const [iOSFocusedField, setIOSFocusedField] = useState(null);\n\n    /**\n     * This stores the brand as detected by the internal regEx.\n     * It eventually gets overwritten by the brand as detected by the /binLookup, but will revert back to the regEx detection\n     * if the PAN length drops below the /binLookup digit threshold.\n     * Default value, 'card', indicates no brand detected\n     */\n    const [internallyDetectedBrand, setInternallyDetectedBrand] = useState('card');\n\n    /**\n     * Used tho show and hide the pay button and instructions text\n     * Should mimic the same logic as CardInput loading wrapper\n     */\n    const [showCardUIElements, setShowCardUIElements] = useState(false);\n\n    /**\n     * LOCAL VARS\n     */\n    const {\n        handleChangeFor,\n        triggerValidation,\n        data: formData,\n        valid: formValid,\n        errors: formErrors,\n        setSchema,\n        setData: setFormData,\n        setValid: setFormValid,\n        setErrors: setFormErrors\n    } = useForm<CardInputDataState>({\n        schema: [],\n        defaultData: props.data,\n        formatters: cardInputFormatters,\n        rules: cardInputValidationRules\n    });\n\n    const hasInstallments = !!Object.keys(props.installmentOptions).length && props.fundingSource !== 'debit';\n    const showAmountsInInstallments = props.showInstallmentAmounts ?? true;\n\n    const cardCountryCode: string = issuingCountryCode ?? props.countryCode;\n    const isKorea = cardCountryCode === 'kr'; // If issuingCountryCode or the merchant defined countryCode is set to 'kr'\n    const showKCP = props.configuration.koreanAuthenticationRequired && isKorea;\n\n    const showBrazilianSSN: boolean =\n        (showSocialSecurityNumber && props.configuration.socialSecurityNumberMode === 'auto') ||\n        props.configuration.socialSecurityNumberMode === 'show';\n\n    /**\n     * HANDLERS\n     */\n    // Handlers for focus & blur on all fields. Can be renamed to onFieldFocus once the onFocusField is renamed in Field.tsx\n    const onFieldFocusAnalytics = (who: string, e: Event | CardFocusData) => {\n        props.onFocus({ fieldType: who, event: e });\n    };\n    const onFieldBlurAnalytics = (who: string, e: Event | CardFocusData) => {\n        props.onBlur({ fieldType: who, event: e });\n    };\n\n    const onBrand = useCallback((obj: CardBrandData) => {\n        setInternallyDetectedBrand(obj.brand);\n        props.onBrand(obj);\n    }, []);\n\n    // Make SecuredFields aware of the focus & blur handlers\n    const handleFocus = getFocusHandler(setFocusedElement, onFieldFocusAnalytics, onFieldBlurAnalytics);\n\n    const retrieveLayout = (): string[] => {\n        return getLayout({\n            props,\n            showKCP,\n            showBrazilianSSN,\n            ...(props.billingAddressRequired && {\n                countrySpecificSchemas: specifications.getAddressSchemaForCountry(billingAddress?.country),\n                billingAddressRequiredFields: props.billingAddressRequiredFields\n            })\n        });\n    };\n\n    /**\n     * re. Disabling arrow keys in iOS:\n     * Only by disabling all fields in the Card PM except for the active securedField input can we force the iOS soft keyboard arrow keys to disable\n     *\n     * NOTE: only called if ua.__IS_IOS = true && this.config.disableIOSArrowKeys = true (as referenced in CSF)\n     *\n     * @param obj - has fieldType prop saying whether this function is being called in response to an securedFields click ('encryptedCardNumber' etc)\n     * - in which case we should disable all non-SF fields\n     * or,\n     * due to an internal action ('webInternalElement') - in which case we can enable all non-SF fields\n     */\n    const handleTouchstartIOS = useCallback((obj: TouchStartEventObj) => {\n        const elementType = obj.fieldType !== 'webInternalElement' ? obj.fieldType : obj.name;\n        setIOSFocusedField(elementType);\n    }, []);\n\n    const handleAddress = getAddressHandler(setFormData, setFormValid, setFormErrors);\n\n    const doPanAutoJump = getAutoJumpHandler(isAutoJumping, sfp, retrieveLayout());\n\n    const handleSecuredFieldsChange = (sfState: SFPState, eventDetails?: OnChangeEventDetails): void => {\n        /**\n         * Handling auto complete value for holderName (but only if the component is using a holderName field)\n         */\n        if (sfState.autoCompleteName) {\n            if (!props.hasHolderName) return;\n            const holderNameValidationFn = getRuleByNameAndMode('holderName', 'blur');\n            const acHolderName = holderNameValidationFn(sfState.autoCompleteName) ? sfState.autoCompleteName : null;\n            if (acHolderName) {\n                setFormData('holderName', acHolderName);\n                setFormValid('holderName', true); // only if holderName is valid does this fny get called - so we know it's valid and w/o error\n                setFormErrors('holderName', null);\n            }\n            return;\n        }\n\n        /**\n         * Decide if we can shift focus to the expiryDate field.\n         *\n         * We can if... the config prop, autoFocus, is true AND we have a panLength value from binLookup\n         * AND we are responding to a handleOnFieldValid message about the PAN that says it is valid\n         */\n        if (\n            props.autoFocus &&\n            hasPanLengthRef.current > 0 &&\n            eventDetails?.event === 'handleOnFieldValid' &&\n            eventDetails?.fieldType === ENCRYPTED_CARD_NUMBER &&\n            sfState.valid.encryptedCardNumber\n        ) {\n            doPanAutoJump();\n        }\n\n        /**\n         * Process SFP state\n         */\n        setData({ ...data, ...sfState.data });\n        setErrors({ ...errors, ...sfState.errors });\n        setValid({ ...valid, ...sfState.valid });\n\n        setIsSfpValid(sfState.isSfpValid);\n\n        // Values relating to /binLookup response\n        setCvcPolicy(sfState.cvcPolicy);\n        setShowSocialSecurityNumber(sfState.showSocialSecurityNumber);\n        setExpiryDatePolicy(sfState.expiryDatePolicy);\n    };\n\n    /**\n     * Listen to the full SecureFieldsProvider state and handle actions\n     * Used right now to mimic the loading status changes, this can only be done this way\n     * Trying to do it via onConfiguSuccess or onChange has side effects\n     */\n    const handleSFPStateUpdate = useCallback(\n        sfpState => {\n            mimicLoadingStatusChange(sfpState);\n        },\n        [showCardUIElements, setShowCardUIElements]\n    );\n\n    /**\n     * This function implements the same logic that LoadingProvider uses to show and hide elements\n     * We want to mimic this behavior so we can hide and show the pay button or the instructions text\n     * Deciding to do it this way since we garante there's no DOM changes to merchants\n     * We can break this in the next major version (v7)\n     */\n    const mimicLoadingStatusChange = sfpState => {\n        if (!sfpState.status) return;\n        if (sfpState.status == 'loading') {\n            setShowCardUIElements(false);\n        } else {\n            setShowCardUIElements(true);\n        }\n    };\n\n    // Farm the handlers for binLookup related functionality out to another 'extensions' file\n    const extensions = useMemo(\n        () =>\n            CIExtensions(\n                props,\n                { sfp },\n                {\n                    dualBrandSelectElements,\n                    setDualBrandSelectElements,\n                    setSelectedBrandValue,\n                    issuingCountryCode,\n                    setIssuingCountryCode\n                },\n                hasPanLengthRef\n            ),\n        [dualBrandSelectElements, issuingCountryCode]\n    );\n\n    /**\n     * EXPOSE METHODS expected by Card.tsx\n     */\n    cardInputRef.current.showValidation = () => {\n        // set flag\n        isValidating.current = true;\n\n        /**\n         * Clear errors prior to validating so that the screenreader will read them *all* again, and in the right order\n         * - only using aria-atomic on the error panel will read them in the wrong order\n         */\n        clearSRPanel?.(); // TODO - recheck if this is still true\n\n        // Validate SecuredFields\n        sfp.current.showValidation();\n\n        // Validate holderName & SSN & KCP (taxNumber) but *not* billingAddress\n        triggerValidation(['holderName', 'socialSecurityNumber', 'taxNumber']);\n\n        // Validate Address\n        if (billingAddressRef?.current) billingAddressRef.current.showValidation();\n    };\n\n    cardInputRef.current.processBinLookupResponse = (binLookupResponse: BinLookupResponse, isReset: boolean) => {\n        extensions.processBinLookup(binLookupResponse, isReset);\n    };\n\n    cardInputRef.current.setStatus = setStatus;\n\n    /**\n     * EFFECT HOOKS\n     */\n    useEffect(() => {\n        // componentDidMount - expose more methods expected by Card.tsx\n        cardInputRef.current.setFocusOn = sfp.current.setFocusOn;\n        cardInputRef.current.updateStyles = sfp.current.updateStyles;\n        cardInputRef.current.handleUnsupportedCard = sfp.current.handleUnsupportedCard;\n\n        // componentWillUnmount\n        return () => {\n            sfp.current.destroy();\n        };\n    }, []);\n\n    /**\n     * Handle form schema updates\n     */\n    useEffect(() => {\n        const newSchema = [\n            ...(props.hasHolderName ? ['holderName'] : []),\n            ...(showBrazilianSSN ? ['socialSecurityNumber'] : []),\n            ...(showKCP ? ['taxNumber'] : []),\n            ...(showBillingAddress ? ['billingAddress'] : [])\n        ];\n        setSchema(newSchema);\n    }, [props.hasHolderName, showBrazilianSSN, showKCP]);\n\n    /**\n     * Handle updates from useForm\n     */\n    useEffect(() => {\n        setData({ ...data, holderName: formData.holderName ?? '', taxNumber: formData.taxNumber });\n\n        setSocialSecurityNumber(formData.socialSecurityNumber);\n\n        if (showBillingAddress) setBillingAddress({ ...formData.billingAddress });\n\n        setValid({\n            ...valid,\n            holderName: props.holderNameRequired ? formValid.holderName : true,\n            // Setting value to false if it's falsy keeps in line with existing, expected behaviour\n            // - but there is an argument to allow 'undefined' as a value to indicate the non-presence of the field\n            socialSecurityNumber: formValid.socialSecurityNumber ? formValid.socialSecurityNumber : false,\n            taxNumber: formValid.taxNumber ? formValid.taxNumber : false,\n            billingAddress: formValid.billingAddress ? formValid.billingAddress : false\n        });\n\n        // Check if billingAddress errors object has any properties that aren't null or undefined\n        const addressHasErrors = formErrors.billingAddress\n            ? Object.entries(formErrors.billingAddress).reduce((acc, [, error]) => acc || error != null, false)\n            : false;\n\n        // Errors\n        setErrors({\n            ...errors,\n            holderName: props.holderNameRequired && !!formErrors.holderName ? formErrors.holderName : null,\n            socialSecurityNumber: showBrazilianSSN && !!formErrors.socialSecurityNumber ? formErrors.socialSecurityNumber : null,\n            taxNumber: showKCP && !!formErrors.taxNumber ? formErrors.taxNumber : null,\n            billingAddress: showBillingAddress && addressHasErrors ? formErrors.billingAddress : null\n        });\n    }, [formData, formValid, formErrors]);\n\n    // Use the custom hook to set (or clear) errors in the SRPanel\n    const {\n        sortedErrorList: currentErrorsSortedByLayout,\n        previousSortedErrors,\n        clearSRPanel\n    } = useSRPanelForCardInputErrors({\n        errors,\n        props,\n        isValidating,\n        retrieveLayout,\n        specifications,\n        billingAddress,\n        sfp\n    });\n\n    // Analytics: ValidationErrors\n    useEffect(() => {\n        if (currentErrorsSortedByLayout) {\n            const newErrors = getArrayDifferences<SortedErrorObject, string>(currentErrorsSortedByLayout, previousSortedErrors, 'field');\n\n            newErrors?.forEach(errorItem => {\n                const event = new AnalyticsInfoEvent({\n                    type: ANALYTICS_VALIDATION_ERROR_STR,\n                    target: fieldTypeToSnakeCase(errorItem.field),\n                    validationErrorCode: errorItem.errorCode,\n                    validationErrorMessage: getErrorMessageFromCode(errorItem.errorCode, SF_ErrorCodes)\n                });\n                props.onSubmitAnalytics(event);\n            });\n        }\n    }, [currentErrorsSortedByLayout]);\n\n    /**\n     * Main 'componentDidUpdate' handler\n     */\n    useEffect(() => {\n        const holderNameValid: boolean = valid.holderName;\n\n        const sfpValid: boolean = isSfpValid;\n        const addressValid: boolean = showBillingAddress ? valid.billingAddress : true;\n\n        const koreanAuthentication: boolean = showKCP ? !!valid.taxNumber && !!valid.encryptedPassword : true;\n\n        const socialSecurityNumberValid: boolean = showBrazilianSSN ? !!valid.socialSecurityNumber : true;\n\n        const isValid: boolean = sfpValid && holderNameValid && addressValid && koreanAuthentication && socialSecurityNumberValid;\n\n        const sfStateErrorsObj = sfp.current.mapErrorsToValidationRuleResult();\n        const mergedErrors = { ...errors, ...sfStateErrorsObj }; // maps sfErrors AND solves race condition problems for sfp from showValidation\n\n        props.onChange({\n            data,\n            valid,\n            errors: mergedErrors,\n            isValid,\n            billingAddress,\n            selectedBrandValue,\n            storePaymentMethod,\n            socialSecurityNumber,\n            installments\n        });\n    }, [data, valid, errors, selectedBrandValue, storePaymentMethod, installments]);\n\n    /**\n     * \"Update\" handler related to dual brand buttons being initially displayed\n     */\n    useEffect(() => {\n        if (dualBrandSelectElements.length > 0 && dualBrandSelectElements) {\n            const dualBrandsArr = dualBrandSelectElements.map(item => item.id);\n            const brand = dualBrandsArr[0]; // initially selected brand\n            const dualBrands = dualBrandsArr.toString();\n\n            const event = new AnalyticsInfoEvent({\n                type: ANALYTICS_DISPLAYED_STR,\n                target: DUAL_BRAND_BUTTON,\n                brand,\n                configData: { dualBrands }\n            });\n\n            props.onSubmitAnalytics(event);\n        }\n    }, [dualBrandSelectElements]);\n\n    const previousSelectedBrandValue = usePrevious(selectedBrandValue);\n\n    /**\n     * \"Update\" handler related to a dual brand button being selected\n     */\n    useEffect(() => {\n        if (previousSelectedBrandValue?.length && selectedBrandValue?.length) {\n            const event = new AnalyticsInfoEvent({ type: ANALYTICS_SELECTED_STR, target: DUAL_BRAND_BUTTON, brand: selectedBrandValue });\n\n            props.onSubmitAnalytics(event);\n        }\n    }, [selectedBrandValue]);\n\n    /**\n     * RENDER\n     */\n    const FieldToRender = props.storedPaymentMethodId ? StoredCardFieldsWrapper : CardFieldsWrapper;\n\n    return (\n        <Fragment>\n            <SecuredFieldsProvider\n                ref={sfp}\n                {...extractPropsForSFP(props)}\n                styles={{ ...props.styles }}\n                koreanAuthenticationRequired={props.configuration.koreanAuthenticationRequired}\n                hasKoreanFields={!!(props.configuration.koreanAuthenticationRequired && props.countryCode === 'kr')}\n                onChange={handleSecuredFieldsChange}\n                onBrand={onBrand}\n                onFocus={handleFocus}\n                onStateUpdate={handleSFPStateUpdate}\n                type={props.brand}\n                disableIOSArrowKeys={props.disableIOSArrowKeys ? handleTouchstartIOS : null}\n                render={({ setRootNode, setFocusOn }, sfpState) => (\n                    <div\n                        ref={setRootNode}\n                        className={classNames({\n                            'adyen-checkout__card-input': true,\n                            'adyen-checkout-card-input__wrapper': true,\n                            [`adyen-checkout__card-input--${props.fundingSource ?? 'credit'}`]: true,\n                            'adyen-checkout__card-input--loading': status === 'loading'\n                        })}\n                        role={'form'}\n                    >\n                        {showCardUIElements && <FormInstruction />}\n\n                        <FieldToRender\n                            // Extract exact props that we need to pass down\n                            {...extractPropsForCardFields(props)}\n                            // Pass on vars created in CardInput:\n                            // Base (shared w. StoredCard)\n                            data={data}\n                            valid={valid}\n                            errors={errors}\n                            handleChangeFor={handleChangeFor}\n                            focusedElement={focusedElement}\n                            setFocusOn={setFocusOn}\n                            sfpState={sfpState}\n                            cvcPolicy={cvcPolicy}\n                            hasInstallments={hasInstallments}\n                            showAmountsInInstallments={showAmountsInInstallments}\n                            handleInstallments={setInstallments}\n                            // For Card\n                            brandsIcons={props.brandsIcons}\n                            formData={formData}\n                            formErrors={formErrors}\n                            formValid={formValid}\n                            expiryDatePolicy={expiryDatePolicy}\n                            dualBrandSelectElements={dualBrandSelectElements}\n                            extensions={extensions}\n                            selectedBrandValue={selectedBrandValue}\n                            // For KCP\n                            showKCP={showKCP}\n                            // For SSN\n                            showBrazilianSSN={showBrazilianSSN}\n                            socialSecurityNumber={socialSecurityNumber}\n                            // For Store details\n                            handleOnStoreDetails={setStorePaymentMethod}\n                            // For Address\n                            setAddressRef={setAddressRef}\n                            billingAddress={billingAddress}\n                            billingAddressValidationRules={partialAddressSchema && getPartialAddressValidationRules(partialAddressCountry.current)}\n                            partialAddressSchema={partialAddressSchema}\n                            handleAddress={handleAddress}\n                            onAddressLookup={props.onAddressLookup}\n                            onAddressSelected={props.onAddressSelected}\n                            addressSearchDebounceMs={props.addressSearchDebounceMs}\n                            //\n                            iOSFocusedField={iOSFocusedField}\n                            //\n                            onFieldFocusAnalytics={onFieldFocusAnalytics}\n                            onFieldBlurAnalytics={onFieldBlurAnalytics}\n                        />\n                    </div>\n                )}\n            />\n\n            {props.fastlaneConfiguration && (\n                <FastlaneSignup\n                    {...props.fastlaneConfiguration}\n                    currentDetectedBrand={internallyDetectedBrand}\n                    onChange={props.onChange}\n                    onSubmitAnalytics={props.onSubmitAnalytics}\n                />\n            )}\n\n            {showCardUIElements &&\n                props.showPayButton &&\n                props.payButton({\n                    status,\n                    variant: props.isPayButtonPrimaryVariant ? 'primary' : 'secondary',\n                    icon: getImage({ imageFolder: 'components/' })(`${PREFIX}lock`)\n                })}\n        </Fragment>\n    );\n};\n\nCardInput.defaultProps = defaultProps;\n\nexport default CardInput;\n"],"names":["DUAL_BRAND_BUTTON","CardInput","props","sfp","useRef","isValidating","getImage","useImage","billingAddressRef","setAddressRef","ref","current","cardInputRef","Object","keys","length","setComponentRef","hasPanLengthRef","isAutoJumping","specifications","useMemo","Specifications","status","setStatus","useState","errors","setErrors","valid","setValid","holderNameRequired","holderName","data","setData","hasHolderName","focusedElement","setFocusedElement","isSfpValid","setIsSfpValid","expiryDatePolicy","setExpiryDatePolicy","DATE_POLICY_REQUIRED","cvcPolicy","setCvcPolicy","CVC_POLICY_REQUIRED","issuingCountryCode","setIssuingCountryCode","dualBrandSelectElements","setDualBrandSelectElements","selectedBrandValue","setSelectedBrandValue","storedPaymentMethodId","brand","showBillingAddress","billingAddressMode","AddressModeOptions","none","billingAddressRequired","partialAddressSchema","handlePartialAddressMode","partialAddressCountry","billingAddress","country","storePaymentMethod","setStorePaymentMethod","setBillingAddress","showSocialSecurityNumber","setShowSocialSecurityNumber","socialSecurityNumber","setSocialSecurityNumber","installments","setInstallments","value","iOSFocusedField","setIOSFocusedField","internallyDetectedBrand","setInternallyDetectedBrand","showCardUIElements","setShowCardUIElements","handleChangeFor","triggerValidation","formData","formValid","formErrors","setSchema","setFormData","setFormValid","setFormErrors","useForm","schema","defaultData","formatters","cardInputFormatters","rules","cardInputValidationRules","hasInstallments","installmentOptions","fundingSource","showAmountsInInstallments","showInstallmentAmounts","isKorea","countryCode","showKCP","configuration","koreanAuthenticationRequired","showBrazilianSSN","socialSecurityNumberMode","onFieldFocusAnalytics","who","e","onFocus","fieldType","event","onFieldBlurAnalytics","onBlur","onBrand","useCallback","obj","handleFocus","getFocusHandler","retrieveLayout","getLayout","countrySpecificSchemas","getAddressSchemaForCountry","billingAddressRequiredFields","handleTouchstartIOS","elementType","name","handleAddress","getAddressHandler","doPanAutoJump","getAutoJumpHandler","handleSFPStateUpdate","sfpState","mimicLoadingStatusChange","extensions","CIExtensions","showValidation","clearSRPanel","processBinLookupResponse","binLookupResponse","isReset","processBinLookup","useEffect","setFocusOn","updateStyles","handleUnsupportedCard","destroy","newSchema","taxNumber","addressHasErrors","entries","reduce","acc","error","sortedErrorList","currentErrorsSortedByLayout","previousSortedErrors","useSRPanelForCardInputErrors","newErrors","getArrayDifferences","forEach","errorItem","AnalyticsInfoEvent","type","ANALYTICS_VALIDATION_ERROR_STR","target","fieldTypeToSnakeCase","field","validationErrorCode","errorCode","validationErrorMessage","getErrorMessageFromCode","SF_ErrorCodes","onSubmitAnalytics","holderNameValid","sfpValid","addressValid","koreanAuthentication","encryptedPassword","socialSecurityNumberValid","isValid","sfStateErrorsObj","mapErrorsToValidationRuleResult","mergedErrors","onChange","dualBrandsArr","map","item","id","dualBrands","toString","ANALYTICS_DISPLAYED_STR","configData","previousSelectedBrandValue","usePrevious","ANALYTICS_SELECTED_STR","FieldToRender","StoredCardFieldsWrapper","CardFieldsWrapper","h","Fragment","SecuredFieldsProvider","extractPropsForSFP","styles","hasKoreanFields","sfState","eventDetails","autoCompleteName","acHolderName","getRuleByNameAndMode","holderNameValidationFn","autoFocus","ENCRYPTED_CARD_NUMBER","encryptedCardNumber","onStateUpdate","disableIOSArrowKeys","render","setRootNode","div","className","classNames","role","FormInstruction","extractPropsForCardFields","handleInstallments","brandsIcons","handleOnStoreDetails","billingAddressValidationRules","getPartialAddressValidationRules","onAddressLookup","onAddressSelected","addressSearchDebounceMs","fastlaneConfiguration","FastlaneSignup","currentDetectedBrand","showPayButton","payButton","variant","isPayButtonPrimaryVariant","icon","imageFolder","PREFIX","defaultProps"],"mappings":"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"}