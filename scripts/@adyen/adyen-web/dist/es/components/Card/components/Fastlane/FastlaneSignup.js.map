{"version":3,"file":"FastlaneSignup.js","sources":["../../../../../../src/components/Card/components/Fastlane/FastlaneSignup.tsx"],"sourcesContent":["import { Fragment, h } from 'preact';\nimport { useCallback, useEffect, useMemo, useState } from 'preact/hooks';\nimport cx from 'classnames';\nimport Toggle from '../../../internal/Toggle';\nimport Img from '../../../internal/Img';\nimport useImage from '../../../../core/Context/useImage';\nimport USOnlyPhoneInput from './USOnlyPhoneInput';\nimport { InfoButton } from './InfoButton';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport { LabelOnlyDisclaimerMessage } from '../../../internal/DisclaimerMessage/DisclaimerMessage';\nimport { isConfigurationValid } from './utils/validate-configuration';\nimport mobileNumberFormatter from './utils/mobile-number-formatter';\nimport { InfoEventTypes } from '../../../../core/Analytics/constants';\nimport type { FastlaneSignupConfiguration } from '../../../PayPalFastlane/types';\n\nimport './FastlaneSignup.scss';\nimport { AnalyticsInfoEvent } from '../../../../core/Analytics/AnalyticsInfoEvent';\nimport { AnalyticsEvent } from '../../../../core/Analytics/AnalyticsEvent';\n\ntype FastlaneSignupProps = FastlaneSignupConfiguration & {\n    currentDetectedBrand: string;\n    onChange(state: any): void;\n    onSubmitAnalytics(event: AnalyticsEvent): void;\n};\n\nconst SUPPORTED_BRANDS = ['mc', 'visa'];\n\nconst FastlaneSignup = ({\n    showConsent,\n    defaultToggleState,\n    termsAndConditionsLink,\n    privacyPolicyLink,\n    termsAndConditionsVersion,\n    fastlaneSessionId,\n    currentDetectedBrand,\n    telephoneNumber: telephoneNumberFromProps,\n    onChange,\n    onSubmitAnalytics\n}: FastlaneSignupProps) => {\n    const shouldDisplaySignup = useMemo(() => showConsent && SUPPORTED_BRANDS.includes(currentDetectedBrand), [showConsent, currentDetectedBrand]);\n    const [hasConsentFormBeenShown, setHasConsentFormBeenShown] = useState<boolean>(shouldDisplaySignup);\n    const [isChecked, setIsChecked] = useState<boolean>(defaultToggleState);\n    const getImage = useImage();\n    const [telephoneNumber, setTelephoneNumber] = useState<string>('');\n    const { i18n } = useCoreContext();\n    const isFastlaneConfigurationValid = useMemo(() => {\n        return isConfigurationValid({\n            showConsent,\n            defaultToggleState,\n            termsAndConditionsLink,\n            privacyPolicyLink,\n            termsAndConditionsVersion,\n            fastlaneSessionId\n        });\n    }, [showConsent, defaultToggleState, termsAndConditionsLink, privacyPolicyLink, termsAndConditionsVersion, fastlaneSessionId]);\n\n    const handleToggleChange = useCallback(() => {\n        const newValue = !isChecked;\n        setIsChecked(newValue);\n\n        const event = new AnalyticsInfoEvent({\n            type: InfoEventTypes.clicked,\n            target: 'fastlane_signup_consent_toggle',\n            configData: {\n                isToggleOn: newValue\n            }\n        });\n        onSubmitAnalytics(event);\n    }, [isChecked, onSubmitAnalytics]);\n\n    /**\n     * If the configuration is valid, the Component propagates fastlaneData to the Card component state\n     *\n     * 'telephoneNumber' is optional since the shopper can check out without passing it\n     * 'termsAndConditionsVersion' is optional since the signup flow may not be available for the shopper, although we still add fastlaneData to the /payments request for analytics purposes\n     */\n    useEffect(() => {\n        if (!isFastlaneConfigurationValid) {\n            return;\n        }\n\n        onChange({\n            fastlaneData: {\n                consentShown: hasConsentFormBeenShown,\n                fastlaneSessionId: fastlaneSessionId,\n                consentGiven: shouldDisplaySignup ? isChecked : false,\n                ...(termsAndConditionsVersion && { consentVersion: termsAndConditionsVersion }),\n                ...(telephoneNumber && { telephoneNumber })\n            }\n        });\n    }, [\n        shouldDisplaySignup,\n        hasConsentFormBeenShown,\n        termsAndConditionsVersion,\n        isChecked,\n        fastlaneSessionId,\n        telephoneNumber,\n        onChange,\n        isFastlaneConfigurationValid\n    ]);\n\n    /**\n     * If the sign-up has been displayed at least once, we set hasConsentFormBeenShown: true\n     */\n    useEffect(() => {\n        if (shouldDisplaySignup) {\n            setHasConsentFormBeenShown(true);\n        }\n    }, [shouldDisplaySignup]);\n\n    useEffect(() => {\n        if (!isFastlaneConfigurationValid) {\n            return;\n        }\n\n        const event = new AnalyticsInfoEvent({\n            type: InfoEventTypes.rendered,\n            configData: {\n                isFastlaneSignupRendered: shouldDisplaySignup\n            }\n        });\n\n        onSubmitAnalytics(event);\n    }, [shouldDisplaySignup, isFastlaneConfigurationValid, onSubmitAnalytics]);\n\n    if (!shouldDisplaySignup || !isFastlaneConfigurationValid) {\n        return null;\n    }\n\n    return (\n        <div className=\"adyen-checkout-card__fastlane\" data-testid=\"fastlane-signup-component\">\n            <div\n                className={cx('adyen-checkout-card__fastlane-consent-toggle', {\n                    'adyen-checkout-card__fastlane-consent-toggle--active': isChecked\n                })}\n            >\n                <Toggle\n                    checked={isChecked}\n                    onChange={handleToggleChange}\n                    ariaLabel={i18n.get('card.fastlane.consentToggle')}\n                    label={<span>{i18n.get('card.fastlane.consentToggle')}</span>}\n                />\n                <InfoButton />\n            </div>\n\n            {isChecked && (\n                <Fragment>\n                    <USOnlyPhoneInput initialValue={mobileNumberFormatter(telephoneNumberFromProps)} onChange={setTelephoneNumber} />\n                    <div className=\"adyen-checkout-card__fastlane-consent-text\">\n                        <LabelOnlyDisclaimerMessage\n                            message={i18n.get('card.fastlane.consentText')}\n                            urls={[termsAndConditionsLink, privacyPolicyLink]}\n                        />\n                    </div>\n                    <Img\n                        className=\"adyen-checkout-card__fastlane-brand\"\n                        src={getImage({ imageFolder: 'components/' })(`paypal_fastlane_black`)}\n                        alt={i18n.get('card.fastlane.a11y.logo')}\n                    />\n                </Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default FastlaneSignup;\n"],"names":["SUPPORTED_BRANDS","FastlaneSignup","showConsent","defaultToggleState","termsAndConditionsLink","privacyPolicyLink","termsAndConditionsVersion","fastlaneSessionId","currentDetectedBrand","telephoneNumber","telephoneNumberFromProps","onChange","onSubmitAnalytics","shouldDisplaySignup","useMemo","includes","hasConsentFormBeenShown","setHasConsentFormBeenShown","useState","isChecked","setIsChecked","getImage","useImage","setTelephoneNumber","i18n","useCoreContext","isFastlaneConfigurationValid","isConfigurationValid","handleToggleChange","useCallback","newValue","event","AnalyticsInfoEvent","type","InfoEventTypes","clicked","target","configData","isToggleOn","useEffect","fastlaneData","consentShown","consentGiven","consentVersion","rendered","isFastlaneSignupRendered","h","div","className","data-testid","cx","Toggle","checked","ariaLabel","get","label","span","InfoButton","Fragment","USOnlyPhoneInput","initialValue","mobileNumberFormatter","LabelOnlyDisclaimerMessage","message","urls","Img","src","imageFolder","alt"],"mappings":"46BAyBA,MAAMA,EAAmB,CAAC,KAAM,QAE1BC,EAAiB,EACnBC,cACAC,qBACAC,yBACAC,oBACAC,4BACAC,oBACAC,uBACAC,gBAAiBC,EACjBC,WACAC,wBAEA,MAAMC,EAAsBC,GAAQ,IAAMZ,GAAeF,EAAiBe,SAASP,IAAuB,CAACN,EAAaM,KACjHQ,EAAyBC,GAA8BC,EAAkBL,IACzEM,EAAWC,GAAgBF,EAAkBf,GAC9CkB,EAAWC,KACVb,EAAiBc,GAAsBL,EAAiB,KACzDM,KAAEA,GAASC,IACXC,EAA+BZ,GAAQ,IAClCa,EAAqB,CACxBzB,cACAC,qBACAC,yBACAC,oBACAC,4BACAC,uBAEL,CAACL,EAAaC,EAAoBC,EAAwBC,EAAmBC,EAA2BC,IAErGqB,EAAqBC,GAAY,KACnC,MAAMC,GAAYX,EAClBC,EAAaU,GAEb,MAAMC,EAAQ,IAAIC,EAAmB,CACjCC,KAAMC,EAAeC,QACrBC,OAAQ,iCACRC,WAAY,CACRC,WAAYR,KAGpBlB,EAAkBmB,EAAAA,GACnB,CAACZ,EAAWP,IAyDf,OAjDA2B,GAAU,KACDb,GAILf,EAAS,CACL6B,aAAc,CACVC,aAAczB,EACdT,kBAAmBA,EACnBmC,eAAc7B,GAAsBM,KAChCb,GAA6B,CAAEqC,eAAgBrC,MAC/CG,GAAmB,CAAEA,qBAEjC,GACD,CACCI,EACAG,EACAV,EACAa,EACAZ,EACAE,EACAE,EACAe,IAMJa,GAAU,KACF1B,GACAI,GAA2B,EAC/B,GACD,CAACJ,IAEJ0B,GAAU,KACN,IAAKb,EACD,OAGJ,MAAMK,EAAQ,IAAIC,EAAmB,CACjCC,KAAMC,EAAeU,SACrBP,WAAY,CACRQ,yBAA0BhC,KAIlCD,EAAkBmB,EAAAA,GACnB,CAAClB,EAAqBa,EAA8Bd,IAElDC,GAAwBa,EAKzBoB,EAACC,MAAAA,CAAIC,UAAU,gCAAgCC,cAAY,6BACvDH,EAACC,MAAAA,CACGC,UAAWE,EAAG,+CAAgD,CAC1D,uDAAwD/B,KAG5D2B,EAACK,EAAAA,CACGC,QAASjC,EACTR,SAAUiB,EACVyB,UAAW7B,EAAK8B,IAAI,+BACpBC,MAAOT,EAACU,OAAAA,KAAMhC,EAAK8B,IAAI,kCAE3BR,EAACW,EAGJtC,OAAAA,GACG2B,EAACY,EAAAA,KACGZ,EAACa,EAAAA,CAAiBC,aAAcC,EAAsBnD,GAA2BC,SAAUY,IAC3FuB,EAACC,MAAAA,CAAIC,UAAU,8CACXF,EAACgB,EAAAA,CACGC,QAASvC,EAAK8B,IAAI,6BAClBU,KAAM,CAAC5D,EAAwBC,MAGvCyC,EAACmB,EAAAA,CACGjB,UAAU,sCACVkB,IAAK7C,EAAS,CAAE8C,YAAa,eAAxB9C,CAAyC,yBAC9C+C,IAAK5C,EAAK8B,IAAI,+BA/BvB"}