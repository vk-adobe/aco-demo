{"version":3,"file":"KCPAuthentication.js","sources":["../../../../../../../src/components/Card/components/CardInput/components/KCPAuthentication.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useMemo } from 'preact/hooks';\nimport classNames from 'classnames';\nimport Field from '../../../../internal/FormFields/Field';\nimport { useCoreContext } from '../../../../../core/Context/CoreProvider';\nimport { KCPProps } from './types';\nimport DataSfSpan from './DataSfSpan';\nimport InputTelephone from '../../../../internal/FormFields/InputTelephone';\nimport { alternativeLabelContent } from './FieldLabelAlternative';\nimport { CREDITCARD_TAX_NUMBER_INVALID } from '../../../../../core/Errors/constants';\n\nexport default function KCPAuthentication(props: KCPProps) {\n    const { i18n } = useCoreContext();\n\n    const taxNumberLabel = useMemo((): string => {\n        if (props.value?.length > 6) return i18n.get('creditCard.taxNumber.labelAlt');\n\n        return i18n.get('creditCard.taxNumber.label');\n    }, [props.value]);\n\n    return (\n        <div className=\"adyen-checkout__card__kcp-authentication\">\n            <Field\n                label={taxNumberLabel}\n                filled={props.filled}\n                classNameModifiers={['kcp-taxNumber']}\n                errorMessage={props.error && i18n.get(CREDITCARD_TAX_NUMBER_INVALID)}\n                isValid={props.isValid}\n                dir={'ltr'}\n                name={'kcpTaxNumberOrDOB'}\n                onFocus={e => props.onFieldFocusAnalytics('taxNumber', e)}\n                onBlur={e => props.onFieldBlurAnalytics('taxNumber', e)}\n            >\n                <InputTelephone\n                    name={'kcpTaxNumberOrDOB'}\n                    className=\"adyen-checkout__card__kcp-taxNumber__input adyen-checkout__input\"\n                    maxLength={10}\n                    minLength={6}\n                    autoComplete={'false'}\n                    value={props.value}\n                    required={true}\n                    onBlur={props.onBlur}\n                    onInput={props.onInput}\n                    disabled={props.disabled}\n                    placeholder={props.placeholder}\n                />\n            </Field>\n\n            <Field\n                label={i18n.get('creditCard.password.label')}\n                focused={props.focusedElement === 'encryptedPassword'}\n                filled={props.filled}\n                classNameModifiers={['50', 'koreanAuthentication-encryptedPassword']}\n                onFocusField={() => props.onFocusField('encryptedPassword')}\n                errorMessage={props.encryptedPasswordState.errors && i18n.get(String(props.encryptedPasswordState.errors))}\n                isValid={props.encryptedPasswordState.valid}\n                dir={'ltr'}\n                name={'encryptedPassword'}\n                useLabelElement={false}\n                renderAlternativeToLabel={alternativeLabelContent}\n            >\n                <DataSfSpan\n                    encryptedFieldType=\"encryptedPassword\"\n                    className={classNames({\n                        'adyen-checkout__input': true,\n                        'adyen-checkout__input--large': true,\n                        'adyen-checkout__input--error': props.encryptedPasswordState.errors,\n                        'adyen-checkout__input--valid': props.encryptedPasswordState.valid,\n                        'adyen-checkout__input--focus': props.focusedElement === 'encryptedPassword'\n                    })}\n                />\n            </Field>\n        </div>\n    );\n}\n"],"names":["KCPAuthentication","props","i18n","useCoreContext","taxNumberLabel","useMemo","value","length","get","h","div","className","Field","label","filled","classNameModifiers","errorMessage","error","CREDITCARD_TAX_NUMBER_INVALID","isValid","dir","name","onFocus","e","onFieldFocusAnalytics","onBlur","onFieldBlurAnalytics","InputTelephone","maxLength","minLength","autoComplete","required","onInput","disabled","placeholder","focused","focusedElement","onFocusField","encryptedPasswordState","errors","String","valid","useLabelElement","renderAlternativeToLabel","alternativeLabelContent","DataSfSpan","encryptedFieldType","classNames"],"mappings":"mlBAWe,SAASA,EAAkBC,GACtC,MAAMC,KAAEA,GAASC,IAEXC,EAAiBC,GAAQ,IACvBJ,EAAMK,OAAOC,OAAS,EAAUL,EAAKM,IAAI,iCAEtCN,EAAKM,IAAI,+BACjB,CAACP,EAAMK,QAEV,OACIG,EAACC,MAAAA,CAAIC,UAAU,4CACXF,EAACG,EAAAA,CACGC,MAAOT,EACPU,OAAQb,EAAMa,OACdC,mBAAoB,CAAC,iBACrBC,aAAcf,EAAMgB,OAASf,EAAKM,IAAIU,GACtCC,QAASlB,EAAMkB,QACfC,IAAK,MACLC,KAAM,oBACNC,QAASC,GAAKtB,EAAMuB,sBAAsB,YAAaD,GACvDE,OAAQF,GAAKtB,EAAMyB,qBAAqB,YAAaH,IAErDd,EAACkB,EAAAA,CACGN,KAAM,oBACNV,UAAU,mEACViB,UAAW,GACXC,UAAW,EACXC,aAAc,QACdxB,MAAOL,EAAMK,MACbyB,UAAU,EACVN,OAAQxB,EAAMwB,OACdO,QAAS/B,EAAM+B,QACfC,SAAUhC,EAAMgC,SAChBC,YAAajC,EAAMiC,eAI3BzB,EAACG,EAAAA,CACGC,MAAOX,EAAKM,IAAI,6BAChB2B,QAAkC,sBAAzBlC,EAAMmC,eACftB,OAAQb,EAAMa,OACdC,mBAAoB,CAAC,KAAM,0CAC3BsB,aAAc,IAAMpC,EAAMoC,aAAa,qBACvCrB,aAAcf,EAAMqC,uBAAuBC,QAAUrC,EAAKM,IAAIgC,OAAOvC,EAAMqC,uBAAuBC,SAClGpB,QAASlB,EAAMqC,uBAAuBG,MACtCrB,IAAK,MACLC,KAAM,oBACNqB,iBAAiB,EACjBC,yBAA0BC,GAE1BnC,EAACoC,EAAAA,CACGC,mBAAmB,oBACnBnC,UAAWoC,EAAW,CAClB,yBAAyB,EACzB,gCAAgC,EAChC,+BAAgC9C,EAAMqC,uBAAuBC,OAC7D,+BAAgCtC,EAAMqC,uBAAuBG,MAC7D,+BAAyD,sBAAzBxC,EAAMmC,oBAM9D"}