{"version":3,"file":"validate.js","sources":["../../../../../../src/components/Card/components/CardInput/validate.ts"],"sourcesContent":["import { ValidatorRules } from '../../../../utils/Validator/types';\nimport { formatCPFCNPJ } from '../../../internal/SocialSecurityNumberBrazil/utils';\nimport validateSSN from '../../../internal/SocialSecurityNumberBrazil/validate';\nimport { isEmpty } from '../../../../utils/validator-utils';\nimport {\n    BOLETO_SOCIAL_SECURITY_NUMBER_INVALID,\n    CREDITCARD_HOLDER_NAME_INVALID,\n    CREDITCARD_TAX_NUMBER_INVALID\n} from '../../../../core/Errors/constants';\n\nexport const cardInputFormatters = {\n    socialSecurityNumber: formatCPFCNPJ\n};\n\nexport const cardInputValidationRules: ValidatorRules = {\n    socialSecurityNumber: [\n        {\n            modes: ['blur'],\n            validate: value => {\n                if (isEmpty(value)) return null;\n                return validateSSN(value);\n            },\n            errorMessage: BOLETO_SOCIAL_SECURITY_NUMBER_INVALID\n        }\n    ],\n    taxNumber: [\n        {\n            modes: ['blur'],\n            validate: value => (isEmpty(value) ? null : value?.length === 6 || value?.length === 10),\n            errorMessage: CREDITCARD_TAX_NUMBER_INVALID\n        }\n    ],\n    holderName: [\n        {\n            // Will fire at startup and when triggerValidation is called and also applies as text is input\n            modes: ['blur'],\n            validate: value => (isEmpty(value) ? null : true), // true, if there are chars other than spaces\n            errorMessage: CREDITCARD_HOLDER_NAME_INVALID\n        }\n    ],\n    default: [\n        {\n            modes: ['blur'],\n            // ensuring we don't try to run this against objects e.g. billingAddress\n            validate: value => !!value && typeof value === 'string' && value.trim().length > 0\n        }\n    ]\n};\n\nexport const getRuleByNameAndMode = (name, mode) => {\n    const ruleArr = cardInputValidationRules[name] as any[];\n    const rule = ruleArr.reduce((acc, elem) => {\n        if (!acc.length) {\n            if (elem.modes.includes(mode)) {\n                acc.push(elem.validate);\n            }\n        }\n        return acc;\n    }, []);\n    return rule[0];\n};\n"],"names":["cardInputFormatters","socialSecurityNumber","formatCPFCNPJ","cardInputValidationRules","modes","validate","value","isEmpty","validateSSN","errorMessage","BOLETO_SOCIAL_SECURITY_NUMBER_INVALID","taxNumber","length","CREDITCARD_TAX_NUMBER_INVALID","holderName","CREDITCARD_HOLDER_NAME_INVALID","default","trim","getRuleByNameAndMode","name","mode","reduce","acc","elem","includes","push"],"mappings":"uYAUaA,EAAsB,CAC/BC,qBAAsBC,GAGbC,EAA2C,CACpDF,qBAAsB,CAClB,CACIG,MAAO,CAAC,QACRC,SAAUC,GACFC,EAAQD,GAAe,KACpBE,EAAYF,GAEvBG,aAAcC,IAGtBC,UAAW,CACP,CACIP,MAAO,CAAC,QACRC,SAAUC,GAAUC,EAAQD,GAAS,KAAyB,IAAlBA,GAAOM,QAAkC,KAAlBN,GAAOM,OAC1EH,aAAcI,IAGtBC,WAAY,CACR,CAEIV,MAAO,CAAC,QACRC,SAAUC,IAAUC,EAAQD,IAAS,KACrCG,aAAcM,IAGtBC,QAAS,CACL,CACIZ,MAAO,CAAC,QAERC,SAAUC,KAAWA,GAA0B,iBAAVA,GAAsBA,EAAMW,OAAOL,OAAS,KAKhFM,EAAuB,CAACC,EAAMC,IACvBjB,EAAyBgB,GACpBE,QAAO,CAACC,EAAKC,KACzBD,EAAIV,QACDW,EAAKnB,MAAMoB,SAASJ,IACpBE,EAAIG,KAAKF,EAAKlB,UAGfiB,IACR,IACS"}