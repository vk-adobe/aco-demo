{"version":3,"file":"BoletoInput.js","sources":["../../../../../../src/components/Boleto/components/BoletoInput/BoletoInput.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport Address from '../../../internal/Address';\nimport { boletoValidationRules } from './validate';\nimport { boletoFormatters } from './utils';\nimport SendCopyToEmail from '../../../internal/SendCopyToEmail/SendCopyToEmail';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport { BoletoInputDataState } from '../../types';\nimport useForm from '../../../../utils/useForm';\nimport { BrazilPersonalDetail } from '../../../internal/SocialSecurityNumberBrazil/BrazilPersonalDetail';\nimport FormInstruction from '../../../internal/FormInstruction';\nimport { ComponentMethodsRef } from '../../../internal/UIElement/types';\n\ninterface BoletoInputProps {\n    onChange(data: any): void;\n    // TODO\n    [key: string]: any;\n}\n\nfunction BoletoInput(props: BoletoInputProps) {\n    const { i18n } = useCoreContext();\n    const addressRef = useRef(null);\n    const setAddressRef = ref => {\n        addressRef.current = ref;\n    };\n    const { handleChangeFor, triggerValidation, setSchema, setData, setValid, setErrors, data, valid, errors, isValid } =\n        useForm<BoletoInputDataState>({\n            schema: ['firstName', 'lastName', 'socialSecurityNumber', 'billingAddress', 'shopperEmail'],\n            defaultData: props.data,\n            rules: boletoValidationRules,\n            formatters: boletoFormatters\n        });\n\n    // Email field toggle\n    const [showingEmail, setShowingEmail] = useState<boolean>(false);\n    const toggleEmailField = () => setShowingEmail(!showingEmail);\n\n    // Handle form schema updates\n    useEffect(() => {\n        const newSchema = [\n            ...(props.personalDetailsRequired ? ['firstName', 'lastName', 'socialSecurityNumber'] : []),\n            ...(props.billingAddressRequired ? ['billingAddress'] : []),\n            ...(showingEmail ? ['shopperEmail'] : [])\n        ];\n        setSchema(newSchema);\n    }, [showingEmail, props.personalDetailsRequired, props.billingAddressRequired]);\n\n    const handleAddress = address => {\n        setData('billingAddress', address.data);\n        setValid('billingAddress', address.isValid);\n        setErrors('billingAddress', address.errors);\n    };\n\n    const [status, setStatus] = useState('ready');\n\n    /** An object by which to expose 'public' members to the parent UIElement */\n    const boletoRef = useRef<ComponentMethodsRef>({});\n    // Just call once\n    if (!Object.keys(boletoRef.current).length) {\n        props.setComponentRef?.(boletoRef.current);\n    }\n\n    boletoRef.current.showValidation = () => {\n        triggerValidation();\n        if (props.billingAddressRequired) {\n            addressRef.current.showValidation();\n        }\n    };\n\n    boletoRef.current.setStatus = setStatus;\n\n    useEffect(() => {\n        const billingAddressValid = props.billingAddressRequired ? Boolean(valid.billingAddress) : true;\n        props.onChange({ data, valid, errors, isValid: isValid && billingAddressValid });\n    }, [data, valid, errors]);\n\n    const buttonModifiers = [...(!props.personalDetailsRequired && !props.billingAddressRequired && !props.showEmailAddress ? ['standalone'] : [])];\n\n    const showFormInstruction = props.personalDetailsRequired || props.billingAddressRequired;\n\n    return (\n        <div className=\"adyen-checkout__boleto-input__field\">\n            {showFormInstruction && <FormInstruction />}\n\n            {props.personalDetailsRequired && (\n                <BrazilPersonalDetail i18n={i18n} data={data} handleChangeFor={handleChangeFor} errors={errors} valid={valid} />\n            )}\n\n            {props.billingAddressRequired && (\n                <Address\n                    allowedCountries={['BR']}\n                    label=\"billingAddress\"\n                    data={{ ...props.data.billingAddress, country: 'BR' }}\n                    onChange={handleAddress}\n                    requiredFields={['country', 'street', 'houseNumberOrName', 'postalCode', 'city', 'stateOrProvince']}\n                    setComponentRef={setAddressRef}\n                />\n            )}\n\n            {props.showEmailAddress && (\n                <SendCopyToEmail\n                    value={data.shopperEmail}\n                    errors={errors.shopperEmail}\n                    onToggle={toggleEmailField}\n                    onInput={handleChangeFor('shopperEmail', 'input')}\n                    onBlur={handleChangeFor('shopperEmail', 'blur')}\n                />\n            )}\n\n            {props.showPayButton &&\n                props.payButton({\n                    status,\n                    label: i18n.get('boletobancario.btnLabel'),\n                    classNameModifiers: buttonModifiers\n                })}\n        </div>\n    );\n}\n\nBoletoInput.defaultProps = {\n    data: {},\n    showEmailAddress: true,\n    personalDetailsRequired: true,\n    billingAddressRequired: true\n};\n\nexport default BoletoInput;\n"],"names":["BoletoInput","props","i18n","useCoreContext","addressRef","useRef","handleChangeFor","triggerValidation","setSchema","setData","setValid","setErrors","data","valid","errors","isValid","useForm","schema","defaultData","rules","boletoValidationRules","formatters","boletoFormatters","showingEmail","setShowingEmail","useState","useEffect","newSchema","personalDetailsRequired","billingAddressRequired","status","setStatus","boletoRef","Object","keys","current","length","setComponentRef","showValidation","billingAddressValid","Boolean","billingAddress","onChange","buttonModifiers","showEmailAddress","showFormInstruction","h","div","className","FormInstruction","BrazilPersonalDetail","Address","allowedCountries","label","country","address","requiredFields","ref","SendCopyToEmail","value","shopperEmail","onToggle","onInput","onBlur","showPayButton","payButton","get","classNameModifiers","defaultProps"],"mappings":"2rBAmBA,SAASA,EAAYC,GACjB,MAAMC,KAAEA,GAASC,IACXC,EAAaC,EAAO,OAIpBC,gBAAEA,EAAeC,kBAAEA,EAAiBC,UAAEA,EAASC,QAAEA,EAAOC,SAAEA,EAAQC,UAAEA,EAASC,KAAEA,EAAIC,MAAEA,EAAKC,OAAEA,EAAMC,QAAEA,GACtGC,EAA8B,CAC1BC,OAAQ,CAAC,YAAa,WAAY,uBAAwB,iBAAkB,gBAC5EC,YAAajB,EAAMW,KACnBO,MAAOC,EACPC,WAAYC,KAIbC,EAAcC,GAAmBC,GAAkB,GAI1DC,GAAU,KACN,MAAMC,EAAY,IACV1B,EAAM2B,wBAA0B,CAAC,YAAa,WAAY,wBAA0B,MACpF3B,EAAM4B,uBAAyB,CAAC,kBAAoB,MACpDN,EAAe,CAAC,gBAAkB,IAE1Cf,EAAUmB,EAAAA,GACX,CAACJ,EAActB,EAAM2B,wBAAyB3B,EAAM4B,yBAEvD,MAMOC,EAAQC,GAAaN,EAAS,SAG/BO,EAAY3B,EAA4B,IAEzC4B,OAAOC,KAAKF,EAAUG,SAASC,QAChCnC,EAAMoC,kBAAkBL,EAAUG,SAGtCH,EAAUG,QAAQG,eAAiB,KAC/B/B,IACIN,EAAM4B,wBACNzB,EAAW+B,QAAQG,gBACvB,EAGJN,EAAUG,QAAQJ,UAAYA,EAE9BL,GAAU,KACN,MAAMa,GAAsBtC,EAAM4B,wBAAyBW,QAAQ3B,EAAM4B,gBACzExC,EAAMyC,SAAS,CAAE9B,OAAMC,QAAOC,SAAQC,QAASA,GAAWwB,GAAoB,GAC/E,CAAC3B,EAAMC,EAAOC,IAEjB,MAAM6B,EAAkB,IAAM1C,EAAM2B,yBAA4B3B,EAAM4B,wBAA2B5B,EAAM2C,iBAAoC,GAAjB,CAAC,eAErHC,EAAsB5C,EAAM2B,yBAA2B3B,EAAM4B,uBAEnE,OACIiB,EAACC,MAAAA,CAAIC,UAAU,uCACVH,GAAuBC,EAACG,EAAAA,MAExBhD,EAAM2B,yBACHkB,EAACI,EAAAA,CAAqBhD,KAAMA,EAAMU,KAAMA,EAAMN,gBAAiBA,EAAiBQ,OAAQA,EAAQD,MAAOA,IAG1GZ,EAAM4B,wBACHiB,EAACK,EAAAA,CACGC,iBAAkB,CAAC,MACnBC,MAAM,iBACNzC,KAAM,IAAKX,EAAMW,KAAK6B,eAAgBa,QAAS,MAC/CZ,SA9CMa,IAClB9C,EAAQ,iBAAkB8C,EAAQ3C,MAClCF,EAAS,iBAAkB6C,EAAQxC,SACnCJ,EAAU,iBAAkB4C,EAAQzC,OAAM,EA4C9B0C,eAAgB,CAAC,UAAW,SAAU,oBAAqB,aAAc,OAAQ,mBACjFnB,gBAzEMoB,IAClBrD,EAAW+B,QAAUsB,CAAAA,IA4EhBxD,EAAM2C,kBACHE,EAACY,EAAAA,CACGC,MAAO/C,EAAKgD,aACZ9C,OAAQA,EAAO8C,aACfC,SApES,IAAMrC,GAAiBD,GAqEhCuC,QAASxD,EAAgB,eAAgB,SACzCyD,OAAQzD,EAAgB,eAAgB,UAI/CL,EAAM+D,eACH/D,EAAMgE,UAAU,CACZnC,SACAuB,MAAOnD,EAAKgE,IAAI,2BAChBC,mBAAoBxB,IAIxC,CAEA3C,EAAYoE,aAAe,CACvBxD,KAAM,CAAC,EACPgC,kBAAkB,EAClBhB,yBAAyB,EACzBC,wBAAwB"}