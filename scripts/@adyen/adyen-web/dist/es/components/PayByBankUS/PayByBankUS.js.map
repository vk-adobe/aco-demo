{"version":3,"file":"PayByBankUS.js","sources":["../../../../src/components/PayByBankUS/PayByBankUS.tsx"],"sourcesContent":["import { Fragment, h } from 'preact';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport RedirectElement from '../Redirect';\nimport RedirectButton from '../internal/RedirectButton';\nimport { TxVariants } from '../tx-variants';\nimport './PayByBankUS.scss';\nimport getIssuerImageUrl from '../../utils/get-issuer-image';\nimport PayButton, { payAmountLabel } from '../internal/PayButton';\n\nexport default class PayByBankUS extends RedirectElement {\n    public static type = TxVariants.paybybank_AIS_DD;\n\n    protected formatProps(props) {\n        return {\n            // paymentMethodBrands configuration\n            keepBrandsVisible: true,\n            showOtherInsteafOfNumber: true,\n            ...props\n        };\n    }\n\n    public formatData() {\n        return {\n            paymentMethod: {\n                type: this.type,\n                ...(this.props.storedPaymentMethodId && {\n                    storedPaymentMethodId: this.props.storedPaymentMethodId\n                })\n            },\n            browserInfo: this.browserInfo\n        };\n    }\n\n    get displayName() {\n        if (this.props.storedPaymentMethodId && this.props.label) {\n            return this.props.label;\n        }\n        return this.props.name;\n    }\n\n    get additionalInfo() {\n        return this.props.storedPaymentMethodId ? this.props.name : '';\n    }\n\n    /*\n    Hardcode US brands \n    */\n    get brands(): { icon: string; name: string }[] {\n        const getImage = props => this.resources.getImage(props);\n        // paybybank_AIS_DD / tx_variant not used here since images are kept in paybybank subfolder\n        const getIssuerIcon = getIssuerImageUrl({}, 'paybybank', getImage);\n\n        // hardcoding\n        return [\n            { icon: getIssuerIcon('US-1'), name: 'Wells Fargo' },\n            { icon: getIssuerIcon('US-2'), name: 'Bank of America' },\n            { icon: getIssuerIcon('US-3'), name: 'Chase' },\n            { icon: getIssuerIcon('US-4'), name: 'Citi' }\n        ];\n    }\n\n    render() {\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                {this.props.storedPaymentMethodId ? (\n                    this.props.showPayButton && (\n                        <PayButton\n                            {...this.props}\n                            classNameModifiers={['standalone']}\n                            amount={this.props.amount}\n                            label={payAmountLabel(this.props.i18n, this.props.amount)}\n                            onClick={this.submit}\n                        />\n                    )\n                ) : (\n                    <Fragment>\n                        <div className=\"adyen-checkout-paybybank_AIS_DD\">\n                            <p className=\"adyen-checkout-paybybank_AIS_DD__description-header\">\n                                {this.props.i18n.get('payByBankAISDD.disclaimer.header')}\n                            </p>\n                            <p className=\"adyen-checkout-paybybank_AIS_DD__description-body\">\n                                {this.props.i18n.get('payByBankAISDD.disclaimer.body')}\n                            </p>\n                        </div>\n\n                        {this.props.showPayButton && (\n                            <RedirectButton\n                                {...this.props}\n                                showPayButton={this.props.showPayButton}\n                                name={this.displayName}\n                                onSubmit={this.submit}\n                                payButton={this.payButton}\n                                ref={ref => {\n                                    this.componentRef = ref;\n                                }}\n                            />\n                        )}\n                    </Fragment>\n                )}\n            </CoreProvider>\n        );\n    }\n}\n"],"names":["PayByBankUS","RedirectElement","formatProps","props","keepBrandsVisible","showOtherInsteafOfNumber","formatData","paymentMethod","type","this","storedPaymentMethodId","browserInfo","displayName","label","name","additionalInfo","brands","getIssuerIcon","getIssuerImageUrl","resources","getImage","icon","render","h","CoreProvider","i18n","loadingContext","showPayButton","PayButton","classNameModifiers","amount","payAmountLabel","onClick","submit","Fragment","div","className","p","get","RedirectButton","onSubmit","payButton","ref","componentRef","TxVariants","paybybank_AIS_DD"],"mappings":"wcASe,MAAMA,UAAoBC,EAG3BC,WAAAA,CAAYC,GAClB,MAAO,CAEHC,mBAAmB,EACnBC,0BAA0B,KACvBF,EAEX,CAEOG,UAAAA,GACH,MAAO,CACHC,cAAe,CACXC,KAAMC,KAAKD,QACPC,KAAKN,MAAMO,uBAAyB,CACpCA,sBAAuBD,KAAKN,MAAMO,wBAG1CC,YAAaF,KAAKE,YAE1B,CAEA,eAAIC,GACA,OAAIH,KAAKN,MAAMO,uBAAyBD,KAAKN,MAAMU,MACxCJ,KAAKN,MAAMU,MAEfJ,KAAKN,MAAMW,IACtB,CAEA,kBAAIC,GACA,OAAON,KAAKN,MAAMO,sBAAwBD,KAAKN,MAAMW,KAAO,EAChE,CAKA,UAAIE,GACA,MAEMC,EAAgBC,EAAkB,GAAI,aAF3Bf,GAASM,KAAKU,UAAUC,SAASjB,KAKlD,MAAO,CACH,CAAEkB,KAAMJ,EAAc,QAASH,KAAM,eACrC,CAAEO,KAAMJ,EAAc,QAASH,KAAM,mBACrC,CAAEO,KAAMJ,EAAc,QAASH,KAAM,SACrC,CAAEO,KAAMJ,EAAc,QAASH,KAAM,QAE7C,CAEAQ,MAAAA,GACI,OACIC,EAACC,EAAAA,CAAaC,KAAMhB,KAAKN,MAAMsB,KAAMC,eAAgBjB,KAAKN,MAAMuB,eAAgBP,UAAWV,KAAKU,WAC3FV,KAAKN,MAAMO,sBACRD,KAAKN,MAAMwB,eACPJ,EAACK,EAAAA,IACOnB,KAAKN,MACT0B,mBAAoB,CAAC,cACrBC,OAAQrB,KAAKN,MAAM2B,OACnBjB,MAAOkB,EAAetB,KAAKN,MAAMsB,KAAMhB,KAAKN,MAAM2B,QAClDE,QAASvB,KAAKwB,SAItBV,EAACW,OACGX,EAACY,MAAAA,CAAIC,UAAU,mCACXb,EAACc,IAAAA,CAAED,UAAU,uDACR3B,KAAKN,MAAMsB,KAAKa,IAAI,qCAEzBf,EAACc,IAAAA,CAAED,UAAU,qDACR3B,KAAKN,MAAMsB,KAAKa,IAAI,oCAI5B7B,KAAKN,MAAMwB,eACRJ,EAACgB,EAAAA,IACO9B,KAAKN,MACTwB,cAAelB,KAAKN,MAAMwB,cAC1Bb,KAAML,KAAKG,YACX4B,SAAU/B,KAAKwB,OACfQ,UAAWhC,KAAKgC,UAChBC,IAAKA,IACDjC,KAAKkC,aAAeD,CAAAA,KAQpD,cA5FiB1C,IACHQ,SAAOoC,EAAWC"}