{"version":3,"file":"MBWay.js","sources":["../../../../src/components/MBWay/MBWay.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport MBWayInput from './components/MBWayInput';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport config from './components/MBWayAwait/config';\nimport Await from '../../components/internal/Await';\nimport SRPanelProvider from '../../core/Errors/SRPanelProvider';\nimport { TxVariants } from '../tx-variants';\nimport { AwaitConfiguration } from '../internal/Await/types';\n\nexport class MBWayElement extends UIElement<AwaitConfiguration> {\n    public static type = TxVariants.mbway;\n\n    formatProps(props) {\n        const { data = {}, placeholders = {} } = props;\n\n        return {\n            ...props,\n            data: {\n                phoneNumber: data.telephoneNumber || data.phoneNumber,\n                phonePrefix: data.phonePrefix || '+351' // if not specified default to Portuguese country code\n            },\n            placeholders: {\n                phoneNumber: placeholders.telephoneNumber || placeholders.phoneNumber\n            }\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    formatData(): object {\n        return {\n            paymentMethod: {\n                type: MBWayElement.type,\n                ...(this.state.data?.phoneNumber && { telephoneNumber: this.state.data.phonePrefix + this.state.data.phoneNumber })\n            }\n        };\n    }\n\n    get isValid(): boolean {\n        return !!this.state.isValid;\n    }\n\n    get displayName(): string {\n        return this.props.name;\n    }\n\n    render() {\n        if (this.props.paymentData) {\n            return (\n                <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                    <SRPanelProvider srPanel={this.props.modules.srPanel}>\n                        <Await\n                            ref={ref => {\n                                this.componentRef = ref;\n                            }}\n                            clientKey={this.props.clientKey}\n                            paymentData={this.props.paymentData}\n                            onError={this.props.onError}\n                            onComplete={this.onComplete}\n                            brandLogo={this.icon}\n                            type={config.type}\n                            messageText={this.props.i18n.get(config.messageTextId)}\n                            awaitText={this.props.i18n.get(config.awaitTextId)}\n                            showCountdownTimer={config.showCountdownTimer}\n                            delay={config.STATUS_INTERVAL}\n                            countdownTime={config.COUNTDOWN_MINUTES}\n                            throttleTime={config.THROTTLE_TIME}\n                            throttleInterval={config.THROTTLE_INTERVAL}\n                            onActionHandled={this.onActionHandled}\n                        />\n                    </SRPanelProvider>\n                </CoreProvider>\n            );\n        }\n\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                <MBWayInput\n                    /* @ts-ignore ref handled internally by Component */\n                    ref={ref => {\n                        this.componentRef = ref;\n                    }}\n                    {...this.props}\n                    setComponentRef={this.setComponentRef}\n                    onChange={this.setState}\n                    onSubmit={this.submit}\n                    payButton={this.payButton}\n                />\n            </CoreProvider>\n        );\n    }\n}\n\nexport default MBWayElement;\n"],"names":["MBWayElement","UIElement","formatProps","props","data","placeholders","phoneNumber","telephoneNumber","phonePrefix","formatData","paymentMethod","type","this","state","isValid","displayName","name","render","paymentData","h","CoreProvider","i18n","loadingContext","resources","SRPanelProvider","srPanel","modules","Await","ref","componentRef","clientKey","onError","onComplete","brandLogo","icon","config","messageText","get","messageTextId","awaitText","awaitTextId","showCountdownTimer","delay","STATUS_INTERVAL","countdownTime","COUNTDOWN_MINUTES","throttleTime","THROTTLE_TIME","throttleInterval","THROTTLE_INTERVAL","onActionHandled","MBWayInput","setComponentRef","onChange","setState","onSubmit","submit","payButton","TxVariants","mbway"],"mappings":"ybAUO,MAAMA,UAAqBC,EAG9BC,WAAAA,CAAYC,GACR,MAAMC,KAAEA,EAAO,CAAA,EAAEC,aAAEA,EAAe,CAAA,GAAOF,EAEzC,MAAO,IACAA,EACHC,KAAM,CACFE,YAAaF,EAAKG,iBAAmBH,EAAKE,YAC1CE,YAAaJ,EAAKI,aAAe,QAErCH,aAAc,CACVC,YAAaD,EAAaE,iBAAmBF,EAAaC,aAGtE,CAKAG,UAAAA,GACI,MAAO,CACHC,cAAe,CACXC,KAAMX,EAAaW,QACfC,KAAKC,MAAMT,MAAME,aAAe,CAAEC,gBAAiBK,KAAKC,MAAMT,KAAKI,YAAcI,KAAKC,MAAMT,KAAKE,cAGjH,CAEA,WAAIQ,GACA,QAASF,KAAKC,MAAMC,OACxB,CAEA,eAAIC,GACA,OAAOH,KAAKT,MAAMa,IACtB,CAEAC,MAAAA,GACI,OAAIL,KAAKT,MAAMe,YAEPC,EAACC,EAAAA,CAAaC,KAAMT,KAAKT,MAAMkB,KAAMC,eAAgBV,KAAKT,MAAMmB,eAAgBC,UAAWX,KAAKW,WAC5FJ,EAACK,EAAAA,CAAgBC,QAASb,KAAKT,MAAMuB,QAAQD,SACzCN,EAACQ,EAAAA,CACGC,IAAKA,IACDhB,KAAKiB,aAAeD,CAAAA,EAExBE,UAAWlB,KAAKT,MAAM2B,UACtBZ,YAAaN,KAAKT,MAAMe,YACxBa,QAASnB,KAAKT,MAAM4B,QACpBC,WAAYpB,KAAKoB,WACjBC,UAAWrB,KAAKsB,KAChBvB,KAAMwB,EAAOxB,KACbyB,YAAaxB,KAAKT,MAAMkB,KAAKgB,IAAIF,EAAOG,eACxCC,UAAW3B,KAAKT,MAAMkB,KAAKgB,IAAIF,EAAOK,aACtCC,mBAAoBN,EAAOM,mBAC3BC,MAAOP,EAAOQ,gBACdC,cAAeT,EAAOU,kBACtBC,aAAcX,EAAOY,cACrBC,iBAAkBb,EAAOc,kBACzBC,gBAAiBtC,KAAKsC,oBAQtC/B,EAACC,EAAAA,CAAaC,KAAMT,KAAKT,MAAMkB,KAAMC,eAAgBV,KAAKT,MAAMmB,eAAgBC,UAAWX,KAAKW,WAC5FJ,EAACgC,EAAAA,CAEGvB,IAAKA,IACDhB,KAAKiB,aAAeD,CAAAA,KAEpBhB,KAAKT,MACTiD,gBAAiBxC,KAAKwC,gBACtBC,SAAUzC,KAAK0C,SACfC,SAAU3C,KAAK4C,OACfC,UAAW7C,KAAK6C,YAIhC,cAlFSzD,IACKW,SAAO+C,EAAWC"}