{"version":3,"file":"GiftcardComponent.js","sources":["../../../../../src/components/Giftcard/components/GiftcardComponent.tsx"],"sourcesContent":["import { Component, FunctionComponent, h } from 'preact';\nimport SecuredFieldsProvider from '../../internal/SecuredFields/SFP/SecuredFieldsProvider';\nimport Alert from '../../internal/Alert';\nimport GiftcardResult from './GiftcardResult';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport { PaymentAmount } from '../../../types/global-types';\nimport { GIFT_CARD } from '../../internal/SecuredFields/lib/constants';\nimport { GiftCardFields } from './GiftcardFields';\nimport { GiftcardFieldsProps, Placeholders } from './types';\n\ninterface GiftcardComponentProps {\n    onChange: (state) => void;\n    onFocus: (event) => void;\n    onBlur: (event) => void;\n\n    makeBalanceCheck: (event) => void;\n    makePayment: (event) => void;\n\n    amount?: PaymentAmount;\n    showPayButton: boolean;\n    payButton: (config) => any;\n\n    pinRequired: boolean;\n    expiryDateRequired?: boolean;\n    fieldsLayoutComponent: FunctionComponent<GiftcardFieldsProps>;\n    placeholders?: Placeholders;\n    handleKeyPress?: (o: KeyboardEvent) => void;\n}\n\nclass Giftcard extends Component<GiftcardComponentProps> {\n    public state = {\n        status: 'ready',\n        data: {},\n        balance: null,\n        transactionLimit: null,\n        focusedElement: false,\n        isValid: false\n    };\n\n    public static defaultProps = {\n        pinRequired: true,\n        expiryDateRequired: false,\n        onChange: () => {},\n        onFocus: () => {},\n        onBlur: () => {},\n        fieldsLayoutComponent: GiftCardFields\n    };\n\n    public sfp;\n\n    public onChange = sfpState => {\n        this.props.onChange({\n            data: sfpState.data,\n            isValid: sfpState.isSfpValid\n        });\n    };\n\n    public showValidation = () => {\n        this.sfp.showValidation();\n    };\n\n    setStatus(status) {\n        this.setState({ status });\n    }\n\n    public handleFocus = e => {\n        this.setState({ focusedElement: e.currentFocusObject });\n\n        const isFocused = e.focus === true;\n        if (isFocused) {\n            this.props.onFocus(e);\n        } else {\n            this.props.onBlur(e);\n        }\n    };\n\n    public setBalance = ({ balance, transactionLimit }) => {\n        this.setState({ balance, transactionLimit });\n    };\n\n    render(props, { focusedElement, balance, transactionLimit }) {\n        const { i18n } = useCoreContext();\n\n        const transactionAmount = transactionLimit?.value < balance?.value ? transactionLimit : balance;\n        const hasEnoughBalance = transactionAmount?.value >= this.props.amount?.value;\n\n        if (transactionAmount && hasEnoughBalance) {\n            return (\n                <GiftcardResult\n                    amount={this.props.amount}\n                    balance={balance}\n                    transactionLimit={transactionLimit}\n                    makePayment={props.makePayment}\n                    status={this.state.status}\n                    showPayButton={this.props.showPayButton}\n                    payButton={this.props.payButton}\n                />\n            );\n        }\n\n        const getCardErrorMessage = sfpState => {\n            if (sfpState.errors.encryptedCardNumber) return i18n.get(sfpState.errors.encryptedCardNumber);\n\n            switch (this.state.status) {\n                case 'no-balance':\n                    return i18n.get('error.giftcard.no-balance');\n                case 'card-error':\n                    return i18n.get('error.giftcard.card-error');\n                case 'currency-error':\n                    return i18n.get('error.giftcard.currency-error');\n                default:\n                    return null;\n            }\n        };\n\n        return (\n            <div className=\"adyen-checkout__giftcard\">\n                {this.state.status === 'error' && <Alert icon={'cross'}>{i18n.get('error.message.unknown')}</Alert>}\n\n                <SecuredFieldsProvider\n                    {...this.props}\n                    ref={ref => {\n                        this.sfp = ref;\n                    }}\n                    onChange={this.onChange}\n                    onFocus={this.handleFocus}\n                    type={GIFT_CARD}\n                    render={({ setRootNode, setFocusOn }, sfpState) =>\n                        this.props.fieldsLayoutComponent({\n                            i18n: i18n,\n                            pinRequired: this.props.pinRequired,\n                            focusedElement: focusedElement,\n                            getCardErrorMessage: getCardErrorMessage,\n                            setRootNode: setRootNode,\n                            setFocusOn: setFocusOn,\n                            sfpState: sfpState\n                        })\n                    }\n                />\n\n                {this.props.showPayButton &&\n                    this.props.payButton({\n                        status: this.state.status,\n                        onClick: this.props.makeBalanceCheck,\n                        label: i18n.get('applyGiftcard')\n                    })}\n            </div>\n        );\n    }\n}\n\nexport default Giftcard;\n"],"names":["Giftcard","Component","setStatus","status","this","setState","render","props","focusedElement","balance","transactionLimit","i18n","useCoreContext","transactionAmount","value","hasEnoughBalance","amount","h","GiftcardResult","makePayment","state","showPayButton","payButton","getCardErrorMessage","sfpState","errors","encryptedCardNumber","get","div","className","Alert","icon","SecuredFieldsProvider","ref","sfp","onChange","onFocus","handleFocus","type","GIFT_CARD","setRootNode","setFocusOn","fieldsLayoutComponent","pinRequired","onClick","makeBalanceCheck","label","super","args","_define_property","data","isValid","isSfpValid","showValidation","e","currentFocusObject","focus","onBlur","setBalance","defaultProps","expiryDateRequired","GiftCardFields"],"mappings":"8iBA6BA,MAAMA,UAAiBC,EAgCnBC,SAAAA,CAAUC,GACNC,KAAKC,SAAS,CAAEF,UACpB,CAiBAG,MAAAA,CAAOC,GAAOC,eAAEA,EAAcC,QAAEA,EAAOC,iBAAEA,IACrC,MAAMC,KAAEA,GAASC,IAEXC,EAAoBH,GAAkBI,MAAQL,GAASK,MAAQJ,EAAmBD,EAClFM,EAAmBF,GAAmBC,OAASV,KAAKG,MAAMS,QAAQF,MAExE,GAAID,GAAqBE,EACrB,OACIE,EAACC,EAAAA,CACGF,OAAQZ,KAAKG,MAAMS,OACnBP,QAASA,EACTC,iBAAkBA,EAClBS,YAAaZ,EAAMY,YACnBhB,OAAQC,KAAKgB,MAAMjB,OACnBkB,cAAejB,KAAKG,MAAMc,cAC1BC,UAAWlB,KAAKG,MAAMe,YAKlC,MAAMC,EAAsBC,IACxB,GAAIA,EAASC,OAAOC,oBAAqB,OAAOf,EAAKgB,IAAIH,EAASC,OAAOC,qBAEzE,OAAQtB,KAAKgB,MAAMjB,QACf,IAAK,aACD,OAAOQ,EAAKgB,IAAI,6BACpB,IAAK,aACD,OAAOhB,EAAKgB,IAAI,6BACpB,IAAK,iBACD,OAAOhB,EAAKgB,IAAI,iCACpB,QACI,OAAO,KACf,EAGJ,OACIV,EAACW,MAAAA,CAAIC,UAAU,4BACY,UAAtBzB,KAAKgB,MAAMjB,QAAsBc,EAACa,EAAAA,CAAMC,KAAM,SAAUpB,EAAKgB,IAAI,0BAElEV,EAACe,EAAAA,IACO5B,KAAKG,MACT0B,IAAKA,IACD7B,KAAK8B,IAAMD,CAAAA,EAEfE,SAAU/B,KAAK+B,SACfC,QAAShC,KAAKiC,YACdC,KAAMC,EACNjC,OAAQ,EAAGkC,cAAaC,cAAcjB,IAClCpB,KAAKG,MAAMmC,sBAAsB,CAC7B/B,KAAMA,EACNgC,YAAavC,KAAKG,MAAMoC,YACxBnC,eAAgBA,EAChBe,oBAAqBA,EACrBiB,YAAaA,EACbC,WAAYA,EACZjB,SAAUA,MAKrBpB,KAAKG,MAAMc,eACRjB,KAAKG,MAAMe,UAAU,CACjBnB,OAAQC,KAAKgB,MAAMjB,OACnByC,QAASxC,KAAKG,MAAMsC,iBACpBC,MAAOnC,EAAKgB,IAAI,mBAIpC,mBAvHJoB,SAAAC,GACIC,OAAO7B,QAAQ,CACXjB,OAAQ,QACR+C,KAAM,CAAC,EACPzC,QAAS,KACTC,iBAAkB,KAClBF,gBAAgB,EAChB2C,SAAS,IAYbF,OAAOf,WAAP,GAEAe,EAAA7C,KAAO+B,YAAWX,IACdpB,KAAKG,MAAM4B,SAAS,CAChBe,KAAM1B,EAAS0B,KACfC,QAAS3B,EAAS4B,YACtB,IAGJH,OAAOI,kBAAiB,KACpBjD,KAAK8B,IAAImB,gBAAc,IAO3BJ,EAAA7C,KAAOiC,eAAciB,IACjBlD,KAAKC,SAAS,CAAEG,eAAgB8C,EAAEC,sBAEJ,IAAZD,EAAEE,MAEhBpD,KAAKG,MAAM6B,QAAQkB,GAEnBlD,KAAKG,MAAMkD,OAAOH,EACtB,IAGJL,OAAOS,cAAa,EAAGjD,UAASC,uBAC5BN,KAAKC,SAAS,CAAEI,UAASC,oBAAiB,KAtC9CuC,EAVEjD,EAUY2D,eAAe,CACzBhB,aAAa,EACbiB,oBAAoB,EACpBzB,SAAU,OACVC,QAAS,OACTqB,OAAQ,OACRf,sBAAuBmB"}