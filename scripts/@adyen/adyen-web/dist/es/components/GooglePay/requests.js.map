{"version":3,"file":"requests.js","sources":["../../../../src/components/GooglePay/requests.ts"],"sourcesContent":["import { getDecimalAmount } from '../../utils/amount-util';\nimport config from './config';\nimport { GooglePaymentDataRequest, GooglePayConfiguration } from './types';\n\n/**\n * Configure your site's support for payment methods supported by the Google Pay API.\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/object#IsReadyToPayRequest|isReadyToPayRequest}\n * @returns Google Pay API version, payment methods supported by the site\n */\nexport function isReadyToPayRequest({\n    allowedAuthMethods,\n    allowedCardNetworks,\n    existingPaymentMethodRequired = false\n}: Pick<\n    GooglePayConfiguration,\n    'allowedAuthMethods' | 'allowedCardNetworks' | 'existingPaymentMethodRequired'\n>): google.payments.api.IsReadyToPayRequest {\n    return {\n        apiVersion: config.API_VERSION,\n        apiVersionMinor: config.API_VERSION_MINOR,\n        allowedPaymentMethods: [\n            {\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods,\n                    allowedCardNetworks\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {}\n                }\n            }\n        ],\n        existingPaymentMethodRequired\n    };\n}\n\n/**\n * Provide Google Pay API with a payment amount, currency, and amount status\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/object#TransactionInfo|TransactionInfo}\n * @returns transaction info, suitable for use as transactionInfo property of PaymentDataRequest\n */\nexport function getTransactionInfo({\n    amount,\n    countryCode = 'US',\n    totalPriceStatus = 'FINAL',\n    ...props\n}: GooglePayConfiguration): google.payments.api.TransactionInfo {\n    const formattedPrice = String(getDecimalAmount(amount.value, amount.currency));\n\n    return {\n        countryCode,\n        currencyCode: amount.currency,\n        totalPrice: formattedPrice,\n        totalPriceStatus: totalPriceStatus,\n        ...props.transactionInfo\n    };\n}\n\nexport function initiatePaymentRequest({ configuration, ...props }: GooglePayConfiguration, countryCode: string): GooglePaymentDataRequest {\n    return {\n        apiVersion: config.API_VERSION,\n        apiVersionMinor: config.API_VERSION_MINOR,\n        transactionInfo: getTransactionInfo({ countryCode, ...props }),\n        merchantInfo: {\n            merchantId: configuration.merchantId,\n            merchantName: configuration.merchantName,\n            ...(configuration.merchantOrigin ? { merchantOrigin: configuration.merchantOrigin } : {}),\n            ...(configuration.authJwt ? { authJwt: configuration.authJwt } : {})\n        },\n        allowedPaymentMethods: [\n            {\n                type: 'CARD',\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: config.GATEWAY,\n                        gatewayMerchantId: configuration.gatewayMerchantId\n                    }\n                },\n                parameters: {\n                    allowedAuthMethods: props.allowedAuthMethods,\n                    allowedCardNetworks: props.allowedCardNetworks,\n                    assuranceDetailsRequired: props.assuranceDetailsRequired,\n                    allowPrepaidCards: props.allowPrepaidCards,\n                    allowCreditCards: props.allowCreditCards,\n                    billingAddressRequired: props.billingAddressRequired,\n                    billingAddressParameters: props.billingAddressParameters\n                }\n            }\n        ],\n        emailRequired: props.emailRequired,\n        shippingAddressRequired: props.shippingAddressRequired,\n        shippingAddressParameters: props.shippingAddressParameters,\n        shippingOptionRequired: props.shippingOptionRequired,\n        shippingOptionParameters: props.shippingOptionParameters,\n        callbackIntents: props.callbackIntents\n    };\n}\n"],"names":["isReadyToPayRequest","allowedAuthMethods","allowedCardNetworks","existingPaymentMethodRequired","apiVersion","config","API_VERSION","apiVersionMinor","API_VERSION_MINOR","allowedPaymentMethods","type","parameters","tokenizationSpecification","getTransactionInfo","amount","countryCode","totalPriceStatus","props","formattedPrice","String","getDecimalAmount","value","currency","currencyCode","totalPrice","transactionInfo","initiatePaymentRequest","configuration","merchantInfo","merchantId","merchantName","merchantOrigin","authJwt","gateway","GATEWAY","gatewayMerchantId","assuranceDetailsRequired","allowPrepaidCards","allowCreditCards","billingAddressRequired","billingAddressParameters","emailRequired","shippingAddressRequired","shippingAddressParameters","shippingOptionRequired","shippingOptionParameters","callbackIntents"],"mappings":"yFAUO,SAASA,GAAoBC,mBAChCA,EAAkBC,oBAClBA,EAAmBC,8BACnBA,GAAgC,IAKhC,MAAO,CACHC,WAAYC,EAAOC,YACnBC,gBAAiBF,EAAOG,kBACxBC,sBAAuB,CACnB,CACIC,KAAM,OACNC,WAAY,CACRV,qBACAC,uBAEJU,0BAA2B,CACvBF,KAAM,kBACNC,WAAY,CAAA,KAIxBR,gCAER,CAQO,SAASU,GAAmBC,OAC/BA,EAAMC,YACNA,EAAc,KAAIC,iBAClBA,EAAmB,WAChBC,IAEH,MAAMC,EAAiBC,OAAOC,EAAiBN,EAAOO,MAAOP,EAAOQ,WAEpE,MAAO,CACHP,cACAQ,aAAcT,EAAOQ,SACrBE,WAAYN,EACZF,iBAAkBA,KACfC,EAAMQ,gBAEjB,CAEO,SAASC,GAAuBC,cAAEA,KAAkBV,GAAiCF,GACxF,MAAO,CACHX,WAAYC,EAAOC,YACnBC,gBAAiBF,EAAOG,kBACxBiB,gBAAiBZ,EAAmB,CAAEE,iBAAgBE,IACtDW,aAAc,CACVC,WAAYF,EAAcE,WAC1BC,aAAcH,EAAcG,gBACxBH,EAAcI,eAAiB,CAAEA,eAAgBJ,EAAcI,gBAAmB,CAAE,KACpFJ,EAAcK,QAAU,CAAEA,QAASL,EAAcK,SAAY,CAAA,GAErEvB,sBAAuB,CACnB,CACIC,KAAM,OACNE,0BAA2B,CACvBF,KAAM,kBACNC,WAAY,CACRsB,QAAS5B,EAAO6B,QAChBC,kBAAmBR,EAAcQ,oBAGzCxB,WAAY,CACRV,mBAAoBgB,EAAMhB,mBAC1BC,oBAAqBe,EAAMf,oBAC3BkC,yBAA0BnB,EAAMmB,yBAChCC,kBAAmBpB,EAAMoB,kBACzBC,iBAAkBrB,EAAMqB,iBACxBC,uBAAwBtB,EAAMsB,uBAC9BC,yBAA0BvB,EAAMuB,4BAI5CC,cAAexB,EAAMwB,cACrBC,wBAAyBzB,EAAMyB,wBAC/BC,0BAA2B1B,EAAM0B,0BACjCC,uBAAwB3B,EAAM2B,uBAC9BC,yBAA0B5B,EAAM4B,yBAChCC,gBAAiB7B,EAAM6B,gBAE/B"}