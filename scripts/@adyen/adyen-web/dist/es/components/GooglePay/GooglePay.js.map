{"version":3,"file":"GooglePay.js","sources":["../../../../src/components/GooglePay/GooglePay.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport GooglePayService from './GooglePayService';\nimport GooglePayButton from './components/GooglePayButton';\nimport defaultProps from './defaultProps';\nimport { formatGooglePayContactToAdyenAddressFormat, getGooglePayLocale } from './utils';\nimport collectBrowserInfo from '../../utils/browserInfo';\nimport AdyenCheckoutError from '../../core/Errors/AdyenCheckoutError';\nimport { TxVariants } from '../tx-variants';\nimport { sanitizeResponse, verifyPaymentDidNotFail } from '../internal/UIElement/utils';\nimport {\n    ANALYTICS_EXPRESS_PAGES_ARRAY,\n    ANALYTICS_INSTANT_PAYMENT_BUTTON,\n    ANALYTICS_RENDERED_STR,\n    ANALYTICS_SELECTED_STR\n} from '../../core/Analytics/constants';\n\nimport type { AddressData, BrowserInfo, PaymentMethod, PaymentResponseData, RawPaymentResponse } from '../../types/global-types';\nimport type { GooglePayConfiguration } from './types';\nimport type { ICore } from '../../core/types';\nimport { AnalyticsInfoEvent } from '../../core/Analytics/AnalyticsInfoEvent';\nimport { AnalyticsEvent } from '../../core/Analytics/AnalyticsEvent';\n\nclass GooglePay extends UIElement<GooglePayConfiguration> {\n    public static type = TxVariants.googlepay;\n    public static txVariants = [TxVariants.googlepay, TxVariants.paywithgoogle];\n    public static defaultProps = defaultProps;\n\n    protected readonly googlePay;\n\n    constructor(checkout: ICore, props?: GooglePayConfiguration) {\n        super(checkout, props);\n        this.handleAuthorization = this.handleAuthorization.bind(this);\n        this.showGooglePayPaymentSheet = this.showGooglePayPaymentSheet.bind(this);\n\n        const { isExpress, paymentDataCallbacks } = this.props;\n\n        if (isExpress === false && paymentDataCallbacks?.onPaymentDataChanged) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'GooglePay - You must set \"isExpress\" flag to \"true\" in order to use \"onPaymentDataChanged\" callback'\n            );\n        }\n\n        if (!this.props.configuration.merchantId) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'GooglePay - Missing merchantId. Please ensure that it is correctly configured in your customer area.'\n            );\n        }\n\n        this.googlePay = new GooglePayService(this.props.environment, {\n            ...(isExpress && paymentDataCallbacks?.onPaymentDataChanged && { onPaymentDataChanged: paymentDataCallbacks.onPaymentDataChanged }),\n            onPaymentAuthorized: this.onPaymentAuthorized\n        });\n    }\n\n    /**\n     * Google Pay requires custom logic due to supporting two Tx variants that lead to the same payment method.\n     * If the merchant creates a standalone Google Pay component, we need to verify if the payment method is available using both tx variants\n     *\n     * @param type\n     * @returns\n     */\n    protected override getPaymentMethodFromPaymentMethodsResponse(type?: string): PaymentMethod {\n        return (\n            this.core.paymentMethodsResponse.find(type || this.constructor['type']) || this.core.paymentMethodsResponse.find(TxVariants.paywithgoogle)\n        );\n    }\n\n    protected override formatProps(props): GooglePayConfiguration {\n        const buttonSizeMode = props.buttonSizeMode ?? (props.isDropin ? 'fill' : 'static');\n        const buttonLocale = getGooglePayLocale(props.buttonLocale ?? props.i18n?.locale);\n\n        const callbackIntents: google.payments.api.CallbackIntent[] = [...props.callbackIntents, 'PAYMENT_AUTHORIZATION'];\n\n        return {\n            ...props,\n            configuration: props.configuration,\n            buttonSizeMode,\n            buttonLocale,\n            callbackIntents\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    protected override formatData() {\n        const { googlePayCardNetwork, googlePayToken, billingAddress, deliveryAddress } = this.state;\n        const { isExpress } = this.props;\n\n        return {\n            paymentMethod: {\n                type: this.type,\n                googlePayCardNetwork,\n                googlePayToken,\n                ...(isExpress && { subtype: 'express' })\n            },\n            browserInfo: this.browserInfo,\n            origin: !!window && window.location.origin,\n            ...(billingAddress && { billingAddress }),\n            ...(deliveryAddress && { deliveryAddress })\n        };\n    }\n\n    protected submitAnalytics(analyticsObj: AnalyticsEvent) {\n        // Analytics will need to know about this.props.isExpress & this.props.expressPage\n        if (analyticsObj instanceof AnalyticsInfoEvent && analyticsObj.type === ANALYTICS_RENDERED_STR) {\n            const { isExpress, expressPage } = this.props;\n            const hasExpressPage = expressPage && ANALYTICS_EXPRESS_PAGES_ARRAY.includes(expressPage);\n\n            if (typeof isExpress === 'boolean') {\n                analyticsObj.isExpress = isExpress;\n            }\n\n            if (isExpress === true && hasExpressPage) {\n                analyticsObj.expressPage = expressPage; // We only care about the expressPage value if isExpress is true\n            }\n        }\n\n        super.submitAnalytics(analyticsObj);\n    }\n\n    /**\n     * Displays the Google Pay payment sheet overlay\n     */\n    private showGooglePayPaymentSheet() {\n        this.googlePay.initiatePayment(this.props, this.core.options.countryCode).catch((error: google.payments.api.PaymentsError) => {\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\n            this.handleError(new AdyenCheckoutError(error.statusCode === 'CANCELED' ? 'CANCEL' : 'ERROR', error.toString(), { cause: error }));\n        });\n    }\n\n    public override submit = () => {\n        if (this.props.isInstantPayment) {\n            const event = new AnalyticsInfoEvent({\n                type: ANALYTICS_SELECTED_STR,\n                target: ANALYTICS_INSTANT_PAYMENT_BUTTON\n            });\n\n            this.submitAnalytics(event);\n        }\n\n        new Promise<void>((resolve, reject) => this.props.onClick(resolve, reject)).then(this.showGooglePayPaymentSheet).catch(() => {\n            // Swallow exception triggered by onClick reject\n        });\n    };\n\n    /**\n     * Method called when the payment is authorized in the payment sheet\n     *\n     * @see https://developers.google.com/pay/api/web/reference/client#onPaymentAuthorized\n     **/\n    private onPaymentAuthorized = async (paymentData: google.payments.api.PaymentData): Promise<google.payments.api.PaymentAuthorizationResult> => {\n        const billingAddress: AddressData = formatGooglePayContactToAdyenAddressFormat(paymentData.paymentMethodData.info.billingAddress);\n        const deliveryAddress: AddressData = formatGooglePayContactToAdyenAddressFormat(paymentData.shippingAddress, true);\n\n        this.setState({\n            authorizedEvent: paymentData,\n            googlePayToken: paymentData.paymentMethodData.tokenizationData.token,\n            googlePayCardNetwork: paymentData.paymentMethodData.info.cardNetwork,\n            ...(billingAddress && { billingAddress }),\n            ...(deliveryAddress && { deliveryAddress })\n        });\n\n        return new Promise<google.payments.api.PaymentAuthorizationResult>(resolve => {\n            this.handleAuthorization()\n                .then(this.makePaymentsCall)\n                .then(sanitizeResponse)\n                .then(verifyPaymentDidNotFail)\n                .then((paymentResponse: PaymentResponseData) => {\n                    resolve({ transactionState: 'SUCCESS' });\n                    return paymentResponse;\n                })\n                .then(paymentResponse => {\n                    this.handleResponse(paymentResponse);\n                })\n                .catch((paymentResponse?: RawPaymentResponse) => {\n                    this.setElementStatus('ready');\n\n                    const googlePayError = paymentResponse?.error?.googlePayError;\n                    const fallbackMessage = this.props.i18n.get('error.subtitle.payment');\n\n                    const error: google.payments.api.PaymentDataError =\n                        typeof googlePayError === 'string' || undefined\n                            ? {\n                                  intent: 'PAYMENT_AUTHORIZATION',\n                                  reason: 'OTHER_ERROR',\n                                  message: (googlePayError as string) || fallbackMessage\n                              }\n                            : {\n                                  intent: googlePayError?.intent || 'PAYMENT_AUTHORIZATION',\n                                  reason: googlePayError?.reason || 'OTHER_ERROR',\n                                  message: googlePayError?.message || fallbackMessage\n                              };\n\n                    resolve({\n                        transactionState: 'ERROR',\n                        error\n                    });\n\n                    const responseWithError = {\n                        ...paymentResponse,\n                        error: {\n                            googlePayError: error\n                        }\n                    };\n\n                    this.handleFailedResult(responseWithError);\n                });\n        });\n    };\n\n    /**\n     * Call the 'onAuthorized' callback if available.\n     * Must be resolved/reject for the payment flow to continue\n     */\n    private async handleAuthorization(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this.props.onAuthorized) {\n                resolve();\n            }\n\n            const { authorizedEvent, billingAddress, deliveryAddress } = this.state;\n\n            this.props.onAuthorized(\n                {\n                    authorizedEvent,\n                    ...(billingAddress && { billingAddress }),\n                    ...(deliveryAddress && { deliveryAddress })\n                },\n                { resolve, reject }\n            );\n        }).catch((error?: google.payments.api.PaymentDataError | string) => {\n            // Format error in a way that the 'catch' of the 'onPaymentAuthorize' block accepts it\n            const data = { error: { googlePayError: error } };\n            return Promise.reject(data);\n        });\n    }\n\n    public get isValid(): boolean {\n        return true;\n    }\n\n    /**\n     * Determine a shopper's ability to return a form of payment from the Google Pay API.\n     */\n    public override async isAvailable(): Promise<void> {\n        return this.isReadyToPay()\n            .then(response => {\n                if (!response.result) {\n                    throw new AdyenCheckoutError('ERROR', 'GooglePay is not available');\n                }\n\n                if (response.paymentMethodPresent === false) {\n                    throw new AdyenCheckoutError('ERROR', 'GooglePay - No paymentMethodPresent');\n                }\n\n                return Promise.resolve();\n            })\n            .catch(error => {\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Determine a shopper's ability to return a form of payment from the Google Pay API.\n     */\n    public isReadyToPay = (): Promise<google.payments.api.IsReadyToPayResponse> => {\n        return this.googlePay.isReadyToPay(this.props);\n    };\n\n    /**\n     * Use this method to prefetch a PaymentDataRequest configuration to improve loadPaymentData execution time on later user interaction. No value is returned.\n     */\n    public prefetch = (): void => {\n        return this.googlePay.prefetchPaymentData(this.props, this.core.options.countryCode);\n    };\n\n    get browserInfo(): BrowserInfo {\n        return collectBrowserInfo();\n    }\n\n    get icon(): string {\n        return this.props.icon ?? this.resources.getImage()('googlepay');\n    }\n\n    render() {\n        if (this.props.showPayButton) {\n            return (\n                <GooglePayButton\n                    buttonColor={this.props.buttonColor}\n                    buttonType={this.props.buttonType}\n                    buttonSizeMode={this.props.buttonSizeMode}\n                    buttonLocale={this.props.buttonLocale}\n                    buttonRootNode={this.props.buttonRootNode}\n                    buttonRadius={this.props.buttonRadius}\n                    paymentsClient={this.googlePay.paymentsClient}\n                    onClick={this.submit}\n                />\n            );\n        }\n\n        return null;\n    }\n}\n\nexport default GooglePay;\n"],"names":["GooglePay","UIElement","getPaymentMethodFromPaymentMethodsResponse","type","this","core","paymentMethodsResponse","find","constructor","TxVariants","paywithgoogle","formatProps","props","buttonSizeMode","isDropin","buttonLocale","getGooglePayLocale","i18n","locale","callbackIntents","configuration","formatData","googlePayCardNetwork","googlePayToken","billingAddress","deliveryAddress","state","isExpress","paymentMethod","subtype","browserInfo","origin","window","location","submitAnalytics","analyticsObj","AnalyticsInfoEvent","ANALYTICS_RENDERED_STR","expressPage","hasExpressPage","ANALYTICS_EXPRESS_PAGES_ARRAY","includes","super","showGooglePayPaymentSheet","googlePay","initiatePayment","options","countryCode","catch","error","handleError","AdyenCheckoutError","statusCode","toString","cause","handleAuthorization","Promise","resolve","reject","onAuthorized","authorizedEvent","data","googlePayError","isValid","isAvailable","isReadyToPay","then","response","result","paymentMethodPresent","collectBrowserInfo","icon","resources","getImage","render","showPayButton","h","GooglePayButton","buttonColor","buttonType","buttonRootNode","buttonRadius","paymentsClient","onClick","submit","checkout","_define_property","isInstantPayment","event","ANALYTICS_SELECTED_STR","target","ANALYTICS_INSTANT_PAYMENT_BUTTON","onPaymentAuthorized","async","paymentData","formatGooglePayContactToAdyenAddressFormat","paymentMethodData","info","shippingAddress","setState","tokenizationData","token","cardNetwork","makePaymentsCall","sanitizeResponse","verifyPaymentDidNotFail","paymentResponse","transactionState","handleResponse","setElementStatus","fallbackMessage","get","intent","reason","message","responseWithError","handleFailedResult","prefetch","prefetchPaymentData","bind","paymentDataCallbacks","onPaymentDataChanged","merchantId","GooglePayService","environment","googlepay","txVariants","defaultProps"],"mappings":"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"}