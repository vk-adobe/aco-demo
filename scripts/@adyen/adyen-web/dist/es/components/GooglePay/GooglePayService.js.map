{"version":3,"file":"GooglePayService.js","sources":["../../../../src/components/GooglePay/GooglePayService.ts"],"sourcesContent":["import { isReadyToPayRequest, initiatePaymentRequest } from './requests';\nimport { resolveEnvironment } from './utils';\nimport Script from '../../utils/Script';\nimport config from './config';\nimport type { GooglePayConfiguration } from './types';\n\nclass GooglePayService {\n    public readonly paymentsClient: Promise<google.payments.api.PaymentsClient>;\n\n    constructor(environment: string, paymentDataCallbacks: google.payments.api.PaymentDataCallbacks) {\n        const googlePayEnvironment = resolveEnvironment(environment);\n\n        this.paymentsClient = this.getGooglePaymentsClient({\n            environment: googlePayEnvironment,\n            paymentDataCallbacks\n        });\n    }\n\n    /**\n     * Initialize a Google Pay API client\n     *\n     * @see {@link https://developers.google.com/pay/api/web/reference/client#PaymentsClient|PaymentsClient constructor}\n     * @returns Google Pay API client\n     */\n    async getGooglePaymentsClient(paymentOptions: google.payments.api.PaymentOptions): Promise<google.payments.api.PaymentsClient> {\n        if (!window.google?.payments) {\n            const script = new Script(config.URL);\n            await script.load();\n        }\n\n        return new google.payments.api.PaymentsClient(paymentOptions);\n    }\n\n    /**\n     * Determine a shopper's ability to return a form of payment from the Google Pay API.\n     * @see {@link https://developers.google.com/pay/api/web/reference/client#isReadyToPay|isReadyToPay}\n     */\n    isReadyToPay(props): Promise<google.payments.api.IsReadyToPayResponse> {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        if (!this.paymentsClient) return Promise.reject(new Error('Google Pay is not available'));\n\n        return this.paymentsClient.then(client => client.isReadyToPay(isReadyToPayRequest(props)));\n    }\n\n    prefetchPaymentData(props: GooglePayConfiguration, countryCode: string): void {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        if (!this.paymentsClient) throw new Error('Google Pay is not available');\n\n        const paymentDataRequest = initiatePaymentRequest(props, countryCode);\n        void this.paymentsClient.then(client => client.prefetchPaymentData(paymentDataRequest));\n    }\n\n    /**\n     * Show Google Pay payment sheet when Google Pay payment button is clicked\n     * @returns paymentData response from Google Pay API after user approves payment\n     * @see {@link https://developers.google.com/pay/api/web/reference/object#PaymentData|PaymentData object reference}\n     */\n    initiatePayment(props: GooglePayConfiguration, countryCode: string): Promise<google.payments.api.PaymentData> {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        if (!this.paymentsClient) throw new Error('Google Pay is not available');\n\n        const paymentDataRequest = initiatePaymentRequest(props, countryCode);\n        return this.paymentsClient.then(client => client.loadPaymentData(paymentDataRequest));\n    }\n}\n\nexport default GooglePayService;\n"],"names":["GooglePayService","getGooglePaymentsClient","paymentOptions","window","google","payments","script","Script","config","URL","load","api","PaymentsClient","isReadyToPay","props","this","paymentsClient","then","client","isReadyToPayRequest","Promise","reject","Error","prefetchPaymentData","countryCode","paymentDataRequest","initiatePaymentRequest","initiatePayment","loadPaymentData","constructor","environment","paymentDataCallbacks","googlePayEnvironment","resolveEnvironment"],"mappings":"gMAMA,MAAMA,EAkBF,6BAAMC,CAAwBC,GAC1B,IAAKC,OAAOC,QAAQC,SAAU,CAC1B,MAAMC,EAAS,IAAIC,EAAOC,EAAOC,WAC3BH,EAAOI,MACjB,CAEA,OAAO,IAAIN,OAAOC,SAASM,IAAIC,eAAeV,EAClD,CAMAW,YAAAA,CAAaC,GAET,OAAKC,KAAKC,eAEHD,KAAKC,eAAeC,MAAKC,GAAUA,EAAOL,aAAaM,EAAoBL,MAFjDM,QAAQC,OAAO,IAAIC,MAAM,+BAG9D,CAEAC,mBAAAA,CAAoBT,EAA+BU,GAE/C,IAAKT,KAAKC,eAAgB,MAAM,IAAIM,MAAM,+BAE1C,MAAMG,EAAqBC,EAAuBZ,EAAOU,GACpDT,KAAKC,eAAeC,MAAKC,GAAUA,EAAOK,oBAAoBE,IACvE,CAOAE,eAAAA,CAAgBb,EAA+BU,GAE3C,IAAKT,KAAKC,eAAgB,MAAM,IAAIM,MAAM,+BAE1C,MAAMG,EAAqBC,EAAuBZ,EAAOU,GACzD,OAAOT,KAAKC,eAAeC,MAAKC,GAAUA,EAAOU,gBAAgBH,IACrE,CAtDAI,WAAAA,CAAYC,EAAqBC,oBAFjC,KAAgBf,sBAAhBD,4FAGI,MAAMiB,EAAuBC,EAAmBH,GAEhDf,KAAKC,eAAiBD,KAAKd,wBAAwB,CAC/C6B,YAAaE,EACbD,wBAER"}