{"version":3,"file":"PaymentMethodList.js","sources":["../../../../../../src/components/Dropin/components/PaymentMethod/PaymentMethodList.tsx"],"sourcesContent":["import { Fragment, h } from 'preact';\nimport getProp from '../../../../utils/getProp';\nimport UIElement from '../../../internal/UIElement/UIElement';\nimport { Order, OrderStatus } from '../../../../types/global-types';\nimport OrderPaymentMethods from './OrderPaymentMethods';\nimport InstantPaymentMethods from './InstantPaymentMethods';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport { useBrandLogoConfiguration } from './useBrandLogoConfiguration';\nimport PaymentMethodsContainer, { PaymentMethodsContainerProps } from './PaymentMethodsContainer';\nimport { useEffect } from 'preact/hooks';\n\ninterface PaymentMethodListProps extends Omit<PaymentMethodsContainerProps, 'label' | 'classNameModifiers'> {\n    instantPaymentMethods?: UIElement[];\n    storedPaymentMethods?: UIElement[];\n    openFirstStoredPaymentMethod?: boolean;\n    openFirstPaymentMethod?: boolean;\n    openPaymentMethod?: {\n        type: string;\n    };\n    order?: Order;\n    orderStatus?: OrderStatus;\n    onOrderCancel?: (order) => void;\n}\n\nconst PaymentMethodList = ({\n    paymentMethods,\n    instantPaymentMethods,\n    storedPaymentMethods,\n    openFirstStoredPaymentMethod,\n    openFirstPaymentMethod,\n    openPaymentMethod,\n    order,\n    orderStatus = null,\n    onOrderCancel,\n    onSelect = () => {},\n    ...rest\n}: PaymentMethodListProps) => {\n    const { i18n } = useCoreContext();\n    const brandLogoConfiguration = useBrandLogoConfiguration(paymentMethods);\n    const hasInstantPaymentMethods = instantPaymentMethods?.length > 0;\n    const hasStoredPaymentMethods = storedPaymentMethods?.length > 0;\n    const pmListLabel = hasInstantPaymentMethods || hasStoredPaymentMethods ? i18n.get('paymentMethodsList.otherPayments.label') : '';\n\n    useEffect(() => {\n        if (openPaymentMethod?.type) {\n            const paymentMethod = paymentMethods?.find(paymentMethod => paymentMethod.type === openPaymentMethod?.type);\n            if (!paymentMethod) {\n                console.warn(`Drop-in: payment method type \"${openPaymentMethod?.type}\" not found`);\n            } else {\n                onSelect(paymentMethod);\n                return;\n            }\n        }\n\n        // Open first PaymentMethodItem\n        const firstStoredPayment = storedPaymentMethods?.[0];\n        const firstNonStoredPayment = paymentMethods?.[0];\n\n        if (firstStoredPayment || firstNonStoredPayment) {\n            const shouldOpenFirstStored = openFirstStoredPaymentMethod && getProp(firstStoredPayment, 'props.oneClick') === true;\n            if (shouldOpenFirstStored) {\n                onSelect(firstStoredPayment);\n                return;\n            }\n\n            if (openFirstPaymentMethod) {\n                onSelect(firstNonStoredPayment);\n            }\n        }\n    }, [storedPaymentMethods, paymentMethods, openFirstStoredPaymentMethod, openFirstPaymentMethod, openPaymentMethod]);\n\n    return (\n        <Fragment>\n            {orderStatus && (\n                <OrderPaymentMethods\n                    order={order}\n                    orderStatus={orderStatus}\n                    onOrderCancel={onOrderCancel}\n                    brandLogoConfiguration={brandLogoConfiguration}\n                />\n            )}\n\n            {hasInstantPaymentMethods && <InstantPaymentMethods paymentMethods={instantPaymentMethods} onSelect={onSelect} />}\n\n            {hasStoredPaymentMethods && (\n                <PaymentMethodsContainer\n                    {...rest}\n                    label={i18n.get('paymentMethodsList.storedPayments.label')}\n                    classNameModifiers={['storedPayments']}\n                    paymentMethods={storedPaymentMethods}\n                    onSelect={onSelect}\n                ></PaymentMethodsContainer>\n            )}\n\n            {!!paymentMethods.length && (\n                <PaymentMethodsContainer\n                    {...rest}\n                    label={pmListLabel}\n                    classNameModifiers={['otherPayments']}\n                    paymentMethods={paymentMethods}\n                    onSelect={onSelect}\n                ></PaymentMethodsContainer>\n            )}\n        </Fragment>\n    );\n};\n\nexport default PaymentMethodList;\n"],"names":["PaymentMethodList","paymentMethods","instantPaymentMethods","storedPaymentMethods","openFirstStoredPaymentMethod","openFirstPaymentMethod","openPaymentMethod","order","orderStatus","onOrderCancel","onSelect","rest","i18n","useCoreContext","brandLogoConfiguration","useBrandLogoConfiguration","hasInstantPaymentMethods","length","hasStoredPaymentMethods","pmListLabel","get","useEffect","type","paymentMethod","find","console","warn","firstStoredPayment","firstNonStoredPayment","getProp","h","Fragment","OrderPaymentMethods","InstantPaymentMethods","PaymentMethodsContainer","label","classNameModifiers"],"mappings":"2fAwBMA,MAAAA,EAAoB,EACtBC,iBACAC,wBACAC,uBACAC,+BACAC,yBACAC,oBACAC,QACAC,cAAc,KACdC,gBACAC,WAAW,UACRC,MAEH,MAAMC,KAAEA,GAASC,IACXC,EAAyBC,EAA0Bd,GACnDe,EAA2Bd,GAAuBe,OAAS,EAC3DC,EAA0Bf,GAAsBc,OAAS,EACzDE,EAAcH,GAA4BE,EAA0BN,EAAKQ,IAAI,0CAA4C,GA8B/H,OA5BAC,GAAU,KACN,GAAIf,GAAmBgB,KAAM,CACzB,MAAMC,EAAgBtB,GAAgBuB,MAAKD,GAAiBA,EAAcD,OAAShB,GAAmBgB,OACtG,GAAKC,EAID,YADAb,EAASa,GAFTE,QAAQC,KAAK,iCAAiCpB,GAAmBgB,kBAKzE,CAGA,MAAMK,EAAqBxB,IAAuB,GAC5CyB,EAAwB3B,IAAiB,GAE/C,GAAI0B,GAAsBC,EAAuB,CAE7C,GAD8BxB,IAAkF,IAAlDyB,EAAQF,EAAoB,kBAGtF,YADAjB,EAASiB,GAITtB,GACAK,EAASkB,EAEjB,IACD,CAACzB,EAAsBF,EAAgBG,EAA8BC,EAAwBC,IAG5FwB,EAACC,EACIvB,KAAAA,GACGsB,EAACE,EAAAA,CACGzB,MAAOA,EACPC,YAAaA,EACbC,cAAeA,EACfK,uBAAwBA,IAI/BE,GAA4Bc,EAACG,EAAAA,CAAsBhC,eAAgBC,EAAuBQ,SAAUA,IAEpGQ,GACGY,EAACI,EAAAA,IACOvB,EACJwB,MAAOvB,EAAKQ,IAAI,2CAChBgB,mBAAoB,CAAC,kBACrBnC,eAAgBE,EAChBO,SAAUA,MAIfT,EAAegB,QACda,EAACI,EAAAA,IACOvB,EACJwB,MAAOhB,EACPiB,mBAAoB,CAAC,iBACrBnC,eAAgBA,EAChBS,SAAUA"}