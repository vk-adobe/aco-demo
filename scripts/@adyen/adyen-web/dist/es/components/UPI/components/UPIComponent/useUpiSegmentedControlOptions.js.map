{"version":3,"file":"useUpiSegmentedControlOptions.js","sources":["../../../../../../src/components/UPI/components/UPIComponent/useUpiSegmentedControlOptions.ts"],"sourcesContent":["import { useMemo } from 'preact/hooks';\nimport { App, UpiMode } from '../../types';\nimport { A11Y } from './constants';\nimport isMobile from '../../../../utils/isMobile';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport { OldSegmentedControlOption } from '../../../internal/SegmentedControl/SegmentedControl';\n\ninterface SegmentedControlOption extends OldSegmentedControlOption<UpiMode> {}\n\nfunction useUpiSegmentedControlOptions(apps: Array<App>, mode: UpiMode): Array<SegmentedControlOption> {\n    const { i18n } = useCoreContext();\n\n    return useMemo(() => {\n        const intentOption: SegmentedControlOption = {\n            label: i18n.get('upi.mode.payByAnyUpi'),\n            value: 'intent',\n            htmlProps: {\n                id: A11Y.ButtonId.INTENT,\n                'aria-expanded': mode === 'intent',\n                'aria-controls': A11Y.AreaId.INTENT\n            }\n        };\n        const vpaOption: SegmentedControlOption = {\n            label: i18n.get('upi.mode.enterUpiId'),\n            value: 'vpa',\n            htmlProps: {\n                id: A11Y.ButtonId.VPA,\n                'aria-expanded': mode === 'vpa',\n                'aria-controls': A11Y.AreaId.VPA\n            }\n        };\n        const qrOption: SegmentedControlOption = {\n            label: i18n.get('upi.mode.qrCode'),\n            value: 'qrCode',\n            htmlProps: {\n                id: A11Y.ButtonId.QR,\n                'aria-expanded': mode === 'qrCode',\n                'aria-controls': A11Y.AreaId.QR\n            }\n        };\n\n        const shouldShowUpiIntent = apps.length > 0;\n        const positionOfQrOption = isMobile() ? 1 : 0;\n        const segmentedControlOptions = new Array(2).fill(shouldShowUpiIntent ? intentOption : vpaOption);\n        segmentedControlOptions[positionOfQrOption] = qrOption;\n        return segmentedControlOptions;\n    }, [apps, mode]);\n}\n\nexport default useUpiSegmentedControlOptions;\n"],"names":["useUpiSegmentedControlOptions","apps","mode","i18n","useCoreContext","useMemo","intentOption","label","get","value","htmlProps","id","A11Y","ButtonId","INTENT","AreaId","vpaOption","VPA","qrOption","QR","shouldShowUpiIntent","length","positionOfQrOption","isMobile","segmentedControlOptions","Array","fill"],"mappings":"uOASA,SAASA,EAA8BC,EAAkBC,GACrD,MAAMC,KAAEA,GAASC,IAEjB,OAAOC,GAAQ,KACX,MAAMC,EAAuC,CACzCC,MAAOJ,EAAKK,IAAI,wBAChBC,MAAO,SACPC,UAAW,CACPC,GAAIC,EAAKC,SAASC,OAClB,gBAA0B,WAATZ,EACjB,gBAAiBU,EAAKG,OAAOD,SAG/BE,EAAoC,CACtCT,MAAOJ,EAAKK,IAAI,uBAChBC,MAAO,MACPC,UAAW,CACPC,GAAIC,EAAKC,SAASI,IAClB,gBAA0B,QAATf,EACjB,gBAAiBU,EAAKG,OAAOE,MAG/BC,EAAmC,CACrCX,MAAOJ,EAAKK,IAAI,mBAChBC,MAAO,SACPC,UAAW,CACPC,GAAIC,EAAKC,SAASM,GAClB,gBAA0B,WAATjB,EACjB,gBAAiBU,EAAKG,OAAOI,KAI/BC,EAAsBnB,EAAKoB,OAAS,EACpCC,EAAqBC,IAAa,EAAI,EACtCC,EAA0B,IAAIC,MAAM,GAAGC,KAAKN,EAAsBd,EAAeU,GAEvF,OADAQ,EAAwBF,GAAsBJ,EACvCM,CAAAA,GACR,CAACvB,EAAMC,GACd"}