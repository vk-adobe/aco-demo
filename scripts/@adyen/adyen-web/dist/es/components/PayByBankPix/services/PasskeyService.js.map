{"version":3,"file":"PasskeyService.js","sources":["../../../../../src/components/PayByBankPix/services/PasskeyService.ts"],"sourcesContent":["import { PasskeySdkLoader } from './PasskeySdkLoader';\nimport {\n    PasskeyServiceConfig,\n    IPasskeyService,\n    IAdyenPasskey,\n    PasskeyErrorTypes,\n    RiskSignalsEnrollment,\n    RiskSignalsAuthentication,\n    NavigatorCredentialCreationsError,\n    NavigatorCredentialRetrievalError\n} from './types';\nimport AdyenCheckoutError, { SDK_ERROR } from '../../../core/Errors/AdyenCheckoutError';\nimport { DecodeObject } from '../../../types/global-types';\nimport base64 from '../../../utils/base64';\n\nexport class PasskeyService implements IPasskeyService {\n    private passkeySdk: IAdyenPasskey;\n    private readonly passkeyServiceConfig: PasskeyServiceConfig;\n    private riskSignals: RiskSignalsEnrollment | RiskSignalsAuthentication;\n    private initialized: Promise<void>;\n\n    constructor(configuration: PasskeyServiceConfig) {\n        this.passkeyServiceConfig = configuration;\n    }\n\n    get deviceId() {\n        return this.passkeyServiceConfig.deviceId;\n    }\n\n    public async getWebAuthnUnsupportedReason(): Promise<string> {\n        if (!window.PublicKeyCredential) {\n            return 'Browser does not support webauthn';\n        }\n        try {\n            const platformAuthenticatorAvailable = await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n            if (!platformAuthenticatorAvailable) {\n                return 'Device does not have platform authenticator';\n            }\n        } catch (e) {\n            return 'Unknown error';\n        }\n\n        return '';\n    }\n\n    public initialize() {\n        if (this.initialized == null) {\n            this.initialized = new PasskeySdkLoader().load(this.passkeyServiceConfig.environment).then(passkey => {\n                this.passkeySdk = passkey;\n            });\n        }\n\n        return this.initialized;\n    }\n\n    public async captureRiskSignalsEnrollment(): Promise<RiskSignalsEnrollment> {\n        await this.initialized;\n        if (this.riskSignals) {\n            // Cache it so we don't create unnecessary entries in the localstorage by calling captureRiskSignalsEnrollment\n            return this.riskSignals;\n        }\n\n        const result = await this.passkeySdk.captureRiskSignalsEnrollment(this.deviceId);\n        if (result && 'type' in result && result.type === PasskeyErrorTypes.RISK_SIGNALS_ERROR) {\n            throw new AdyenCheckoutError(SDK_ERROR, result.message);\n        }\n        this.riskSignals = result as RiskSignalsEnrollment;\n        return this.riskSignals;\n    }\n\n    public async canUseStoredCredential(): Promise<boolean> {\n        try {\n            await this.captureRiskSignalsAuthentication();\n            return true;\n        } catch (error) {\n            console.warn(\n                `The device is not eligible for stored credential authentication: ${error instanceof Error ? error?.message : 'unknown error'}`\n            );\n            return false;\n        }\n    }\n\n    public async captureRiskSignalsAuthentication(): Promise<RiskSignalsAuthentication> {\n        await this.initialized;\n        const result = await this.passkeySdk.captureRiskSignalsAuthentication(this.deviceId);\n        if (result && 'type' in result && result.type === PasskeyErrorTypes.RISK_SIGNALS_ERROR) {\n            throw new AdyenCheckoutError(SDK_ERROR, result.message);\n        }\n        return result as RiskSignalsAuthentication;\n    }\n\n    public async createCredentialForEnrollment(registrationOptions: string): Promise<string> {\n        await this.initialized;\n        const options = this.decodeJsonBase64(registrationOptions, 'Failed to decode registrationOptions');\n        const result = await this.passkeySdk.createCredentialForEnrollment(options);\n        if (result && 'type' in result && result.type === PasskeyErrorTypes.CREDENTIAL_CREATION_ERROR) {\n            throw new AdyenCheckoutError(SDK_ERROR, (result as NavigatorCredentialCreationsError).message);\n        }\n        return base64.encode(JSON.stringify(result));\n    }\n\n    public async authenticateWithCredential(authenticationOptions: string): Promise<string> {\n        await this.initialized;\n        const options = this.decodeJsonBase64(authenticationOptions, 'Failed to decode authenticationOptions');\n        const result = await this.passkeySdk.authenticateWithCredential(options);\n        if (result && 'type' in result && result.type === PasskeyErrorTypes.CREDENTIAL_RETRIEVAL_ERROR) {\n            throw new AdyenCheckoutError(SDK_ERROR, (result as NavigatorCredentialRetrievalError).message);\n        }\n        return base64.encode(JSON.stringify(result));\n    }\n\n    private decodeJsonBase64(encoded: string, errorMessage: string) {\n        const decoded: DecodeObject = base64.decode(encoded);\n        if (!decoded.success) {\n            throw new AdyenCheckoutError(SDK_ERROR, errorMessage);\n        }\n        return JSON.parse(decoded.data);\n    }\n}\n"],"names":["PasskeyService","deviceId","this","passkeyServiceConfig","getWebAuthnUnsupportedReason","window","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","e","initialize","initialized","PasskeySdkLoader","load","environment","then","passkey","passkeySdk","captureRiskSignalsEnrollment","riskSignals","result","type","PasskeyErrorTypes","RISK_SIGNALS_ERROR","AdyenCheckoutError","SDK_ERROR","message","canUseStoredCredential","captureRiskSignalsAuthentication","error","console","warn","Error","createCredentialForEnrollment","registrationOptions","options","decodeJsonBase64","CREDENTIAL_CREATION_ERROR","base64","encode","JSON","stringify","authenticateWithCredential","authenticationOptions","CREDENTIAL_RETRIEVAL_ERROR","encoded","errorMessage","decoded","decode","success","parse","data","constructor","configuration","_define_property"],"mappings":"kVAeO,MAAMA,EAUT,YAAIC,GACA,OAAOC,KAAKC,qBAAqBF,QACrC,CAEA,kCAAaG,GACT,IAAKC,OAAOC,oBACR,MAAO,oCAEX,IAEI,UAD6CD,OAAOC,oBAAoBC,gDAEpE,MAAO,6CAEf,CAAE,MAAOC,GACL,MAAO,eACX,CAEA,MAAO,EACX,CAEOC,UAAAA,GAOH,OANwB,MAApBP,KAAKQ,cACLR,KAAKQ,aAAc,IAAIC,GAAmBC,KAAKV,KAAKC,qBAAqBU,aAAaC,MAAKC,IACvFb,KAAKc,WAAaD,CAAAA,KAInBb,KAAKQ,WAChB,CAEA,kCAAaO,GAET,SADMf,KAAKQ,YACPR,KAAKgB,YAEL,OAAOhB,KAAKgB,YAGhB,MAAMC,QAAejB,KAAKc,WAAWC,6BAA6Bf,KAAKD,UACvE,GAAIkB,GAAU,SAAUA,GAAUA,EAAOC,OAASC,EAAkBC,mBAChE,MAAM,IAAIC,EAAmBC,EAAWL,EAAOM,SAGnD,OADAvB,KAAKgB,YAAcC,EACZjB,KAAKgB,WAChB,CAEA,4BAAaQ,GACT,IAEI,aADMxB,KAAKyB,oCACJ,CACX,CAAE,MAAOC,GAIL,OAHAC,QAAQC,KACJ,oEAAoEF,aAAiBG,MAAQH,GAAOH,QAAU,oBAE3G,CACX,CACJ,CAEA,sCAAaE,SACHzB,KAAKQ,YACX,MAAMS,QAAejB,KAAKc,WAAWW,iCAAiCzB,KAAKD,UAC3E,GAAIkB,GAAU,SAAUA,GAAUA,EAAOC,OAASC,EAAkBC,mBAChE,MAAM,IAAIC,EAAmBC,EAAWL,EAAOM,SAEnD,OAAON,CACX,CAEA,mCAAaa,CAA8BC,SACjC/B,KAAKQ,YACX,MAAMwB,EAAUhC,KAAKiC,iBAAiBF,EAAqB,wCACrDd,QAAejB,KAAKc,WAAWgB,8BAA8BE,GACnE,GAAIf,GAAU,SAAUA,GAAUA,EAAOC,OAASC,EAAkBe,0BAChE,MAAM,IAAIb,EAAmBC,EAAYL,EAA6CM,SAE1F,OAAOY,EAAOC,OAAOC,KAAKC,UAAUrB,GACxC,CAEA,gCAAasB,CAA2BC,SAC9BxC,KAAKQ,YACX,MAAMwB,EAAUhC,KAAKiC,iBAAiBO,EAAuB,0CACvDvB,QAAejB,KAAKc,WAAWyB,2BAA2BP,GAChE,GAAIf,GAAU,SAAUA,GAAUA,EAAOC,OAASC,EAAkBsB,2BAChE,MAAM,IAAIpB,EAAmBC,EAAYL,EAA6CM,SAE1F,OAAOY,EAAOC,OAAOC,KAAKC,UAAUrB,GACxC,CAEQgB,gBAAAA,CAAiBS,EAAiBC,GACtC,MAAMC,EAAwBT,EAAOU,OAAOH,GAC5C,IAAKE,EAAQE,QACT,MAAM,IAAIzB,EAAmBC,EAAWqB,GAE5C,OAAON,KAAKU,MAAMH,EAAQI,KAC9B,CAhGAC,WAAAA,CAAYC,GALZC,EAAAnD,KAAQc,kBAAR,GACAqC,EAAAnD,KAAiBC,4BAAjB,GACAkD,EAAAnD,KAAQgB,mBAAR,GACAmC,EAAAnD,KAAQQ,mBAAR,GAGIR,KAAKC,qBAAuBiD,CAChC"}