{"version":3,"file":"StoredPayment.js","sources":["../../../../../../src/components/PayByBankPix/components/StoredPayment/StoredPayment.tsx"],"sourcesContent":["import { h, Fragment } from 'preact';\nimport { useState, useEffect, useRef, useCallback } from 'preact/hooks';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport { PaymentProps } from './types';\nimport PaymentDetails from '../../../internal/Voucher';\nimport useImage from '../../../../core/Context/useImage';\nimport PayButton from '../../../internal/PayButton';\nimport './StoredPayment.scss';\nimport getAuthorizationStatus from './getAuthorizationStatus';\nimport PayByBankPixAwait from '../Enrollment/components/PayByBankPixAwait';\n\nfunction StoredPayment({\n    onPay,\n    type,\n    countdownTime,\n    receiver,\n    amount,\n    txVariant,\n    issuer,\n    setComponentRef,\n    enrollmentId,\n    initiationId,\n    clientKey,\n    onAuthorize,\n    onError\n}: PaymentProps) {\n    const { i18n, loadingContext } = useCoreContext();\n    const getImage = useImage();\n    const [status, setStatus] = useState('ready');\n    const [authorizationOptions, setAuthorizationOptions] = useState<string>(null);\n    const buttonModifiers = ['standalone'];\n    const logos = [\n        {\n            name: 'open-finance',\n            alt: i18n.get('paybybankpix.await.logoAlt.openFinance'),\n            src: `${getImage({ parentFolder: `${txVariant}/` })('open-finance')}`\n        }\n    ];\n    const details = [\n        { label: i18n.get('paybybankpix.payment.receiver.label'), value: receiver },\n        { label: i18n.get('paybybankpix.payment.paymentDate.label'), value: i18n.date(new Date().toString()) },\n        { label: i18n.get('paybybankpix.payment.paymentMethod.label'), value: 'Pix Open Finance' }\n    ];\n    const self = useRef({\n        setStatus\n    });\n\n    const pollStatus = useCallback(async () => {\n        if (authorizationOptions) return;\n\n        const response = await getAuthorizationStatus({ enrollmentId, initiationId, clientKey, loadingContext });\n        if (response.authorizationOptions) {\n            setAuthorizationOptions(response.authorizationOptions);\n        }\n\n        return response;\n    }, [authorizationOptions, enrollmentId, initiationId, clientKey, loadingContext]);\n\n    useEffect(() => {\n        setComponentRef(self.current);\n    }, [setComponentRef]);\n\n    useEffect(() => {\n        if (authorizationOptions) {\n            onAuthorize(authorizationOptions);\n        }\n    }, [authorizationOptions]);\n\n    return type === 'await' ? (\n        <PayByBankPixAwait\n            logos={logos}\n            type={txVariant}\n            countdownTime={countdownTime}\n            clientKey={clientKey}\n            onError={onError}\n            awaitText={i18n.get('paybybankpix.await.fetchDetails')}\n            pollStatus={pollStatus}\n        ></PayByBankPixAwait>\n    ) : (\n        <Fragment>\n            <PaymentDetails\n                issuerImageUrl={getImage({ imageFolder: `${txVariant}/` })(issuer)}\n                paymentMethodType={txVariant}\n                amount={i18n.amount(amount.value, amount.currency)}\n                voucherDetails={details}\n            ></PaymentDetails>\n            <PayButton\n                classNameModifiers={buttonModifiers}\n                label={i18n.get('paybybankpix.storedPayment.payButton.label')}\n                status={status}\n                amount={amount}\n                onClick={onPay}\n            />\n        </Fragment>\n    );\n}\n\nexport default StoredPayment;\n"],"names":["StoredPayment","onPay","type","countdownTime","receiver","amount","txVariant","issuer","setComponentRef","enrollmentId","initiationId","clientKey","onAuthorize","onError","i18n","loadingContext","useCoreContext","getImage","useImage","status","setStatus","useState","authorizationOptions","setAuthorizationOptions","logos","name","alt","get","src","parentFolder","details","label","value","date","Date","toString","self","useRef","pollStatus","useCallback","async","response","getAuthorizationStatus","useEffect","current","h","PayByBankPixAwait","awaitText","Fragment","PaymentDetails","issuerImageUrl","imageFolder","paymentMethodType","currency","voucherDetails","PayButton","classNameModifiers","onClick"],"mappings":"kiBAWA,SAASA,GAAcC,MACnBA,EAAKC,KACLA,EAAIC,cACJA,EAAaC,SACbA,EAAQC,OACRA,EAAMC,UACNA,EAASC,OACTA,EAAMC,gBACNA,EAAeC,aACfA,EAAYC,aACZA,EAAYC,UACZA,EAASC,YACTA,EAAWC,QACXA,IAEA,MAAMC,KAAEA,EAAIC,eAAEA,GAAmBC,IAC3BC,EAAWC,KACVC,EAAQC,GAAaC,EAAS,UAC9BC,EAAsBC,GAA2BF,EAAiB,MAEnEG,EAAQ,CACV,CACIC,KAAM,eACNC,IAAKZ,EAAKa,IAAI,0CACdC,IAAK,GAAGX,EAAS,CAAEY,aAAc,GAAGvB,MAA5BW,CAA4C,oBAGtDa,EAAU,CACZ,CAAEC,MAAOjB,EAAKa,IAAI,uCAAwCK,MAAO5B,GACjE,CAAE2B,MAAOjB,EAAKa,IAAI,0CAA2CK,MAAOlB,EAAKmB,MAAK,IAAIC,MAAOC,aACzF,CAAEJ,MAAOjB,EAAKa,IAAI,4CAA6CK,MAAO,qBAEpEI,EAAOC,EAAO,CAChBjB,cAGEkB,EAAaC,GAAYC,UAC3B,GAAIlB,EAAsB,OAE1B,MAAMmB,QAAiBC,EAAuB,CAAEjC,eAAcC,eAAcC,YAAWI,mBAKvF,OAJI0B,EAASnB,sBACTC,EAAwBkB,EAASnB,sBAG9BmB,CAAAA,GACR,CAACnB,EAAsBb,EAAcC,EAAcC,EAAWI,IAYjE,OAVA4B,GAAU,KACNnC,EAAgB4B,EAAKQ,QAAO,GAC7B,CAACpC,IAEJmC,GAAU,KACFrB,GACAV,EAAYU,EAChB,GACD,CAACA,IAEY,UAATpB,EACH2C,EAACC,EAAAA,CACGtB,MAAOA,EACPtB,KAAMI,EACNH,cAAeA,EACfQ,UAAWA,EACXE,QAASA,EACTkC,UAAWjC,EAAKa,IAAI,mCACpBW,WAAYA,IAGhBO,EAACG,OACGH,EAACI,EAAAA,CACGC,eAAgBjC,EAAS,CAAEkC,YAAa,GAAG7C,MAA3BW,CAA2CV,GAC3D6C,kBAAmB9C,EACnBD,OAAQS,EAAKT,OAAOA,EAAO2B,MAAO3B,EAAOgD,UACzCC,eAAgBxB,IAEpBe,EAACU,EAAAA,CACGC,mBAzDY,CAAC,cA0DbzB,MAAOjB,EAAKa,IAAI,8CAChBR,OAAQA,EACRd,OAAQA,EACRoD,QAASxD,IAIzB"}