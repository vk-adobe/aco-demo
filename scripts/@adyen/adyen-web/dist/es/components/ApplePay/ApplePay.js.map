{"version":3,"file":"ApplePay.js","sources":["../../../../src/components/ApplePay/ApplePay.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport ApplePayButton from './components/ApplePayButton';\nimport ApplePayService from './services/ApplePayService';\nimport base64 from '../../utils/base64';\nimport defaultProps from './defaultProps';\nimport { httpPost } from '../../core/Services/http';\nimport { preparePaymentRequest } from './utils/payment-request';\nimport AdyenCheckoutError from '../../core/Errors/AdyenCheckoutError';\nimport { DecodeObject } from '../../types/global-types';\nimport { TxVariants } from '../tx-variants';\nimport { sanitizeResponse, verifyPaymentDidNotFail } from '../internal/UIElement/utils';\nimport {\n    ANALYTICS_EXPRESS_PAGES_ARRAY,\n    ANALYTICS_INSTANT_PAYMENT_BUTTON,\n    ANALYTICS_RENDERED_STR,\n    ANALYTICS_SELECTED_STR\n} from '../../core/Analytics/constants';\nimport { resolveSupportedVersion } from './utils/resolve-supported-version';\nimport { formatApplePayContactToAdyenAddressFormat } from './utils/format-applepay-contact-to-adyen-format';\nimport { mapBrands } from './utils/map-adyen-brands-to-applepay-brands';\nimport ApplePaySdkLoader from './services/ApplePaySdkLoader';\nimport { detectInIframe } from '../../utils/detectInIframe';\nimport type { ApplePayConfiguration, ApplePayElementData, ApplePayPaymentOrderDetails, ApplePaySessionRequest } from './types';\nimport type { ICore } from '../../core/types';\nimport type { PaymentResponseData, RawPaymentResponse } from '../../types/global-types';\nimport { AnalyticsEvent } from '../../core/Analytics/AnalyticsEvent';\nimport { AnalyticsInfoEvent } from '../../core/Analytics/AnalyticsInfoEvent';\n\nconst LATEST_APPLE_PAY_VERSION = 14;\n\nclass ApplePayElement extends UIElement<ApplePayConfiguration> {\n    public static type = TxVariants.applepay;\n\n    protected static defaultProps = defaultProps;\n\n    private sdkLoader: ApplePaySdkLoader;\n    private applePayVersionNumber: number = undefined;\n\n    constructor(checkout: ICore, props?: ApplePayConfiguration) {\n        super(checkout, props);\n\n        const { isExpress, onShippingContactSelected, onShippingMethodSelected } = this.props;\n\n        if (isExpress === false && (onShippingContactSelected || onShippingMethodSelected)) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'ApplePay - You must set \"isExpress\" flag to \"true\" in order to use \"onShippingContactSelected\" and/or \"onShippingMethodSelected\" callbacks'\n            );\n        }\n\n        this.startSession = this.startSession.bind(this);\n        this.submit = this.submit.bind(this);\n        this.validateMerchant = this.validateMerchant.bind(this);\n        this.collectOrderTrackingDetailsIfNeeded = this.collectOrderTrackingDetailsIfNeeded.bind(this);\n        this.handleAuthorization = this.handleAuthorization.bind(this);\n        this.defineApplePayVersionNumber = this.defineApplePayVersionNumber.bind(this);\n        this.configureApplePayWebOptions = this.configureApplePayWebOptions.bind(this);\n\n        this.sdkLoader = new ApplePaySdkLoader();\n\n        void this.sdkLoader\n            .load()\n            .then(this.defineApplePayVersionNumber)\n            .then(this.configureApplePayWebOptions)\n            .catch(error => {\n                this.handleError(error);\n            });\n    }\n\n    /**\n     * Formats the component props\n     */\n    protected override formatProps(props: ApplePayConfiguration): ApplePayConfiguration {\n        // @ts-ignore TODO: Fix brands prop\n        const supportedNetworks = props.brands?.length ? mapBrands(props.brands) : props.supportedNetworks;\n\n        return {\n            ...props,\n            configuration: props.configuration,\n            supportedNetworks,\n            buttonLocale: props.buttonLocale ?? props.i18n?.locale,\n            totalPriceLabel: props.totalPriceLabel || props.configuration?.merchantName,\n            renderApplePayCodeAs: props.renderApplePayCodeAs ?? (detectInIframe() ? 'window' : 'modal')\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    protected override formatData(): ApplePayElementData {\n        const { applePayToken, billingAddress, deliveryAddress } = this.state;\n        const { isExpress } = this.props;\n\n        return {\n            paymentMethod: {\n                type: ApplePayElement.type,\n                applePayToken,\n                ...(isExpress && { subtype: 'express' })\n            },\n            ...(billingAddress && { billingAddress }),\n            ...(deliveryAddress && { deliveryAddress })\n        };\n    }\n\n    protected submitAnalytics(analyticsObj: AnalyticsEvent) {\n        // Analytics will need to know about this.props.isExpress & this.props.expressPage\n        if (analyticsObj instanceof AnalyticsInfoEvent && analyticsObj.type === ANALYTICS_RENDERED_STR) {\n            const { isExpress, expressPage } = this.props;\n            const hasExpressPage = expressPage && ANALYTICS_EXPRESS_PAGES_ARRAY.includes(expressPage);\n\n            if (typeof isExpress === 'boolean') {\n                analyticsObj.isExpress = isExpress;\n            }\n\n            if (isExpress === true && hasExpressPage) {\n                analyticsObj.expressPage = expressPage; // We only care about the expressPage value if isExpress is true\n            }\n        }\n\n        super.submitAnalytics(analyticsObj);\n    }\n\n    public override submit = (): void => {\n        // Analytics\n        if (this.props.isInstantPayment) {\n            const event = new AnalyticsInfoEvent({\n                type: ANALYTICS_SELECTED_STR,\n                target: ANALYTICS_INSTANT_PAYMENT_BUTTON\n            });\n            this.submitAnalytics(event);\n        }\n        void this.startSession();\n    };\n\n    public get isValid(): boolean {\n        return true;\n    }\n\n    /**\n     * This API is only intended for upstreaming or defaulting to Apple Pay, all other scenarios should continue to\n     * use canMakePayments(). For Safari browsers, this API will indicate whether there is a card available to make\n     * payments. For third-party browsers a new status of paymentCredentialStatusUnknown will be returned. This does\n     * not mean there are no cards available, it means the status cannot be determined and as such defaulting\n     * and upstreaming should still be considered.\n     *\n     * {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/4440085-applepaycapabilities}\n     * @param merchantIdentifier\n     */\n    public async applePayCapabilities(merchantIdentifier?: string): Promise<ApplePayJS.PaymentCredentialStatusResponse> {\n        const identifier = merchantIdentifier || this.props.configuration.merchantId;\n\n        try {\n            await this.sdkLoader.isSdkLoaded();\n            return await ApplePaySession?.applePayCapabilities(identifier);\n        } catch (error) {\n            throw new AdyenCheckoutError('ERROR', 'Apple Pay: Error when requesting applePayCapabilities()', { cause: error });\n        }\n    }\n\n    /**\n     * Determines if Apple Pay component can be displayed or not\n     */\n    public override async isAvailable(): Promise<void> {\n        if (window.location.protocol !== 'https:') {\n            return Promise.reject(new AdyenCheckoutError('IMPLEMENTATION_ERROR', 'Trying to start an Apple Pay session from an insecure document'));\n        }\n\n        try {\n            await this.sdkLoader.isSdkLoaded();\n\n            if (ApplePaySession?.canMakePayments()) {\n                return Promise.resolve();\n            }\n\n            return Promise.reject(new AdyenCheckoutError('ERROR', 'Apple Pay is not available on this device'));\n        } catch (error) {\n            return Promise.reject(new AdyenCheckoutError('ERROR', 'Apple Pay SDK failed to load', { cause: error }));\n        }\n    }\n\n    /**\n     * Sets the Apple Pay version available for the shopper.\n     * This code needs to be executed once the  Apple Pay SDK is fully loaded\n     * @private\n     */\n    private defineApplePayVersionNumber() {\n        if (window.location.protocol !== 'https:') return;\n        this.applePayVersionNumber = this.props.version || resolveSupportedVersion(LATEST_APPLE_PAY_VERSION);\n    }\n\n    /**\n     * Sets the configuration/callbacks that pertain to the Apple Pay code overlay/modal.\n     * @private\n     */\n    private configureApplePayWebOptions() {\n        if (window.ApplePayWebOptions) {\n            const { renderApplePayCodeAs, onApplePayCodeClose } = this.props;\n\n            window.ApplePayWebOptions.set({\n                renderApplePayCodeAs,\n                ...(onApplePayCodeClose && { onApplePayCodeClose })\n            });\n        }\n    }\n\n    private startSession() {\n        const { onValidateMerchant, onPaymentMethodSelected, onShippingMethodSelected, onShippingContactSelected } = this.props;\n\n        const paymentRequest = preparePaymentRequest({\n            companyName: this.props.configuration.merchantName,\n            countryCode: this.core.options.countryCode,\n            ...this.props\n        });\n\n        const session = new ApplePayService(paymentRequest, {\n            version: this.applePayVersionNumber,\n            onError: (error: unknown) => {\n                this.handleError(\n                    new AdyenCheckoutError('ERROR', 'ApplePay - Something went wrong on ApplePayService', {\n                        cause: error\n                    })\n                );\n            },\n            onCancel: event => {\n                this.handleError(new AdyenCheckoutError('CANCEL', 'ApplePay UI dismissed', { cause: event }));\n            },\n            onPaymentMethodSelected,\n            onShippingMethodSelected,\n            onShippingContactSelected,\n            onValidateMerchant: onValidateMerchant || this.validateMerchant,\n            onPaymentAuthorized: (resolve, reject, event) => {\n                const billingAddress = formatApplePayContactToAdyenAddressFormat(event.payment.billingContact);\n                const deliveryAddress = formatApplePayContactToAdyenAddressFormat(event.payment.shippingContact, true);\n\n                this.setState({\n                    applePayToken: btoa(JSON.stringify(event.payment.token.paymentData)),\n                    authorizedEvent: event,\n                    ...(billingAddress && { billingAddress }),\n                    ...(deliveryAddress && { deliveryAddress })\n                });\n\n                this.handleAuthorization()\n                    .then(this.makePaymentsCall)\n                    .then(sanitizeResponse)\n                    .then(verifyPaymentDidNotFail)\n                    .then(this.collectOrderTrackingDetailsIfNeeded)\n                    .then(({ paymentResponse, orderDetails }) => {\n                        resolve({\n                            status: ApplePaySession.STATUS_SUCCESS,\n                            ...(orderDetails && { orderDetails })\n                        });\n                        return paymentResponse;\n                    })\n                    .then(paymentResponse => {\n                        this.handleResponse(paymentResponse);\n                    })\n                    .catch((paymentResponse?: RawPaymentResponse) => {\n                        const errors = paymentResponse?.error?.applePayError;\n\n                        reject({\n                            status: ApplePaySession.STATUS_FAILURE,\n                            errors: errors ? (Array.isArray(errors) ? errors : [errors]) : undefined\n                        });\n\n                        const responseWithError: RawPaymentResponse = {\n                            ...paymentResponse,\n                            error: {\n                                applePayError: errors\n                            }\n                        };\n\n                        this.handleFailedResult(responseWithError);\n                    });\n            }\n        });\n\n        return new Promise((resolve, reject) => this.props.onClick(resolve, reject))\n            .then(() => {\n                session.begin();\n            })\n            .catch(() => ({\n                // Swallow exception triggered by onClick reject\n            }));\n    }\n\n    /**\n     * Call the 'onAuthorized' callback if available.\n     * Must be resolved/reject for the payment flow to continue\n     *\n     * @private\n     */\n    private async handleAuthorization(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this.props.onAuthorized) {\n                resolve();\n            }\n\n            const { authorizedEvent, billingAddress, deliveryAddress } = this.state;\n\n            this.props.onAuthorized(\n                {\n                    authorizedEvent,\n                    ...(billingAddress && { billingAddress }),\n                    ...(deliveryAddress && { deliveryAddress })\n                },\n                { resolve, reject }\n            );\n        }).catch((error?: ApplePayJS.ApplePayError) => {\n            // Format error in a way that the 'catch' of the 'onPaymentAuthorize' block accepts it\n            const data = { error: { applePayError: error } };\n            return Promise.reject(data);\n        });\n    }\n\n    /**\n     * Verify if the 'onOrderTrackingRequest' is provided. If so, triggers the callback expecting an\n     * Apple Pay order details back\n     *\n     * @private\n     */\n    private async collectOrderTrackingDetailsIfNeeded(\n        paymentResponse: PaymentResponseData\n    ): Promise<{ orderDetails?: ApplePayPaymentOrderDetails; paymentResponse: PaymentResponseData }> {\n        return new Promise<ApplePayPaymentOrderDetails | void>((resolve, reject) => {\n            if (!this.props.onOrderTrackingRequest) {\n                return resolve();\n            }\n\n            this.props.onOrderTrackingRequest(resolve, reject);\n        })\n            .then(orderDetails => {\n                return {\n                    paymentResponse,\n                    ...(orderDetails && { orderDetails })\n                };\n            })\n            .catch(() => {\n                return { paymentResponse };\n            });\n    }\n\n    private async validateMerchant(resolve, reject) {\n        const { hostname: domainName } = window.location;\n        const { clientKey, configuration, loadingContext, initiative } = this.props;\n        const { merchantName, merchantId } = configuration;\n        const path = `v1/applePay/sessions?clientKey=${clientKey}`;\n        const options = { loadingContext, path };\n        const request: ApplePaySessionRequest = {\n            displayName: merchantName,\n            domainName,\n            initiative,\n            merchantIdentifier: merchantId\n        };\n\n        try {\n            const response = await httpPost(options, request);\n            const decodedData: DecodeObject = base64.decode(response.data);\n            if (!decodedData.success) {\n                reject('Could not decode Apple Pay session');\n            } else {\n                const session = JSON.parse(decodedData.data);\n                resolve(session);\n            }\n        } catch (e) {\n            reject('Could not get Apple Pay session');\n        }\n    }\n\n    render() {\n        if (!this.props.showPayButton) {\n            return null;\n        }\n\n        return (\n            <ApplePayButton\n                buttonStyle={this.props.buttonColor}\n                buttonType={this.props.buttonType}\n                buttonLocale={this.props.buttonLocale}\n                onClick={this.submit}\n            />\n        );\n    }\n}\n\nexport default ApplePayElement;\n"],"names":["ApplePayElement","UIElement","formatProps","props","supportedNetworks","brands","length","mapBrands","configuration","buttonLocale","i18n","locale","totalPriceLabel","merchantName","renderApplePayCodeAs","detectInIframe","formatData","applePayToken","billingAddress","deliveryAddress","this","state","isExpress","paymentMethod","type","subtype","submitAnalytics","analyticsObj","AnalyticsInfoEvent","ANALYTICS_RENDERED_STR","expressPage","hasExpressPage","ANALYTICS_EXPRESS_PAGES_ARRAY","includes","super","isValid","applePayCapabilities","merchantIdentifier","identifier","merchantId","sdkLoader","isSdkLoaded","ApplePaySession","error","AdyenCheckoutError","cause","isAvailable","window","location","protocol","Promise","reject","canMakePayments","resolve","defineApplePayVersionNumber","applePayVersionNumber","version","resolveSupportedVersion","configureApplePayWebOptions","ApplePayWebOptions","onApplePayCodeClose","set","startSession","onValidateMerchant","onPaymentMethodSelected","onShippingMethodSelected","onShippingContactSelected","paymentRequest","preparePaymentRequest","companyName","countryCode","core","options","session","ApplePayService","onError","handleError","onCancel","event","validateMerchant","onPaymentAuthorized","formatApplePayContactToAdyenAddressFormat","payment","billingContact","shippingContact","setState","btoa","JSON","stringify","token","paymentData","authorizedEvent","handleAuthorization","then","makePaymentsCall","sanitizeResponse","verifyPaymentDidNotFail","collectOrderTrackingDetailsIfNeeded","paymentResponse","orderDetails","status","STATUS_SUCCESS","handleResponse","catch","errors","applePayError","STATUS_FAILURE","Array","isArray","undefined","responseWithError","handleFailedResult","onClick","begin","onAuthorized","data","onOrderTrackingRequest","hostname","domainName","clientKey","loadingContext","initiative","path","request","displayName","response","httpPost","decodedData","base64","decode","success","parse","e","render","showPayButton","h","ApplePayButton","buttonStyle","buttonColor","buttonType","submit","constructor","checkout","_define_property","isInstantPayment","ANALYTICS_SELECTED_STR","target","ANALYTICS_INSTANT_PAYMENT_BUTTON","bind","ApplePaySdkLoader","load","TxVariants","applepay","defaultProps"],"mappings":"m1CA+BA,MAAMA,UAAwBC,EA0CPC,WAAAA,CAAYC,GAE3B,MAAMC,EAAoBD,EAAME,QAAQC,OAASC,EAAUJ,EAAME,QAAUF,EAAMC,kBAEjF,MAAO,IACAD,EACHK,cAAeL,EAAMK,cACrBJ,oBACAK,aAAcN,EAAMM,cAAgBN,EAAMO,MAAMC,OAChDC,gBAAiBT,EAAMS,iBAAmBT,EAAMK,eAAeK,aAC/DC,qBAAsBX,EAAMW,uBAAyBC,IAAmB,SAAW,SAE3F,CAKA,UAAAC,GACI,MAAMC,cAAEA,EAAaC,eAAEA,EAAcC,gBAAEA,GAAoBC,KAAKC,OAC1DC,UAAEA,GAAcF,KAAKjB,MAE3B,MAAO,CACHoB,cAAe,CACXC,KAAMxB,EAAgBwB,KACtBP,mBACIK,GAAa,CAAEG,QAAS,eAE5BP,GAAkB,CAAEA,qBACpBC,GAAmB,CAAEA,mBAEjC,CAEUO,eAAAA,CAAgBC,GAEtB,GAAIA,aAAwBC,GAAsBD,EAAaH,OAASK,EAAwB,CAC5F,MAAMP,UAAEA,EAASQ,YAAEA,GAAgBV,KAAKjB,MAClC4B,EAAiBD,GAAeE,EAA8BC,SAASH,GAEpD,kBAAdR,IACPK,EAAaL,UAAYA,IAGX,IAAdA,GAAsBS,IACtBJ,EAAaG,YAAcA,EAEnC,CAEAI,MAAMR,gBAAgBC,EAC1B,CAcA,WAAWQ,GACP,OAAO,CACX,CAYA,0BAAaC,CAAqBC,GAC9B,MAAMC,EAAaD,GAAsBjB,KAAKjB,MAAMK,cAAc+B,WAElE,IAEI,aADMnB,KAAKoB,UAAUC,oBACRC,iBAAiBN,qBAAqBE,GACvD,CAAE,MAAOK,GACL,MAAM,IAAIC,EAAmB,QAAS,0DAA2D,CAAEC,MAAOF,GAC9G,CACJ,CAKA,iBAAsBG,GAClB,GAAiC,WAA7BC,OAAOC,SAASC,SAChB,OAAOC,QAAQC,OAAO,IAAIP,EAAmB,uBAAwB,mEAGzE,IAGI,aAFMxB,KAAKoB,UAAUC,cAEjBC,iBAAiBU,kBACVF,QAAQG,UAGZH,QAAQC,OAAO,IAAIP,EAAmB,QAAS,6CAC1D,CAAE,MAAOD,GACL,OAAOO,QAAQC,OAAO,IAAIP,EAAmB,QAAS,+BAAgC,CAAEC,MAAOF,IACnG,CACJ,CAOA,2BAAAW,GACqC,WAA7BP,OAAOC,SAASC,WACpB7B,KAAKmC,sBAAwBnC,KAAKjB,MAAMqD,SAAWC,EA/J1B,IAgK7B,CAMA,2BAAAC,GACI,GAAIX,OAAOY,mBAAoB,CAC3B,MAAM7C,qBAAEA,EAAoB8C,oBAAEA,GAAwBxC,KAAKjB,MAE3D4C,OAAOY,mBAAmBE,IAAI,CAC1B/C,0BACI8C,GAAuB,CAAEA,wBAErC,CACJ,CAEQE,YAAAA,GACJ,MAAMC,mBAAEA,EAAkBC,wBAAEA,EAAuBC,yBAAEA,EAAwBC,0BAAEA,GAA8B9C,KAAKjB,MAE5GgE,EAAiBC,EAAsB,CACzCC,YAAajD,KAAKjB,MAAMK,cAAcK,aACtCyD,YAAalD,KAAKmD,KAAKC,QAAQF,eAC5BlD,KAAKjB,QAGNsE,EAAU,IAAIC,EAAgBP,EAAgB,CAChDX,QAASpC,KAAKmC,sBACdoB,QAAUhC,IACNvB,KAAKwD,YACD,IAAIhC,EAAmB,QAAS,qDAAsD,CAClFC,MAAOF,IACX,EAGRkC,SAAUC,IACN1D,KAAKwD,YAAY,IAAIhC,EAAmB,SAAU,wBAAyB,CAAEC,MAAOiC,IAAM,EAE9Fd,0BACAC,2BACAC,4BACAH,mBAAoBA,GAAsB3C,KAAK2D,iBAC/CC,oBAAqB,CAAC3B,EAASF,EAAQ2B,KACnC,MAAM5D,EAAiB+D,EAA0CH,EAAMI,QAAQC,gBACzEhE,EAAkB8D,EAA0CH,EAAMI,QAAQE,iBAAiB,GAEjGhE,KAAKiE,SAAS,CACVpE,cAAeqE,KAAKC,KAAKC,UAAUV,EAAMI,QAAQO,MAAMC,cACvDC,gBAAiBb,KACb5D,GAAkB,CAAEA,qBACpBC,GAAmB,CAAEA,qBAG7BC,KAAKwE,sBACAC,KAAKzE,KAAK0E,kBACVD,KAAKE,GACLF,KAAKG,GACLH,KAAKzE,KAAK6E,qCACVJ,MAAK,EAAGK,kBAAiBC,mBACtB9C,EAAQ,CACJ+C,OAAQ1D,gBAAgB2D,kBACpBF,GAAgB,CAAEA,kBAEnBD,KAEVL,MAAKK,IACF9E,KAAKkF,eAAeJ,EAAAA,IAEvBK,OAAOL,IACJ,MAAMM,EAASN,GAAiBvD,OAAO8D,cAEvCtD,EAAO,CACHiD,OAAQ1D,gBAAgBgE,eACxBF,OAAQA,EAAUG,MAAMC,QAAQJ,GAAUA,EAAS,CAACA,QAAWK,IAGnE,MAAMC,EAAwC,IACvCZ,EACHvD,MAAO,CACH8D,cAAeD,IAIvBpF,KAAK2F,mBAAmBD,EAAAA,GAC5B,IAIZ,OAAO,IAAI5D,SAAQ,CAACG,EAASF,IAAW/B,KAAKjB,MAAM6G,QAAQ3D,EAASF,KAC/D0C,MAAK,KACFpB,EAAQwC,OAAK,IAEhBV,OAAM,KAAO,CAEd,IACR,CAQA,yBAAcX,GACV,OAAO,IAAI1C,SAAc,CAACG,EAASF,KAC1B/B,KAAKjB,MAAM+G,cACZ7D,IAGJ,MAAMsC,gBAAEA,EAAezE,eAAEA,EAAcC,gBAAEA,GAAoBC,KAAKC,MAElED,KAAKjB,MAAM+G,aACP,CACIvB,qBACIzE,GAAkB,CAAEA,qBACpBC,GAAmB,CAAEA,oBAE7B,CAAEkC,UAASF,UAAO,IAEvBoD,OAAO5D,IAEN,MAAMwE,EAAO,CAAExE,MAAO,CAAE8D,cAAe9D,IACvC,OAAOO,QAAQC,OAAOgE,EAAAA,GAE9B,CAQA,yCAAclB,CACVC,GAEA,OAAO,IAAIhD,SAA4C,CAACG,EAASF,KAC7D,IAAK/B,KAAKjB,MAAMiH,uBACZ,OAAO/D,IAGXjC,KAAKjB,MAAMiH,uBAAuB/D,EAASF,EAAAA,IAE1C0C,MAAKM,IACK,CACHD,qBACIC,GAAgB,CAAEA,oBAG7BI,OAAM,KACI,CAAEL,qBAErB,CAEA,sBAAcnB,CAAiB1B,EAASF,GACpC,MAAQkE,SAAUC,GAAevE,OAAOC,UAClCuE,UAAEA,EAAS/G,cAAEA,EAAagH,eAAEA,EAAcC,WAAEA,GAAerG,KAAKjB,OAChEU,aAAEA,EAAY0B,WAAEA,GAAe/B,EAE/BgE,EAAU,CAAEgD,iBAAgBE,KADrB,kCAAkCH,KAEzCI,EAAkC,CACpCC,YAAa/G,EACbyG,aACAG,aACApF,mBAAoBE,GAGxB,IACI,MAAMsF,QAAiBC,EAAStD,EAASmD,GACnCI,EAA4BC,EAAOC,OAAOJ,EAASV,MACzD,GAAKY,EAAYG,QAEV,CAEH7E,EADgBkC,KAAK4C,MAAMJ,EAAYZ,MAE3C,MAJIhE,EAAO,qCAKf,CAAE,MAAOiF,GACLjF,EAAO,kCACX,CACJ,CAEAkF,MAAAA,GACI,OAAKjH,KAAKjB,MAAMmI,cAKZC,EAACC,EAAAA,CACGC,YAAarH,KAAKjB,MAAMuI,YACxBC,WAAYvH,KAAKjB,MAAMwI,WACvBlI,aAAcW,KAAKjB,MAAMM,aACzBuG,QAAS5F,KAAKwH,SARX,IAWf,CAvVAC,WAAAA,CAAYC,EAAiB3I,GACzB+B,MAAM4G,EAAU3I,GAJpB4I,EAAQvG,KAAAA,iBAAR,GACAuG,EAAQxF,KAAAA,6BAAgCsD,GAsFxCkC,EAAA3H,KAAgBwH,UAAS,KAErB,GAAIxH,KAAKjB,MAAM6I,iBAAkB,CAC7B,MAAMlE,EAAQ,IAAIlD,EAAmB,CACjCJ,KAAMyH,EACNC,OAAQC,IAEZ/H,KAAKM,gBAAgBoD,EACzB,CACK1D,KAAK0C,cAAY,IA1FtB,MAAMxC,UAAEA,EAAS4C,0BAAEA,EAAyBD,yBAAEA,GAA6B7C,KAAKjB,MAEhF,IAAkB,IAAdmB,IAAwB4C,GAA6BD,GACrD,MAAM,IAAIrB,EACN,uBACA,8IAIRxB,KAAK0C,aAAe1C,KAAK0C,aAAasF,KAAKhI,MAC3CA,KAAKwH,OAASxH,KAAKwH,OAAOQ,KAAKhI,MAC/BA,KAAK2D,iBAAmB3D,KAAK2D,iBAAiBqE,KAAKhI,MACnDA,KAAK6E,oCAAsC7E,KAAK6E,oCAAoCmD,KAAKhI,MACzFA,KAAKwE,oBAAsBxE,KAAKwE,oBAAoBwD,KAAKhI,MACzDA,KAAKkC,4BAA8BlC,KAAKkC,4BAA4B8F,KAAKhI,MACzEA,KAAKsC,4BAA8BtC,KAAKsC,4BAA4B0F,KAAKhI,MAEzEA,KAAKoB,UAAY,IAAI6G,EAEhBjI,KAAKoB,UACL8G,OACAzD,KAAKzE,KAAKkC,6BACVuC,KAAKzE,KAAKsC,6BACV6C,OAAM5D,IACHvB,KAAKwD,YAAYjC,EAAAA,GAE7B,EApCAoG,EADE/I,EACYwB,OAAO+H,EAAWC,UAEhCT,EAHE/I,EAGeyJ,eAAeA"}