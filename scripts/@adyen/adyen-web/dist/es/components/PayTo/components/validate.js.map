{"version":3,"file":"validate.js","sources":["../../../../../src/components/PayTo/components/validate.ts"],"sourcesContent":["import { ValidatorRule, ValidatorRules } from '../../../utils/Validator/types';\nimport { isEmpty } from '../../../utils/validator-utils';\nimport { ERROR_FIELD_INVALID, ERROR_FIELD_REQUIRED } from '../../../core/Errors/constants';\n\nconst abnRegex = /^((\\d{9})|(\\d{11}))$/;\n\nconst orgidRegex = /`^[!-@[-~][ -@[-~]{0,254}[!-@[-~]$`/;\n\nconst emailRegex =\n    /^(?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)$/;\n\n// full phone regex Phone: ^\\+[0-9]{1,3}-[1-9]{1,1}[0-9]{1,29}$\nconst phoneNumberRegex = /^[1-9]{1,1}[0-9]{1,29}$/;\n\nexport const validationFromRegex = (value: string, regex: RegExp, validationRule: ValidatorRule): boolean | null => {\n    // null is returned here for legacy reasons\n    // check comment on hasError() ValidatorRulesResult.ts:17\n    if (isEmpty(value)) {\n        validationRule.errorMessage = ERROR_FIELD_REQUIRED;\n        return null;\n    }\n    validationRule.errorMessage = ERROR_FIELD_INVALID;\n    return regex.test(value);\n};\n\nconst emailValidatorRule: ValidatorRule = {\n    validate: value => validationFromRegex(value, emailRegex, emailValidatorRule),\n    errorMessage: 'abn.invalid',\n    modes: ['blur']\n};\n\nconst abnValidatorRule: ValidatorRule = {\n    validate: value => validationFromRegex(value, abnRegex, abnValidatorRule),\n    errorMessage: 'abn.invalid',\n    modes: ['blur']\n};\n\nconst orgidValidatorRule: ValidatorRule = {\n    validate: value => validationFromRegex(value, orgidRegex, orgidValidatorRule),\n    errorMessage: 'orgid.invalid',\n    modes: ['blur']\n};\n\nexport const payIdValidationRules: ValidatorRules = {\n    default: {\n        validate: value => {\n            return value && value.length > 0;\n        },\n        errorMessage: ERROR_FIELD_REQUIRED,\n        modes: ['blur']\n    },\n    email: emailValidatorRule,\n    abn: abnValidatorRule,\n    orgid: orgidValidatorRule,\n    firstName: {\n        validate: value => (isEmpty(value) ? null : true), // valid, if there are chars other than spaces,\n        errorMessage: 'firstName.invalid',\n        modes: ['blur']\n    },\n    lastName: {\n        validate: value => (isEmpty(value) ? null : true),\n        errorMessage: 'lastName.invalid',\n        modes: ['blur']\n    },\n    phoneNumber: {\n        modes: ['blur'],\n        validate: value => {\n            return isEmpty(value) ? null : phoneNumberRegex.test(value);\n        },\n        errorMessage: 'mobileNumber.invalid'\n    },\n    phonePrefix: {\n        modes: ['blur'],\n        validate: phonePrefix => !!phonePrefix,\n        errorMessage: 'mobileNumber.invalid'\n    }\n};\n\n//original regex /^\\d{6}-[ -~]{1,28}$/\nconst bsbRegex = /^\\d{6}$/;\nconst bankAccountNumberRegex = /^[ -~]{1,28}$/;\n\nconst bsbValidatorRule: ValidatorRule = {\n    validate: value => validationFromRegex(value, bsbRegex, bsbValidatorRule),\n    errorMessage: 'bsb.invalid',\n    modes: ['blur']\n};\n\nconst bankAccountNumberValidatorRule: ValidatorRule = {\n    validate: value => validationFromRegex(value, bankAccountNumberRegex, bankAccountNumberValidatorRule),\n    errorMessage: 'bankAccountNumber.invalid',\n    modes: ['blur']\n};\n\nexport const bsbValidationRules: ValidatorRules = {\n    bsb: bsbValidatorRule,\n    bankAccountNumber: bankAccountNumberValidatorRule,\n    firstName: {\n        validate: value => (isEmpty(value) ? null : true), // valid, if there are chars other than spaces,\n        errorMessage: 'firstName.invalid',\n        modes: ['blur']\n    },\n    lastName: {\n        validate: value => (isEmpty(value) ? null : true),\n        errorMessage: 'lastName.invalid',\n        modes: ['blur']\n    }\n};\n"],"names":["abnRegex","orgidRegex","emailRegex","phoneNumberRegex","validationFromRegex","value","regex","validationRule","isEmpty","errorMessage","ERROR_FIELD_REQUIRED","ERROR_FIELD_INVALID","test","emailValidatorRule","validate","modes","abnValidatorRule","orgidValidatorRule","payIdValidationRules","default","length","email","abn","orgid","firstName","lastName","phoneNumber","phonePrefix","bsbRegex","bankAccountNumberRegex","bsbValidatorRule","bankAccountNumberValidatorRule","bsbValidationRules","bsb","bankAccountNumber"],"mappings":"8JAIA,MAAMA,EAAW,uBAEXC,EAAa,sCAEbC,EACF,sKAGEC,EAAmB,0BAEZC,EAAsB,CAACC,EAAeC,EAAeC,IAG1DC,EAAQH,IACRE,EAAeE,aAAeC,EACvB,OAEXH,EAAeE,aAAeE,EACvBL,EAAMM,KAAKP,IAGhBQ,EAAoC,CACtCC,SAAUT,GAASD,EAAoBC,EAAOH,EAAYW,GAC1DJ,aAAc,cACdM,MAAO,CAAC,SAGNC,EAAkC,CACpCF,SAAUT,GAASD,EAAoBC,EAAOL,EAAUgB,GACxDP,aAAc,cACdM,MAAO,CAAC,SAGNE,EAAoC,CACtCH,SAAUT,GAASD,EAAoBC,EAAOJ,EAAYgB,GAC1DR,aAAc,gBACdM,MAAO,CAAC,SAGCG,EAAuC,CAChDC,QAAS,CACLL,SAAUT,GACCA,GAASA,EAAMe,OAAS,EAEnCX,aAAcC,EACdK,MAAO,CAAC,SAEZM,MAAOR,EACPS,IAAKN,EACLO,MAAON,EACPO,UAAW,CACPV,SAAUT,IAAUG,EAAQH,IAAS,KACrCI,aAAc,oBACdM,MAAO,CAAC,SAEZU,SAAU,CACNX,SAAUT,IAAUG,EAAQH,IAAS,KACrCI,aAAc,mBACdM,MAAO,CAAC,SAEZW,YAAa,CACTX,MAAO,CAAC,QACRD,SAAUT,GACCG,EAAQH,GAAS,KAAOF,EAAiBS,KAAKP,GAEzDI,aAAc,wBAElBkB,YAAa,CACTZ,MAAO,CAAC,QACRD,SAAUa,KAAiBA,EAC3BlB,aAAc,yBAKhBmB,EAAW,UACXC,EAAyB,gBAEzBC,EAAkC,CACpChB,SAAUT,GAASD,EAAoBC,EAAOuB,EAAUE,GACxDrB,aAAc,cACdM,MAAO,CAAC,SAGNgB,EAAgD,CAClDjB,SAAUT,GAASD,EAAoBC,EAAOwB,EAAwBE,GACtEtB,aAAc,4BACdM,MAAO,CAAC,SAGCiB,EAAqC,CAC9CC,IAAKH,EACLI,kBAAmBH,EACnBP,UAAW,CACPV,SAAUT,IAAUG,EAAQH,IAAS,KACrCI,aAAc,oBACdM,MAAO,CAAC,SAEZU,SAAU,CACNX,SAAUT,IAAUG,EAAQH,IAAS,KACrCI,aAAc,mBACdM,MAAO,CAAC"}