{"version":3,"file":"PayToNameFields.js","sources":["../../../../../src/components/PayTo/components/PayToNameFields.tsx"],"sourcesContent":["import { h, Fragment } from 'preact';\nimport Field from '../../internal/FormFields/Field';\nimport { getErrorMessage } from '../../../utils/getErrorMessage';\nimport InputText from '../../internal/FormFields/InputText';\nimport Language from '../../../language';\nimport { HandleChangeForModeType } from '../../../utils/useForm/types';\n\nexport interface PayToNameFieldsProps {\n    i18n: Language;\n    errors: {\n        [key: string]: any;\n    };\n    data: {\n        firstName: string;\n        lastName: string;\n    };\n    handleChangeFor: (key: string, mode?: HandleChangeForModeType) => (e: any) => void;\n    placeholders: {\n        firstName: string;\n        lastName: string;\n    };\n}\n\nexport default function PayToNameFields({ i18n, errors, data, handleChangeFor, placeholders }: PayToNameFieldsProps) {\n    return (\n        <Fragment>\n            <Field\n                label={i18n.get('payto.label.firstName')}\n                classNameModifiers={['col-50', 'firstName']}\n                errorMessage={getErrorMessage(i18n, errors.firstName, i18n.get('firstName'))}\n                name={'firstName'}\n                i18n={i18n}\n            >\n                <InputText\n                    name={'firstName'}\n                    value={data.firstName}\n                    classNameModifiers={['firstName']}\n                    onInput={handleChangeFor('firstName', 'input')}\n                    onBlur={handleChangeFor('firstName', 'input')}\n                    placeholder={placeholders?.firstName}\n                    spellCheck={false}\n                    required={true}\n                />\n            </Field>\n            <Field\n                label={i18n.get('payto.label.lastName')}\n                classNameModifiers={['col-50', 'lastName']}\n                errorMessage={getErrorMessage(i18n, errors.lastName, i18n.get('lastName'))}\n                name={'lastName'}\n                i18n={i18n}\n            >\n                <InputText\n                    name={'lastName'}\n                    value={data.lastName}\n                    classNameModifiers={['lastName']}\n                    onInput={handleChangeFor('lastName', 'input')}\n                    onBlur={handleChangeFor('lastName', 'blur')}\n                    placeholder={placeholders?.lastName}\n                    spellCheck={false}\n                    required={true}\n                />\n            </Field>\n        </Fragment>\n    );\n}\n"],"names":["PayToNameFields","i18n","errors","data","handleChangeFor","placeholders","h","Fragment","Field","label","get","classNameModifiers","errorMessage","getErrorMessage","firstName","name","InputText","value","onInput","onBlur","placeholder","spellCheck","required","lastName"],"mappings":"wQAuBe,SAASA,GAAgBC,KAAEA,EAAIC,OAAEA,EAAMC,KAAEA,EAAIC,gBAAEA,EAAeC,aAAEA,IAC3E,OACIC,EAACC,OACGD,EAACE,EAAAA,CACGC,MAAOR,EAAKS,IAAI,yBAChBC,mBAAoB,CAAC,SAAU,aAC/BC,aAAcC,EAAgBZ,EAAMC,EAAOY,UAAWb,EAAKS,IAAI,cAC/DK,KAAM,YACNd,KAAMA,GAENK,EAACU,EAAAA,CACGD,KAAM,YACNE,MAAOd,EAAKW,UACZH,mBAAoB,CAAC,aACrBO,QAASd,EAAgB,YAAa,SACtCe,OAAQf,EAAgB,YAAa,SACrCgB,YAAaf,GAAcS,UAC3BO,YAAY,EACZC,UAAU,KAGlBhB,EAACE,EAAAA,CACGC,MAAOR,EAAKS,IAAI,wBAChBC,mBAAoB,CAAC,SAAU,YAC/BC,aAAcC,EAAgBZ,EAAMC,EAAOqB,SAAUtB,EAAKS,IAAI,aAC9DK,KAAM,WACNd,KAAMA,GAENK,EAACU,EAAAA,CACGD,KAAM,WACNE,MAAOd,EAAKoB,SACZZ,mBAAoB,CAAC,YACrBO,QAASd,EAAgB,WAAY,SACrCe,OAAQf,EAAgB,WAAY,QACpCgB,YAAaf,GAAckB,SAC3BF,YAAY,EACZC,UAAU,KAK9B"}