{"version":3,"file":"validate.js","sources":["../../../../../src/components/Ach/components/validate.ts"],"sourcesContent":["import { ValidatorRules } from '../../../utils/Validator/types';\nimport { digitsOnlyFormatter } from '../../../utils/Formatters/formatters';\nimport { isEmpty } from '../../../utils/validator-utils';\n\nconst accountNumberRegex = /^\\d{4,17}$/;\nconst routingNumberRegex = /^\\d{9}$/;\n\nexport const achValidationRules: ValidatorRules = {\n    selectedAccountType: {\n        validate: value => (isEmpty(value) ? null : true),\n        errorMessage: 'ach.bankAccount.nothing-selected-error',\n        modes: ['blur']\n    },\n    ownerName: {\n        validate: value => (isEmpty(value) ? null : true),\n        errorMessage: 'ach.accountHolderNameField.invalid',\n        modes: ['blur']\n    },\n    routingNumber: [\n        // Empty field\n        {\n            validate: value => (isEmpty(value) ? null : true),\n            errorMessage: 'ach.loc.947',\n            modes: ['blur']\n        },\n        // Incomplete field\n        {\n            validate: value => {\n                if (isEmpty(value)) return null;\n                return routingNumberRegex.test(value);\n            },\n            errorMessage: 'ach.loc.948',\n            modes: ['blur']\n        }\n    ],\n    accountNumber: [\n        // Empty field\n        {\n            validate: value => (isEmpty(value) ? null : true),\n            errorMessage: 'ach.num.945',\n            modes: ['blur']\n        },\n        // Incomplete field: value is not between 4 and 17 chars\n        {\n            validate: value => {\n                if (isEmpty(value)) return null;\n                return accountNumberRegex.test(value);\n            },\n            errorMessage: 'ach.num.946',\n            modes: ['blur']\n        }\n    ],\n    accountNumberVerification: [\n        {\n            /**\n             * If the account number is empty, then validate that the field has an empty error state.\n             * Otherwise, the other validator will validate if the fields match\n             */\n            validate: (value, context) => {\n                const { accountNumber } = context.state.data;\n                return !accountNumber && isEmpty(value) ? null : true;\n            },\n            errorMessage: 'ach.bankAccountNumberVerification.error.empty',\n            modes: ['blur']\n        },\n        {\n            validate: (value, context) => {\n                if (isEmpty(value)) return null;\n                const { accountNumber } = context.state.data;\n                return accountNumber === value;\n            },\n            errorMessage: 'ach.bankAccountNumberVerification.error.not-match',\n            modes: ['blur']\n        }\n    ]\n};\n\nexport const achFormatters = {\n    routingNumber: digitsOnlyFormatter,\n    accountNumber: digitsOnlyFormatter,\n    accountNumberVerification: digitsOnlyFormatter\n};\n"],"names":["accountNumberRegex","routingNumberRegex","achValidationRules","selectedAccountType","validate","value","isEmpty","errorMessage","modes","ownerName","routingNumber","test","accountNumber","accountNumberVerification","context","state","data","achFormatters","digitsOnlyFormatter"],"mappings":"0IAIA,MAAMA,EAAqB,aACrBC,EAAqB,UAEdC,EAAqC,CAC9CC,oBAAqB,CACjBC,SAAUC,IAAUC,EAAQD,IAAS,KACrCE,aAAc,yCACdC,MAAO,CAAC,SAEZC,UAAW,CACPL,SAAUC,IAAUC,EAAQD,IAAS,KACrCE,aAAc,qCACdC,MAAO,CAAC,SAEZE,cAAe,CAEX,CACIN,SAAUC,IAAUC,EAAQD,IAAS,KACrCE,aAAc,cACdC,MAAO,CAAC,SAGZ,CACIJ,SAAUC,GACFC,EAAQD,GAAe,KACpBJ,EAAmBU,KAAKN,GAEnCE,aAAc,cACdC,MAAO,CAAC,UAGhBI,cAAe,CAEX,CACIR,SAAUC,IAAUC,EAAQD,IAAS,KACrCE,aAAc,cACdC,MAAO,CAAC,SAGZ,CACIJ,SAAUC,GACFC,EAAQD,GAAe,KACpBL,EAAmBW,KAAKN,GAEnCE,aAAc,cACdC,MAAO,CAAC,UAGhBK,0BAA2B,CACvB,CAKIT,SAAU,CAACC,EAAOS,KACd,MAAMF,cAAEA,GAAkBE,EAAQC,MAAMC,KACxC,SAAQJ,GAAiBN,EAAQD,KAAS,IAAO,EAErDE,aAAc,gDACdC,MAAO,CAAC,SAEZ,CACIJ,SAAU,CAACC,EAAOS,KACd,GAAIR,EAAQD,GAAQ,OAAO,KAC3B,MAAMO,cAAEA,GAAkBE,EAAQC,MAAMC,KACxC,OAAOJ,IAAkBP,CAAAA,EAE7BE,aAAc,oDACdC,MAAO,CAAC,WAKPS,EAAgB,CACzBP,cAAeQ,EACfN,cAAeM,EACfL,0BAA2BK"}