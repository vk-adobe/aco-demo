{"version":3,"file":"useModal.js","sources":["../../../../../src/components/internal/Modal/useModal.ts"],"sourcesContent":["import { useTrapFocus } from './useTrapFocus';\nimport { useCallback, useEffect } from 'preact/hooks';\n\ntype UseModalProps = {\n    modalElement?: HTMLElement;\n    isOpen: boolean;\n    isDismissible: boolean;\n    focusFirst: HTMLElement;\n    focusAfterClose: HTMLElement;\n    onClose(): void;\n};\n\ntype UseModalHook = {\n    /**\n     * Function that focus on the 'focusAfterClose' element, and then closes the modal\n     */\n    closeModal(): void;\n    handleClickOutside(event: MouseEvent): void;\n};\n\nconst KEYCODE_ESC = 27;\n\nconst useModal = ({ modalElement, isOpen, isDismissible, focusFirst, focusAfterClose, onClose }: UseModalProps): UseModalHook => {\n    useTrapFocus({ rootElement: modalElement, shouldTrap: isOpen, focusFirst });\n\n    const closeModal = useCallback(() => {\n        focusAfterClose.focus();\n        onClose();\n    }, [onClose, focusAfterClose]);\n\n    const handleClickOutside = useCallback(\n        (event: MouseEvent) => {\n            if (isDismissible && event.target instanceof HTMLElement && !modalElement.contains(event.target)) {\n                closeModal();\n            }\n        },\n        [closeModal, isDismissible, modalElement]\n    );\n\n    useEffect(() => {\n        if (!isOpen || !modalElement) return;\n        const closeOnPressingEscape = (event: KeyboardEvent): void => {\n            const isEscapePressed = event.key === 'Escape' || event.key === 'Esc' || event.keyCode === KEYCODE_ESC;\n            if (isEscapePressed) {\n                closeModal();\n            }\n        };\n\n        modalElement.addEventListener('keydown', closeOnPressingEscape);\n        return () => modalElement.removeEventListener('keydown', closeOnPressingEscape);\n    }, [isOpen, modalElement, closeModal]);\n\n    return { closeModal, handleClickOutside };\n};\n\nexport { useModal };\n"],"names":["useModal","modalElement","isOpen","isDismissible","focusFirst","focusAfterClose","onClose","useTrapFocus","rootElement","shouldTrap","closeModal","useCallback","focus","handleClickOutside","event","target","HTMLElement","contains","useEffect","closeOnPressingEscape","key","keyCode","addEventListener","removeEventListener"],"mappings":"2IAoBA,MAEMA,EAAW,EAAGC,eAAcC,SAAQC,gBAAeC,aAAYC,kBAAiBC,cAClFC,EAAa,CAAEC,YAAaP,EAAcQ,WAAYP,EAAQE,eAE9D,MAAMM,EAAaC,GAAY,KAC3BN,EAAgBO,QAChBN,GAAAA,GACD,CAACA,EAASD,IAEPQ,EAAqBF,GACtBG,IACOX,GAAiBW,EAAMC,kBAAkBC,cAAgBf,EAAagB,SAASH,EAAMC,SACrFL,GACJ,GAEJ,CAACA,EAAYP,EAAeF,IAgBhC,OAbAiB,GAAU,KACN,IAAKhB,IAAWD,EAAc,OAC9B,MAAMkB,EAAyBL,KACW,WAAdA,EAAMM,KAAkC,QAAdN,EAAMM,KAtBhD,KAsBiEN,EAAMO,UAE3EX,GACJ,EAIJ,OADAT,EAAaqB,iBAAiB,UAAWH,GAClC,IAAMlB,EAAasB,oBAAoB,UAAWJ,EAAAA,GAC1D,CAACjB,EAAQD,EAAcS,IAEnB,CAAEA,aAAYG,qBAAmB"}