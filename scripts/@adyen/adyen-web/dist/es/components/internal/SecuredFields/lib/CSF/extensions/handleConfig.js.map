{"version":3,"file":"handleConfig.js","sources":["../../../../../../../../src/components/internal/SecuredFields/lib/CSF/extensions/handleConfig.ts"],"sourcesContent":["import { getCardGroupTypes } from '../utils/getCardGroupTypes';\nimport { NON_CREDIT_CARD_TYPE_SECURED_FIELDS, SF_VERSION } from '../../constants';\nimport * as logger from '../../utilities/logger';\nimport { CSFSetupObject } from '../types';\n\n/**\n * Parses this.props to set 'config' type vars on this (CSFComp)\n * - properties that just need to be set once, at startup, and then don't change\n *\n * See interface CSFConfigObject in types.ts\n */\nexport function handleConfig(props: CSFSetupObject): void {\n    // --\n    this.config.cardGroupTypes = getCardGroupTypes(props.cardGroupTypes);\n\n    if (process.env.NODE_ENV === 'development' && window._b$dl) {\n        logger.log('### StoreCls::init:: this.config.cardGroupTypes=', this.config.cardGroupTypes);\n    }\n\n    const loadingContext: string = props.loadingContext;\n\n    if (!loadingContext) {\n        logger.warn('WARNING Config :: no loadingContext has been specified!');\n        return;\n    }\n\n    // Ensure passed loadingContext has trailing slash\n    const lastChar = str => str.charAt(str.length - 1);\n    this.config.loadingContext = lastChar(loadingContext) === '/' ? loadingContext : `${loadingContext}/`;\n\n    // Is this for the regular creditCard or for another use-case for securedFields e.g. 'ach' or 'giftcard'\n    this.config.isCreditCardType = NON_CREDIT_CARD_TYPE_SECURED_FIELDS.includes(props.type) === false;\n\n    // Configuration object for individual txVariants - contains styling object values for securedFields inputs\n    this.config.iframeUIConfig = props.iframeUIConfig ?? {};\n\n    // By default CSF is allowed to automatically shift focus from the date to CVC fields - user of CSF must explicitly 'opt-out' to prevent this happening\n    this.config.autoFocus = !(props.autoFocus === false || props.autoFocus === 'false');\n\n    // By default CSF will NOT perform a console.warn when receiving postMessages with origin or numKey mismatches - user of CSF must explicitly 'opt-in' to get this\n    this.config.showWarnings = props.showWarnings === true || props.showWarnings === 'true';\n\n    // By default CSF will strip the trailing separator character from valid credit card numbers - user of CSF must explicitly 'opt-out' to prevent this happening\n    this.config.trimTrailingSeparator = !(props.trimTrailingSeparator === false || props.trimTrailingSeparator === 'false');\n\n    // By default CSF is allowed to add a fix for iOS to force the keypad to retract - user of CSF must explicitly 'opt-out' to prevent this happening\n    this.config.keypadFix = !(props.keypadFix === false || props.keypadFix === 'false');\n\n    // To set the type on the iframe input fields to 'tel' c.f. the default 'text' (with inputmode='numeric')\n    this.config.legacyInputMode = props.legacyInputMode || null;\n\n    // To configure the minimum expiry date to a merchant defined value - this means the card has to be valid until at least this date\n    this.config.minimumExpiryDate = props.minimumExpiryDate || null;\n\n    this.config.sfLogAtStart = window._b$dl === true;\n\n    const sfBundleType: string = this.config.isCreditCardType ? 'card' : props.type;\n\n    // Add a hash of the origin to ensure urls are different across domains\n    const d = btoa(window.location.origin);\n\n    /**\n     * Unless we are forcing the use of the compat version via card config\n     * - detect Edge vn \\<= 18 & IE11 - who don't support TextEncoder; and use this as an indicator to load a different, compatible, version of SF\n     */\n    const needsJWECompatVersion = props.forceCompat ? true : !(typeof window.TextEncoder === 'function');\n\n    const bundleType = `${sfBundleType}${needsJWECompatVersion ? 'Compat' : ''}`; // e.g. 'card' or 'cardCompat'\n\n    this.config.iframeSrc = `${this.config.loadingContext}securedfields/${props.clientKey}/${SF_VERSION}/securedFields.html?type=${bundleType}&d=${d}`;\n\n    // TODO###### FOR QUICK LOCAL TESTING of sf\n    if (process.env.NODE_ENV === 'development' && process.env.__SF_ENV__ !== 'build') {\n        this.config.iframeSrc = `${process.env.__SF_ENV__}securedFields.${SF_VERSION}.html?type=${sfBundleType}`;\n    }\n    // TODO######\n}\n"],"names":["handleConfig","props","this","config","cardGroupTypes","getCardGroupTypes","loadingContext","logger","str","charAt","length","isCreditCardType","NON_CREDIT_CARD_TYPE_SECURED_FIELDS","includes","type","iframeUIConfig","autoFocus","showWarnings","trimTrailingSeparator","keypadFix","legacyInputMode","minimumExpiryDate","sfLogAtStart","window","_b$dl","sfBundleType","d","btoa","location","origin","bundleType","forceCompat","TextEncoder","iframeSrc","clientKey","SF_VERSION"],"mappings":"4MAWO,SAASA,EAAaC,GAEzBC,KAAKC,OAAOC,eAAiBC,EAAkBJ,EAAMG,gBAMrD,MAAME,EAAyBL,EAAMK,eAErC,IAAKA,EAED,YADAC,EAAY,2DAKCC,IAAAA,EACjBN,KAAKC,OAAOG,eAA8C,OADzCE,EACqBF,GADVG,OAAOD,EAAIE,OAAS,GACgBJ,EAAiB,GAAGA,KAGpFJ,KAAKC,OAAOQ,kBAAgF,IAA7DC,EAAoCC,SAASZ,EAAMa,MAGlFZ,KAAKC,OAAOY,eAAiBd,EAAMc,gBAAkB,CAAC,EAGtDb,KAAKC,OAAOa,aAAkC,IAApBf,EAAMe,WAA2C,UAApBf,EAAMe,WAG7Dd,KAAKC,OAAOc,cAAsC,IAAvBhB,EAAMgB,cAAgD,SAAvBhB,EAAMgB,aAGhEf,KAAKC,OAAOe,yBAA0D,IAAhCjB,EAAMiB,uBAAmE,UAAhCjB,EAAMiB,uBAGrFhB,KAAKC,OAAOgB,aAAkC,IAApBlB,EAAMkB,WAA2C,UAApBlB,EAAMkB,WAG7DjB,KAAKC,OAAOiB,gBAAkBnB,EAAMmB,iBAAmB,KAGvDlB,KAAKC,OAAOkB,kBAAoBpB,EAAMoB,mBAAqB,KAE3DnB,KAAKC,OAAOmB,cAAgC,IAAjBC,OAAOC,MAElC,MAAMC,EAAuBvB,KAAKC,OAAOQ,iBAAmB,OAASV,EAAMa,KAGrEY,EAAIC,KAAKJ,OAAOK,SAASC,QAQzBC,EAAa,GAAGL,MAFQxB,EAAM8B,eAAqD,mBAAvBR,OAAOS,aAEZ,SAAW,KAExE9B,KAAKC,OAAO8B,UAAY,GAAG/B,KAAKC,OAAOG,+BAA+BL,EAAMiC,aAAaC,6BAAsCL,OAAgBJ,GAOnJ"}