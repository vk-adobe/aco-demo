{"version":3,"file":"utils.js","sources":["../../../../../src/components/internal/SecuredFields/utils.ts"],"sourcesContent":["import { Resources } from '../../../core/Context/Resources';\nimport { camelCaseToSnakeCase } from '../../../utils/textUtils';\nimport { ALL_SECURED_FIELDS, ENCRYPTED } from './lib/constants';\n\n/**\n * Used by SecuredFieldsProviderHandlers\n */\nexport const getCardImageUrl = (brand, resources: Resources) => {\n    const type = brand === 'card' ? 'nocard' : brand || 'nocard';\n\n    const imageOptions = {\n        type,\n        extension: 'svg'\n    };\n\n    return resources.getImage(imageOptions)(type);\n};\n\n/**\n * Used by Card.tsx & SecuredFields.tsx\n * @param fieldType -\n */\nexport const fieldTypeToSnakeCase = (fieldType: string) => {\n    let str = camelCaseToSnakeCase(fieldType);\n    // SFs need their fieldType mapped to what the endpoint expects\n    if (ALL_SECURED_FIELDS.includes(fieldType)) {\n        str = str.substring(ENCRYPTED.length + 1); // strip 'encrypted_' off the string\n    }\n    return str;\n};\n"],"names":["getCardImageUrl","brand","resources","type","imageOptions","extension","getImage","fieldTypeToSnakeCase","fieldType","str","camelCaseToSnakeCase","ALL_SECURED_FIELDS","includes","substring","ENCRYPTED","length"],"mappings":"0IAOO,MAAMA,EAAkB,CAACC,EAAOC,KACnC,MAAMC,EAAiB,SAAVF,EAAmB,SAAWA,GAAS,SAE9CG,EAAe,CACjBD,OACAE,UAAW,OAGf,OAAOH,EAAUI,SAASF,EAAnBF,CAAiCC,EAAAA,EAO/BI,EAAwBC,IACjC,IAAIC,EAAMC,EAAqBF,GAK/B,OAHIG,EAAmBC,SAASJ,KAC5BC,EAAMA,EAAII,UAAUC,EAAUC,OAAS,IAEpCN,CAAAA"}