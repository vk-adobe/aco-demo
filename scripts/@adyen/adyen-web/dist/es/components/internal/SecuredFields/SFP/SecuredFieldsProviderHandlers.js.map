{"version":3,"file":"SecuredFieldsProviderHandlers.js","sources":["../../../../../../src/components/internal/SecuredFields/SFP/SecuredFieldsProviderHandlers.ts"],"sourcesContent":["import { getCardImageUrl } from '../utils';\nimport {\n    ENCRYPTED_SECURITY_CODE,\n    ENCRYPTED_CARD_NUMBER,\n    CVC_POLICY_REQUIRED,\n    DATE_POLICY_REQUIRED,\n    ENCRYPTED_EXPIRY_DATE,\n    OPTIONAL,\n    HIDDEN,\n    ENCRYPTED_EXPIRY_MONTH,\n    ENCRYPTED_EXPIRY_YEAR\n} from '../lib/constants';\nimport {\n    CardErrorData,\n    CardFocusData,\n    CardBrandData,\n    CardAllValidData,\n    CardFieldValidData,\n    CardAutoCompleteData,\n    CardConfigSuccessData,\n    CardLoadData,\n    SFKeyPressObj\n} from '../lib/types';\nimport { existy } from '../../../../utils/commonUtils';\nimport AdyenCheckoutError from '../../../../core/Errors/AdyenCheckoutError';\n\n/**\n * Emits the onLoad event\n * Here we can assume all securedFields iframes have fired their 'load' event\n */\nfunction handleOnLoad(cbObj: CardLoadData): void {\n    // Clear 'loading' timeout\n    clearTimeout(this.csfLoadFailTimeout);\n    this.csfLoadFailTimeout = null;\n\n    // Propagate onLoad event\n    this.props.onLoad(cbObj);\n\n    /**\n     * Having seen that the securedFields iframes have loaded some kind of content (we don't know what, yet)\n     * - setTimeout since we expect to get a successful configuration message \"within a reasonable time\"\n     *\n     * Now we catch clientKey & environment mismatch in core.ts - this timeout being called indicates that the securedFields have not all configured\n     * - so we need to clear the loading spinner to see if the securedFields are reporting anything\n     */\n    this.csfConfigFailTimeout = setTimeout(() => {\n        if (this.state.status !== 'ready') {\n            // Hide the spinner\n            this.setState({ status: 'csfConfigFailure' });\n            // Report the error\n            this.props.onError(new AdyenCheckoutError('ERROR', 'secured fields have failed to configure'));\n        }\n    }, this.csfConfigFailTimeoutMS);\n}\n\n/**\n * Emits the onConfigSuccess (ready) event\n * Here we can assume CSF is loaded, configured and ready to be used\n */\nfunction handleOnConfigSuccess(cbObj: CardConfigSuccessData): void {\n    // Clear 'config' timeout\n    clearTimeout(this.csfConfigFailTimeout);\n    this.csfConfigFailTimeout = null;\n\n    this.setState({ status: 'ready' }, () => {\n        // Propagate onConfigSuccess event\n        this.props.onConfigSuccess(cbObj);\n    });\n}\n\n/**\n * Emits the onAllValid event\n */\nfunction handleOnAllValid(status: CardAllValidData): boolean {\n    // Form cannot be valid whilst there is an unsupported card\n    if (this.state.detectedUnsupportedBrands) {\n        return false;\n    }\n\n    this.setState({ isSfpValid: status.allValid }, () => {\n        // New - fixes maestro-with-error-on-optional-cvc-field bug\n        this.props.onChange(this.state, { event: 'handleOnAllValid' });\n        // Propagate onAllValid event\n        this.props.onAllValid(status);\n    });\n\n    return true;\n}\n\n/**\n * Saves a field value from CSF in the CardInput state\n * Emits the onFieldValid event\n */\nfunction handleOnFieldValid(fieldObj: CardFieldValidData): boolean {\n    // A card number field cannot be valid whilst there is an unsupported card\n    if (this.state.detectedUnsupportedBrands && fieldObj.fieldType === ENCRYPTED_CARD_NUMBER) {\n        return false;\n    }\n\n    const setValidFieldState = prevState => ({\n        data: { ...prevState.data, [fieldObj.encryptedFieldName]: fieldObj.blob },\n        valid: { ...prevState.valid, [fieldObj.encryptedFieldName]: fieldObj.valid },\n        /**\n         * For a field that has just received valid:true (field has just been completed & encrypted) - mark the error state for this field as false\n         * For a field that has just received valid:false (field was encrypted, now is not)\n         *  - field is either in a state of being incomplete but without errors (digit deleted) - so mark the error state for this field as false\n         *  or has switched from valid/encrypted state to being in error (digit edited to one that puts the field in error) - so keep any error that\n         *  might just have been set\n         */\n        errors: { ...prevState.errors, [fieldObj.fieldType]: prevState.errors[fieldObj.fieldType] ?? false }\n    });\n\n    this.setState(setValidFieldState, () => {\n        this.props.onChange(this.state, { event: 'handleOnFieldValid', fieldType: fieldObj.fieldType });\n\n        // Propagate onFieldValid event\n        this.props.onFieldValid(fieldObj);\n    });\n\n    return true;\n}\n\nfunction fieldIsInError(fieldType: string, policy: string, numCharsObj: object, errorsObj) {\n    return (policy === OPTIONAL || policy === HIDDEN) && numCharsObj[fieldType] === 0 ? false : errorsObj[fieldType];\n}\n\n/**\n * Saves the card brand in state\n * Emits the onBrand event\n */\nfunction handleOnBrand(cardInfo: CardBrandData): void {\n    this.setState(\n        prevState => {\n            /**\n             * If we change brand to one where the cvc or date field(s) are not required & are empty - then these fields cannot be in error\n             * (scenario: have validated empty form, then choose brand w. optional/hidden cvc or date)...\n             * ...else propagate the existing error.\n             */\n            const cvcFieldInError = fieldIsInError(ENCRYPTED_SECURITY_CODE, cardInfo.cvcPolicy, this.numCharsInField, prevState.errors);\n\n            const dateFieldInError =\n                this.numDateFields === 1\n                    ? fieldIsInError(ENCRYPTED_EXPIRY_DATE, cardInfo.expiryDatePolicy, this.numCharsInField, prevState.errors)\n                    : null;\n\n            // For custom card comp\n            const monthFieldInError =\n                this.numDateFields === 2\n                    ? fieldIsInError(ENCRYPTED_EXPIRY_MONTH, cardInfo.expiryDatePolicy, this.numCharsInField, prevState.errors)\n                    : null;\n\n            const yearFieldInError =\n                this.numDateFields === 2\n                    ? fieldIsInError(ENCRYPTED_EXPIRY_YEAR, cardInfo.expiryDatePolicy, this.numCharsInField, prevState.errors)\n                    : null;\n            // --\n            /** end */\n\n            return {\n                brand: cardInfo.brand,\n                cvcPolicy: cardInfo.cvcPolicy ?? CVC_POLICY_REQUIRED,\n                showSocialSecurityNumber: cardInfo.showSocialSecurityNumber,\n                errors: {\n                    ...prevState.errors,\n                    ...(existy(cvcFieldInError) && { [ENCRYPTED_SECURITY_CODE]: cvcFieldInError }),\n                    ...(existy(dateFieldInError) && { [ENCRYPTED_EXPIRY_DATE]: dateFieldInError }),\n                    ...(existy(monthFieldInError) && { [ENCRYPTED_EXPIRY_MONTH]: monthFieldInError }),\n                    ...(existy(yearFieldInError) && { [ENCRYPTED_EXPIRY_YEAR]: yearFieldInError })\n                },\n                expiryDatePolicy: cardInfo.expiryDatePolicy ?? DATE_POLICY_REQUIRED\n            };\n        },\n        () => {\n            this.props.onChange(this.state, { event: 'handleOnBrand' });\n\n            // Enhance data object with the url for the brand image, first checking if the merchant has configured their own one for this brand\n            const brandImageUrl = this.props.brandsConfiguration[cardInfo.brand]?.icon ?? getCardImageUrl(cardInfo.brand, this.props.resources);\n            this.props.onBrand({ ...cardInfo, brandImageUrl });\n        }\n    );\n}\n\n/**\n * Handles validation errors\n */\nfunction handleOnError(cbObj: CardErrorData, hasUnsupportedCard: boolean = null): boolean {\n    const errorCode = cbObj.error;\n\n    this.setState(\n        prevState => ({\n            errors: { ...prevState.errors, [cbObj.fieldType]: errorCode || false },\n            // If dealing with an unsupported card ensure these card number related fields are reset re. pasting a full, unsupported card straight in\n            ...(hasUnsupportedCard && { data: { ...prevState.data, [ENCRYPTED_CARD_NUMBER]: undefined } }),\n            ...(hasUnsupportedCard && { valid: { ...prevState.valid, [ENCRYPTED_CARD_NUMBER]: false } }),\n            ...(hasUnsupportedCard && { isSfpValid: false })\n        }),\n        () => {\n            this.props.onChange(this.state, { event: 'handleOnError', fieldType: cbObj.fieldType });\n        }\n    );\n\n    return true;\n}\n\nfunction handleFocus(cbObj: CardFocusData): void {\n    this.numCharsInField[cbObj.fieldType] = cbObj.numChars;\n\n    this.props.onFocus(cbObj);\n}\n\nfunction handleOnTouchstartIOS(cbObj): void {\n    // disableIOSArrowKeys is either null or a function (in which case we should call it)\n    this.props.disableIOSArrowKeys?.(cbObj);\n}\n\n// Only called for holder name (from CSF>partials>processAutoComplete)\nfunction handleOnAutoComplete(cbObj: CardAutoCompleteData): void {\n    this.setState({ autoCompleteName: cbObj.value }, () => {\n        this.props.onChange(this.state, { event: 'handleOnAutoComplete', fieldType: cbObj.fieldType });\n        this.setState({ autoCompleteName: null }); // Nullify ref after sending it (lets shopper edit holder name)\n    });\n    this.props.onAutoComplete(cbObj);\n}\n\nfunction handleKeyPressed(obj: SFKeyPressObj): void {\n    if (obj.action === 'enterKeyPressed') {\n        const kb = new KeyboardEvent('keypress', {\n            bubbles: true,\n            cancelable: true,\n            key: 'Enter',\n            code: 'Enter'\n        });\n        this.props.handleKeyPress?.(kb);\n    }\n}\n\n/**\n * Handles cases where no secured fields are necessary (one click payments without CVC)\n * Automatically resolves with a valid state\n */\nfunction handleOnNoDataRequired(): void {\n    this.setState({ status: 'ready' }, () => this.props.onChange({ isSfpValid: true }));\n}\n\nexport default {\n    handleFocus,\n    handleOnAllValid,\n    handleOnAutoComplete,\n    handleOnFieldValid,\n    handleOnLoad,\n    handleOnConfigSuccess,\n    handleOnBrand,\n    handleOnError,\n    handleOnNoDataRequired,\n    handleOnTouchstartIOS,\n    handleKeyPressed\n};\n"],"names":["fieldIsInError","fieldType","policy","numCharsObj","errorsObj","OPTIONAL","HIDDEN","handlers","handleFocus","cbObj","this","numCharsInField","numChars","props","onFocus","handleOnAllValid","status","state","detectedUnsupportedBrands","setState","isSfpValid","allValid","onChange","event","onAllValid","handleOnAutoComplete","autoCompleteName","value","onAutoComplete","handleOnFieldValid","fieldObj","ENCRYPTED_CARD_NUMBER","prevState","data","encryptedFieldName","blob","valid","errors","onFieldValid","handleOnLoad","clearTimeout","csfLoadFailTimeout","onLoad","csfConfigFailTimeout","setTimeout","onError","AdyenCheckoutError","csfConfigFailTimeoutMS","handleOnConfigSuccess","onConfigSuccess","handleOnBrand","cardInfo","cvcFieldInError","ENCRYPTED_SECURITY_CODE","cvcPolicy","dateFieldInError","numDateFields","ENCRYPTED_EXPIRY_DATE","expiryDatePolicy","monthFieldInError","ENCRYPTED_EXPIRY_MONTH","yearFieldInError","ENCRYPTED_EXPIRY_YEAR","brand","CVC_POLICY_REQUIRED","showSocialSecurityNumber","existy","DATE_POLICY_REQUIRED","brandImageUrl","brandsConfiguration","icon","getCardImageUrl","resources","onBrand","handleOnError","hasUnsupportedCard","errorCode","error","undefined","handleOnNoDataRequired","handleOnTouchstartIOS","disableIOSArrowKeys","handleKeyPressed","obj","action","kb","KeyboardEvent","bubbles","cancelable","key","code","handleKeyPress"],"mappings":"6ZA0HA,SAASA,EAAeC,EAAmBC,EAAgBC,EAAqBC,GAC5E,OAAQF,IAAWG,GAAYH,IAAWI,GAAsC,IAA3BH,EAAYF,KAA2BG,EAAUH,EAC1G,CAwHA,IAAeM,EAAA,CACXC,YAzCJ,SAAqBC,GACjBC,KAAKC,gBAAgBF,EAAMR,WAAaQ,EAAMG,SAE9CF,KAAKG,MAAMC,QAAQL,EACvB,EAsCIM,iBA7KJ,SAA0BC,GAEtB,OAAIN,KAAKO,MAAMC,4BAIfR,KAAKS,SAAS,CAAEC,WAAYJ,EAAOK,WAAY,KAE3CX,KAAKG,MAAMS,SAASZ,KAAKO,MAAO,CAAEM,MAAO,qBAEzCb,KAAKG,MAAMW,WAAWR,EAAAA,KAGnB,EACX,EAgKIS,qBA/BJ,SAA8BhB,GAC1BC,KAAKS,SAAS,CAAEO,iBAAkBjB,EAAMkB,QAAS,KAC7CjB,KAAKG,MAAMS,SAASZ,KAAKO,MAAO,CAAEM,MAAO,uBAAwBtB,UAAWQ,EAAMR,YAClFS,KAAKS,SAAS,CAAEO,iBAAkB,MAAK,IAE3ChB,KAAKG,MAAMe,eAAenB,EAC9B,EA0BIoB,mBA3JJ,SAA4BC,GAExB,QAAIpB,KAAKO,MAAMC,2BAA6BY,EAAS7B,YAAc8B,KAiBnErB,KAAKS,UAbsBa,IAAc,CACrCC,KAAM,IAAKD,EAAUC,KAAM,CAACH,EAASI,oBAAqBJ,EAASK,MACnEC,MAAO,IAAKJ,EAAUI,MAAO,CAACN,EAASI,oBAAqBJ,EAASM,OAQrEC,OAAQ,IAAKL,EAAUK,OAAQ,CAACP,EAAS7B,WAAY+B,EAAUK,OAAOP,EAAS7B,aAAc,OAG/D,KAC9BS,KAAKG,MAAMS,SAASZ,KAAKO,MAAO,CAAEM,MAAO,qBAAsBtB,UAAW6B,EAAS7B,YAGnFS,KAAKG,MAAMyB,aAAaR,EAAAA,KAGrB,EACX,EAiIIS,aA3NJ,SAAsB9B,GAElB+B,aAAa9B,KAAK+B,oBAClB/B,KAAK+B,mBAAqB,KAG1B/B,KAAKG,MAAM6B,OAAOjC,GASlBC,KAAKiC,qBAAuBC,YAAW,KACT,UAAtBlC,KAAKO,MAAMD,SAEXN,KAAKS,SAAS,CAAEH,OAAQ,qBAExBN,KAAKG,MAAMgC,QAAQ,IAAIC,EAAmB,QAAS,4CACvD,GACDpC,KAAKqC,uBACZ,EAqMIC,sBA/LJ,SAA+BvC,GAE3B+B,aAAa9B,KAAKiC,sBAClBjC,KAAKiC,qBAAuB,KAE5BjC,KAAKS,SAAS,CAAEH,OAAQ,UAAW,KAE/BN,KAAKG,MAAMoC,gBAAgBxC,EAAAA,GAEnC,EAuLIyC,cAzHJ,SAAuBC,GACnBzC,KAAKS,UACDa,IAMI,MAAMoB,EAAkBpD,EAAeqD,EAAyBF,EAASG,UAAW5C,KAAKC,gBAAiBqB,EAAUK,QAE9GkB,EACqB,IAAvB7C,KAAK8C,cACCxD,EAAeyD,EAAuBN,EAASO,iBAAkBhD,KAAKC,gBAAiBqB,EAAUK,QACjG,KAGJsB,EACqB,IAAvBjD,KAAK8C,cACCxD,EAAe4D,EAAwBT,EAASO,iBAAkBhD,KAAKC,gBAAiBqB,EAAUK,QAClG,KAEJwB,EACqB,IAAvBnD,KAAK8C,cACCxD,EAAe8D,EAAuBX,EAASO,iBAAkBhD,KAAKC,gBAAiBqB,EAAUK,QACjG,KAIV,MAAO,CACH0B,MAAOZ,EAASY,MAChBT,UAAWH,EAASG,WAAaU,EACjCC,yBAA0Bd,EAASc,yBACnC5B,OAAQ,IACDL,EAAUK,UACT6B,EAAOd,IAAoB,CAAEC,CAACA,GAA0BD,MACxDc,EAAOX,IAAqB,CAAEE,CAACA,GAAwBF,MACvDW,EAAOP,IAAsB,CAAEC,CAACA,GAAyBD,MACzDO,EAAOL,IAAqB,CAAEC,CAACA,GAAwBD,IAE/DH,iBAAkBP,EAASO,kBAAoBS,EACnD,IAEJ,KACIzD,KAAKG,MAAMS,SAASZ,KAAKO,MAAO,CAAEM,MAAO,kBAGzC,MAAM6C,EAAgB1D,KAAKG,MAAMwD,oBAAoBlB,EAASY,QAAQO,MAAQC,EAAgBpB,EAASY,MAAOrD,KAAKG,MAAM2D,WACzH9D,KAAKG,MAAM4D,QAAQ,IAAKtB,EAAUiB,iBAAc,GAG5D,EAwEIM,cAnEJ,SAAuBjE,EAAsBkE,EAA8B,MACvE,MAAMC,EAAYnE,EAAMoE,MAexB,OAbAnE,KAAKS,UACDa,IAAc,CACVK,OAAQ,IAAKL,EAAUK,OAAQ,CAAC5B,EAAMR,WAAY2E,IAAa,MAE3DD,GAAsB,CAAE1C,KAAM,IAAKD,EAAUC,KAAMF,CAACA,QAAwB+C,OAC5EH,GAAsB,CAAEvC,MAAO,IAAKJ,EAAUI,MAAOL,CAACA,IAAwB,OAC9E4C,GAAsB,CAAEvD,YAAY,OAE5C,KACIV,KAAKG,MAAMS,SAASZ,KAAKO,MAAO,CAAEM,MAAO,gBAAiBtB,UAAWQ,EAAMR,WAAU,KAItF,CACX,EAmDI8E,uBAbJ,WACIrE,KAAKS,SAAS,CAAEH,OAAQ,UAAW,IAAMN,KAAKG,MAAMS,SAAS,CAAEF,YAAY,KAC/E,EAYI4D,sBA5CJ,SAA+BvE,GAE3BC,KAAKG,MAAMoE,sBAAsBxE,EACrC,EA0CIyE,iBA/BJ,SAA0BC,GACtB,GAAmB,oBAAfA,EAAIC,OAA8B,CAClC,MAAMC,EAAK,IAAIC,cAAc,WAAY,CACrCC,SAAS,EACTC,YAAY,EACZC,IAAK,QACLC,KAAM,UAEVhF,KAAKG,MAAM8E,iBAAiBN,EAChC,CACJ"}