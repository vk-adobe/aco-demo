{"version":3,"file":"extensions.js","sources":["../../../../../../src/components/internal/SecuredFields/binLookup/extensions.ts"],"sourcesContent":["import { SingleBrandResetObject } from '../SFP/types';\nimport { BrandObject } from '../../../Card/types';\nimport createCardVariantSwitcher from './createCardVariantSwitcher';\nimport { BRAND_ICON_UI_EXCLUSION_LIST } from '../lib/constants';\n\n// Externally testable utils\nexport const containsExcludedBrand = (brandsArr: BrandObject[], excludedBrands: string[]): boolean => {\n    return brandsArr.reduce((acc, brandObj) => acc || excludedBrands.includes(brandObj.brand), false);\n};\n\nexport const cloneBrandsArr = (brandsArr: BrandObject[]): BrandObject[] => brandsArr.map(item => ({ ...item }));\n\nexport const removeExcludedBrand = (brandsArr: BrandObject[], mainBrand1 = 'mc', mainBrand2 = 'visa'): BrandObject[] => {\n    const clonedBrands: BrandObject[] = cloneBrandsArr(brandsArr);\n\n    if (clonedBrands[0].brand !== mainBrand1 && clonedBrands[0].brand !== mainBrand2) clonedBrands.reverse();\n    clonedBrands.length = 1;\n    return clonedBrands;\n};\n// --\n\nexport default function extensions(props, refs, states, hasPanLengthRef: Partial<{ current }> = {}) {\n    // Destructure props, refs and state hooks\n    const { type, cvcPolicy } = props;\n    const { sfp } = refs;\n    const { dualBrandSelectElements, setDualBrandSelectElements, setSelectedBrandValue, issuingCountryCode, setIssuingCountryCode } = states;\n\n    return {\n        /**\n         * Handle the binLookup response object generated in triggerBinLookup and process it in relation to the CardInput and it's sub-components.\n         * e.g. we might need to add/remove additional markup (a selector for brands), and inform SFP of the issuingCountryCode & detected brand(s).\n         *\n         * @param binLookupResponse -\n         * @param isReset -\n         */\n        processBinLookup: (binLookupResponse, isReset) => {\n            const issuingCode = binLookupResponse?.issuingCountryCode ? binLookupResponse.issuingCountryCode.toLowerCase() : null;\n            setIssuingCountryCode(issuingCode);\n\n            // Reset UI\n            if (!binLookupResponse || !Object.keys(binLookupResponse).length) {\n                setDualBrandSelectElements([]);\n                setSelectedBrandValue('');\n\n                // If /binLookup has 'reset' then for a generic card the internal regex will kick in to show the right brand icon - so set to null\n                // However for a single-branded card we need to pass the \"base\" type so the brand logo is reset - so set to type\n                const brandToReset = isReset && type !== 'card' ? type : null;\n\n                sfp.current.processBinLookupResponse(binLookupResponse, {\n                    brand: brandToReset,\n                    cvcPolicy: cvcPolicy // undefined except for Bancontact\n                } as SingleBrandResetObject);\n\n                // Reset storage var\n                hasPanLengthRef.current = 0;\n                return;\n            }\n\n            // RESULT: binLookup has found a result so proceed accordingly\n            if (binLookupResponse.supportedBrands?.length) {\n                const hasExcludedBrand: boolean = containsExcludedBrand(binLookupResponse.supportedBrands, BRAND_ICON_UI_EXCLUSION_LIST);\n\n                const supportedBrands: BrandObject[] = hasExcludedBrand\n                    ? removeExcludedBrand(binLookupResponse.supportedBrands)\n                    : cloneBrandsArr(binLookupResponse.supportedBrands);\n\n                // 1) Multiple options found - add to the UI & inform SFP\n                if (supportedBrands.length > 1) {\n                    // --\n                    const switcherObj = createCardVariantSwitcher(supportedBrands);\n\n                    // Set properties on state to trigger the dual branding icons in the UI\n                    setDualBrandSelectElements(switcherObj.dualBrandSelectElements);\n                    setSelectedBrandValue(switcherObj.selectedBrandValue); // initially this value from switcherObj will be ''\n\n                    // Pass an object through to SFP\n                    sfp.current.processBinLookupResponse({\n                        issuingCountryCode: binLookupResponse.issuingCountryCode,\n                        supportedBrands: [switcherObj.leadBrand]\n                    });\n\n                    // Store the fact the binLookup obj has a panLength prop\n                    if (switcherObj.leadBrand.panLength > 0) {\n                        hasPanLengthRef.current = switcherObj.leadBrand.panLength;\n                    }\n\n                    // 2) Single option found (binValueObject.supportedBrands.length === 1)\n                } else {\n                    // Reset UI\n                    setDualBrandSelectElements([]);\n                    setSelectedBrandValue('');\n\n                    // Set (single) value from binLookup so it will be added to the 'brand' property in the paymentMethod object\n                    // EXCEPT - if we are dealing with a brand that we exclude from the UI\n                    if (!hasExcludedBrand) setSelectedBrandValue(supportedBrands[0].brand);\n\n                    // Pass object through to SFP\n                    sfp.current.processBinLookupResponse({\n                        issuingCountryCode: binLookupResponse.issuingCountryCode,\n                        supportedBrands\n                    });\n\n                    // Store the fact the binLookup obj has a panLength prop\n                    if (supportedBrands[0].panLength > 0) {\n                        hasPanLengthRef.current = supportedBrands[0].panLength;\n                    }\n                }\n            }\n        },\n        /**\n         * Handler for clicks on the icons added in response to the /binLookup call\n         * Inform SFP of the brand changes when these selections are made\n         */\n        handleDualBrandSelection: (e: Event | string): void => {\n            let value: Event | string = e;\n            if (e instanceof Event) {\n                const target = e.target as HTMLLIElement;\n                value = target.getAttribute('data-value') || target.getAttribute('value');\n            }\n\n            // Check if we have a value and whether that value corresponds to a brandObject we can propagate\n            // If either are false then abandon the process\n            let brandObjArr: BrandObject[] = [];\n            if (value) {\n                // Find the brandObject with the matching brand value and place into an array\n                brandObjArr = dualBrandSelectElements.reduce((acc, item) => {\n                    if (item.brandObject.brand === value) {\n                        acc.push(item.brandObject);\n                    }\n                    return acc;\n                }, []);\n\n                if (!brandObjArr.length) {\n                    return; // no brand object associated with value was found\n                }\n            } else {\n                return; // no value passed\n            }\n\n            setSelectedBrandValue(value);\n\n            // Pass brand object into SecuredFields\n            sfp.current.processBinLookupResponse({\n                issuingCountryCode,\n                supportedBrands: brandObjArr,\n                isDualBrandSelection: true\n            });\n        }\n    };\n}\n"],"names":["containsExcludedBrand","brandsArr","excludedBrands","reduce","acc","brandObj","includes","brand","cloneBrandsArr","map","item","removeExcludedBrand","mainBrand1","mainBrand2","clonedBrands","reverse","length","extensions","props","refs","states","hasPanLengthRef","type","cvcPolicy","sfp","dualBrandSelectElements","setDualBrandSelectElements","setSelectedBrandValue","issuingCountryCode","setIssuingCountryCode","processBinLookup","binLookupResponse","isReset","issuingCode","toLowerCase","Object","keys","brandToReset","current","processBinLookupResponse","supportedBrands","hasExcludedBrand","BRAND_ICON_UI_EXCLUSION_LIST","switcherObj","createCardVariantSwitcher","selectedBrandValue","leadBrand","panLength","handleDualBrandSelection","e","value","Event","target","getAttribute","brandObjArr","brandObject","push","isDualBrandSelection"],"mappings":"iHAMO,MAAMA,EAAwB,CAACC,EAA0BC,IACrDD,EAAUE,QAAO,CAACC,EAAKC,IAAaD,GAAOF,EAAeI,SAASD,EAASE,SAAQ,GAGlFC,EAAkBP,GAA4CA,EAAUQ,KAAIC,IAAS,IAAKA,MAE1FC,EAAsB,CAACV,EAA0BW,EAAa,KAAMC,EAAa,UAC1F,MAAMC,EAA8BN,EAAeP,GAInD,OAFIa,EAAa,GAAGP,QAAUK,GAAcE,EAAa,GAAGP,QAAUM,GAAYC,EAAaC,UAC/FD,EAAaE,OAAS,EACfF,CAAAA,EAII,SAASG,EAAWC,EAAOC,EAAMC,EAAQC,EAAwC,CAAA,GAE5F,MAAMC,KAAEA,EAAIC,UAAEA,GAAcL,GACtBM,IAAEA,GAAQL,GACVM,wBAAEA,EAAuBC,2BAAEA,EAA0BC,sBAAEA,EAAqBC,mBAAEA,EAAkBC,sBAAEA,GAA0BT,EAElI,MAAO,CAQHU,iBAAkB,CAACC,EAAmBC,KAClC,MAAMC,EAAcF,GAAmBH,mBAAqBG,EAAkBH,mBAAmBM,cAAgB,KAIjH,GAHAL,EAAsBI,IAGjBF,IAAsBI,OAAOC,KAAKL,GAAmBf,OAAQ,CAC9DU,EAA2B,IAC3BC,EAAsB,IAItB,MAAMU,EAAeL,GAAoB,SAATV,EAAkBA,EAAO,KASzD,OAPAE,EAAIc,QAAQC,yBAAyBR,EAAmB,CACpDxB,MAAO8B,EACPd,UAAWA,SAIfF,EAAgBiB,QAAU,EAE9B,CAGA,GAAIP,EAAkBS,iBAAiBxB,OAAQ,CAC3C,MAAMyB,EAA4BzC,EAAsB+B,EAAkBS,gBAAiBE,GAErFF,EAAiCC,EACjC9B,EAAoBoB,EAAkBS,iBACtChC,EAAeuB,EAAkBS,iBAGvC,GAAIA,EAAgBxB,OAAS,EAAG,CAE5B,MAAM2B,EAAcC,EAA0BJ,GAG9Cd,EAA2BiB,EAAYlB,yBACvCE,EAAsBgB,EAAYE,oBAGlCrB,EAAIc,QAAQC,yBAAyB,CACjCX,mBAAoBG,EAAkBH,mBACtCY,gBAAiB,CAACG,EAAYG,aAI9BH,EAAYG,UAAUC,UAAY,IAClC1B,EAAgBiB,QAAUK,EAAYG,UAAUC,gBAMpDrB,EAA2B,IAC3BC,EAAsB,IAIjBc,GAAkBd,EAAsBa,EAAgB,GAAGjC,OAGhEiB,EAAIc,QAAQC,yBAAyB,CACjCX,mBAAoBG,EAAkBH,mBACtCY,oBAIAA,EAAgB,GAAGO,UAAY,IAC/B1B,EAAgBiB,QAAUE,EAAgB,GAAGO,UAGzD,GAMJC,yBAA2BC,IACvB,IAAIC,EAAwBD,EAC5B,GAAIA,aAAaE,MAAO,CACpB,MAAMC,EAASH,EAAEG,OACjBF,EAAQE,EAAOC,aAAa,eAAiBD,EAAOC,aAAa,QACrE,CAIA,IAAIC,EAA6B,GAC7BJ,IAEAI,EAAc7B,EAAwBtB,QAAO,CAACC,EAAKM,KAC3CA,EAAK6C,YAAYhD,QAAU2C,GAC3B9C,EAAIoD,KAAK9C,EAAK6C,aAEXnD,IACR,IAEEkD,EAAYtC,SAOrBW,EAAsBuB,GAGtB1B,EAAIc,QAAQC,yBAAyB,CACjCX,qBACAY,gBAAiBc,EACjBG,sBAAsB,KAC1B,EAGZ"}