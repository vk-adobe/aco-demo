{"version":3,"file":"processAriaConfig.js","sources":["../../../../../../../../src/components/internal/SecuredFields/lib/securedField/utils/processAriaConfig.ts"],"sourcesContent":["import { addErrorTranslationsToObject } from '../../../../../../core/Errors/utils';\nimport addContextTranslationsToObject from '../../utilities/addContextTranslations';\nimport Language from '../../../../../../language/Language';\nimport { SF_FIELDS_MAP } from '../../constants';\nimport { AriaConfig, AriaConfigObject } from '../../types';\n\n/**\n * Creates an ariaConfig object with 'iframeTitle' and 'label' properties, whose values are retrieved from the translations object.\n * (These values either come from the translation file or have been overwritten by the merchant in a translations config object.)\n * We then add an error object containing the possible errors for any securedField read from the translation file and stored under error-codes\n */\nexport function processAriaConfig(txVariant: string, fieldType: string, i18n: Language, showContextuaElement): AriaConfig {\n    // txVariant can be the scheme name (VISA, Mastercard...) so we put all of them under creditCard\n    const type = ['ach', 'giftcard'].includes(txVariant) ? txVariant : 'creditCard';\n\n    // Get translation for iframeTitle\n    const iframeTitle: string = i18n.get(`${type}.${fieldType}.aria.iframeTitle`);\n\n    // Get translation for aria label using *same* key that is used to label the element - important a11y consideration for (securedField) iframe\n    const label: string = i18n.get(`${type}.${SF_FIELDS_MAP[fieldType]}.label`);\n\n    // Get lang property\n    const lang = i18n.locale;\n\n    // Create a new object with the iframeTitle & label values from translation file\n    const ariaFieldConfigObj: AriaConfigObject = { iframeTitle, label };\n\n    // Add error translations object\n    let enhancedAriaFieldConfigObj: AriaConfigObject = addErrorTranslationsToObject(ariaFieldConfigObj, i18n, fieldType);\n\n    // If allowed, add the translated contextual texts\n    if (showContextuaElement) {\n        enhancedAriaFieldConfigObj = addContextTranslationsToObject(enhancedAriaFieldConfigObj, i18n, txVariant, fieldType);\n    }\n\n    // Create a new aria config object keeping the old entries and adding a new one for this field\n    // N.B. need to do this deconstruction of the original aria config object to break existing refs & avoid getting an \"accumulated\" object\n    return {\n        ...(lang && { lang }),\n        [fieldType]: enhancedAriaFieldConfigObj\n    } as AriaConfig;\n}\n"],"names":["processAriaConfig","txVariant","fieldType","i18n","showContextuaElement","type","includes","iframeTitle","get","label","SF_FIELDS_MAP","lang","locale","enhancedAriaFieldConfigObj","addErrorTranslationsToObject","addContextTranslationsToObject"],"mappings":"kMAWO,SAASA,EAAkBC,EAAmBC,EAAmBC,EAAgBC,GAEpF,MAAMC,EAAO,CAAC,MAAO,YAAYC,SAASL,GAAaA,EAAY,aAG7DM,EAAsBJ,EAAKK,IAAI,GAAGH,KAAQH,sBAG1CO,EAAgBN,EAAKK,IAAI,GAAGH,KAAQK,EAAcR,YAGlDS,EAAOR,EAAKS,OAMlB,IAAIC,EAA+CC,EAHN,CAAEP,cAAaE,SAGwCN,EAAMD,GAS1G,OANIE,IACAS,EAA6BE,EAA+BF,EAA4BV,EAAMF,EAAWC,IAKtG,IACCS,GAAQ,CAAEA,QACdT,CAACA,GAAYW,EAErB"}