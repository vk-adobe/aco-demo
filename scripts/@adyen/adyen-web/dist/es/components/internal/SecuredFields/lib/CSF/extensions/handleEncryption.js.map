{"version":3,"file":"handleEncryption.js","sources":["../../../../../../../../src/components/internal/SecuredFields/lib/CSF/extensions/handleEncryption.ts"],"sourcesContent":["import { makeCallbackObjectsEncryption } from '../utils/callbackUtils';\nimport {\n    ENCRYPTED_EXPIRY_MONTH,\n    ENCRYPTED_EXPIRY_YEAR,\n    ENCRYPTED_SECURITY_CODE,\n    ENCRYPTED_CARD_NUMBER,\n    ENCRYPTED_EXPIRY_DATE\n} from '../../constants';\nimport { processErrors } from '../utils/processErrors';\nimport { truthy } from '../../../../../../utils/commonUtils';\nimport { SFFeedbackObj, CardFieldValidData, EncryptionObj } from '../../types';\nimport postMessageToIframe from '../utils/iframes/postMessageToIframe';\nimport { hasOwnProperty } from '../../../../../../utils/hasOwnProperty';\nimport getIframeContentWin from '../utils/iframes/getIframeContentWin';\n\nexport function handleEncryption(pFeedbackObj: SFFeedbackObj): void {\n    // EXTRACT VARS\n    const fieldType: string = pFeedbackObj.fieldType;\n\n    // SET FOCUS ON OTHER INPUT - If user has just typed a correct expiryDate - set focus on the cvc field OR typed a correct expiryMonth - focus on year field\n    if (this.config.autoFocus) {\n        // pFeedbackObj.type === 'year' when the encryption is happening on an expiryDate field c.f. a separate year field (when it equals ENCRYPTED_EXPIRY_YEAR)\n        if (pFeedbackObj.type === 'year' || fieldType === ENCRYPTED_EXPIRY_YEAR) {\n            this.setFocusOnFrame(ENCRYPTED_SECURITY_CODE);\n        }\n        if (fieldType === ENCRYPTED_EXPIRY_MONTH) {\n            this.setFocusOnFrame(ENCRYPTED_EXPIRY_YEAR);\n        }\n    }\n    //--\n\n    let i: number;\n    let len: number;\n\n    const encryptedObjArr: EncryptionObj[] = pFeedbackObj[fieldType];\n\n    // Set boolean saying this securedField is in an encryptedState\n    this.state.securedFields[fieldType].isEncrypted = true;\n\n    // REMOVE ANY ERRORS ON FIELD e.g. was a full number that failed the luhnCheck, then we corrected the number and now it passes\n    processErrors(\n        { error: '', fieldType } as any as SFFeedbackObj,\n        this.state.securedFields[fieldType],\n        this.state.type,\n        this.props.rootNode,\n        this.callbacks.onError\n    );\n\n    // MAKE ENCRYPTION OBJECTS FOR EACH OF THE INDIVIDUAL INPUTS\n    // N.B. when considering \"individual inputs\" we are concerned with the 4 fields that the checkoutAPI expects to receive for a credit card payment:\n    // encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear\n    const callbackObjectsArr: CardFieldValidData[] = makeCallbackObjectsEncryption({\n        fieldType,\n        txVariant: this.state.type,\n        rootNode: this.props.rootNode,\n        encryptedObjArr\n    });\n\n    // For standalone month field\n    if (fieldType === ENCRYPTED_EXPIRY_MONTH) {\n        if (hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_YEAR)) {\n            const dataObj: object = {\n                txVariant: this.state.type,\n                code: pFeedbackObj.code,\n                blob: encryptedObjArr[0].blob,\n                fieldType: ENCRYPTED_EXPIRY_YEAR,\n                numKey: this.state.securedFields[ENCRYPTED_EXPIRY_YEAR].numKey\n            };\n            postMessageToIframe(dataObj, getIframeContentWin(this.state, ENCRYPTED_EXPIRY_YEAR), this.config.loadingContext);\n        }\n    }\n\n    // For number field - add the endDigits to the encryption object\n    if (fieldType === ENCRYPTED_CARD_NUMBER && truthy(pFeedbackObj.endDigits)) {\n        callbackObjectsArr[0].endDigits = pFeedbackObj.endDigits;\n    }\n\n    // For number field - add the 8 digit issuerBin to the encryption object\n    if (fieldType === ENCRYPTED_CARD_NUMBER && truthy(pFeedbackObj.issuerBin)) {\n        callbackObjectsArr[0].issuerBin = +pFeedbackObj.issuerBin;\n    }\n\n    // Add expiryDate to \"encryptedExpiryYear\" field. It will only be present if the correct config has been sent to SF\n    if (fieldType === ENCRYPTED_EXPIRY_DATE && truthy(pFeedbackObj.expiryDate)) {\n        callbackObjectsArr[1].expiryDate = pFeedbackObj.expiryDate;\n    }\n\n    // BROADCAST VALID STATE OF INDIVIDUAL INPUTS - passing the encryption objects\n    for (i = 0, len = callbackObjectsArr.length; i < len; i += 1) {\n        this.callbacks.onFieldValid(callbackObjectsArr[i]);\n    }\n    //--------------------------------------------\n\n    // STORE & BROADCAST VALID STATE OF THE FORM AS A WHOLE ///////\n    this.validateForm();\n}\n"],"names":["handleEncryption","pFeedbackObj","fieldType","i","len","this","config","autoFocus","type","ENCRYPTED_EXPIRY_YEAR","setFocusOnFrame","ENCRYPTED_SECURITY_CODE","ENCRYPTED_EXPIRY_MONTH","encryptedObjArr","state","securedFields","isEncrypted","processErrors","error","props","rootNode","callbacks","onError","callbackObjectsArr","makeCallbackObjectsEncryption","txVariant","hasOwnProperty","dataObj","code","blob","numKey","postMessageToIframe","getIframeContentWin","loadingContext","ENCRYPTED_CARD_NUMBER","truthy","endDigits","issuerBin","ENCRYPTED_EXPIRY_DATE","expiryDate","length","onFieldValid","validateForm"],"mappings":"uiBAeO,SAASA,EAAiBC,GAE7B,MAAMC,EAAoBD,EAAaC,UAcvC,IAAIC,EACAC,EAZAC,KAAKC,OAAOC,YAEc,SAAtBN,EAAaO,MAAmBN,IAAcO,GAC9CJ,KAAKK,gBAAgBC,GAErBT,IAAcU,GACdP,KAAKK,gBAAgBD,IAQ7B,MAAMI,EAAmCZ,EAAaC,GAGtDG,KAAKS,MAAMC,cAAcb,GAAWc,aAAc,EAGlDC,EACI,CAAEC,MAAO,GAAIhB,aACbG,KAAKS,MAAMC,cAAcb,GACzBG,KAAKS,MAAMN,KACXH,KAAKc,MAAMC,SACXf,KAAKgB,UAAUC,SAMnB,MAAMC,EAA2CC,EAA8B,CAC3EtB,YACAuB,UAAWpB,KAAKS,MAAMN,KACtBY,SAAUf,KAAKc,MAAMC,SACrBP,oBAIJ,GAAIX,IAAcU,GACVc,EAAerB,KAAKS,MAAMC,cAAeN,GAAwB,CACjE,MAAMkB,EAAkB,CACpBF,UAAWpB,KAAKS,MAAMN,KACtBoB,KAAM3B,EAAa2B,KACnBC,KAAMhB,EAAgB,GAAGgB,KACzB3B,UAAWO,EACXqB,OAAQzB,KAAKS,MAAMC,cAAcN,GAAuBqB,QAE5DC,EAAoBJ,EAASK,EAAoB3B,KAAKS,MAAOL,GAAwBJ,KAAKC,OAAO2B,eACrG,CAmBJ,IAfI/B,IAAcgC,GAAyBC,EAAOlC,EAAamC,aAC3Db,EAAmB,GAAGa,UAAYnC,EAAamC,WAI/ClC,IAAcgC,GAAyBC,EAAOlC,EAAaoC,aAC3Dd,EAAmB,GAAGc,WAAapC,EAAaoC,WAIhDnC,IAAcoC,GAAyBH,EAAOlC,EAAasC,cAC3DhB,EAAmB,GAAGgB,WAAatC,EAAasC,YAI/CpC,EAAI,EAAGC,EAAMmB,EAAmBiB,OAAQrC,EAAIC,EAAKD,GAAK,EACvDE,KAAKgB,UAAUoB,aAAalB,EAAmBpB,IAKnDE,KAAKqC,cACT"}