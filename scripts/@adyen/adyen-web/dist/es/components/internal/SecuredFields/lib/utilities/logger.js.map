{"version":3,"file":"logger.js","sources":["../../../../../../../src/components/internal/SecuredFields/lib/utilities/logger.ts"],"sourcesContent":["/**\n * @internal\n * Utility class for logging messages/errors\n * Usage:\n * logger.log('Log message, always visible');\n *\n * For debug only messages:\n * window._b$dl && logger.log('Log message only visible on dev env');\n *\n * Or just use a conditional:\n * ```\n * if (window._b$dl) {\n *     logger.log('Log message only visible on dev env');\n * }\n * ```\n */\n\n/**\n * @internal\n * Logs errors\n * NOTE: changed to 'let' from 'const' for the purpose of running unit tests\n */\n// eslint-disable-next-line prefer-const\nexport let error = typeof window !== 'undefined' && window.console && window.console.error && window.console.error.bind(window.console);\n\n/**\n * @internal\n * Logs info\n */\nexport const info = typeof window !== 'undefined' && window.console && window.console.info && window.console.info.bind(window.console);\n\n/**\n * @internal\n * Logs\n * NOTE: changed to 'let' from 'const' for the purpose of running unit tests\n */\n\nexport let log = typeof window !== 'undefined' && window.console && window.console.log && window.console.log.bind(window.console); // eslint-disable-line\n\n/**\n * @internal\n * Logs warnings\n * NOTE: changed to 'let' from 'const' for the purpose of running unit tests\n */\n\nexport let warn = typeof window !== 'undefined' && window.console && window.console.warn && window.console.warn.bind(window.console); // eslint-disable-line\n"],"names":["error","window","console","bind","info","log","warn"],"mappings":"AAuBO,IAAIA,EAA0B,oBAAXC,QAA0BA,OAAOC,SAAWD,OAAOC,QAAQF,OAASC,OAAOC,QAAQF,MAAMG,KAAKF,OAAOC,SAMzF,oBAAXD,QAA0BA,OAAOC,SAAWD,OAAOC,QAAQE,MAAQH,OAAOC,QAAQE,KAAKD,KAAKF,OAAOC,SAQnHG,IAAAA,EAAwB,oBAAXJ,QAA0BA,OAAOC,SAAWD,OAAOC,QAAQG,KAAOJ,OAAOC,QAAQG,IAAIF,KAAKF,OAAOC,SAQ9GI,EAAyB,oBAAXL,QAA0BA,OAAOC,SAAWD,OAAOC,QAAQI,MAAQL,OAAOC,QAAQI,KAAKH,KAAKF,OAAOC"}