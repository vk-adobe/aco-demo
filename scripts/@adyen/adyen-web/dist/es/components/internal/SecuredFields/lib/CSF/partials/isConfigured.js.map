{"version":3,"file":"isConfigured.js","sources":["../../../../../../../../src/components/internal/SecuredFields/lib/CSF/partials/isConfigured.ts"],"sourcesContent":["import cardType from '../utils/cardType';\nimport { CardObject, CardConfigSuccessData } from '../../types';\nimport * as logger from '../../utilities/logger';\nimport { CVC_POLICY_REQUIRED } from '../../constants';\nimport { CSFThisObject } from '../types';\n\n/**\n * @param csfState - comes from initial, partial, implementation\n * @param csfConfig - comes from initial, partial, implementation\n * @param csfProps - comes from initial, partial, implementation\n * @param csfCallbacks - comes from initial, partial, implementation\n * @param validateForm - comes from initial, partial, implementation\n */\nexport function isConfigured({ csfState, csfConfig, csfProps, csfCallbacks }: CSFThisObject, validateForm): boolean {\n    csfState.isConfigured = true;\n\n    const callbackObj: CardConfigSuccessData = { iframesConfigured: true, type: csfState.type, rootNode: csfProps.rootNode as HTMLElement };\n\n    csfCallbacks.onConfigSuccess(callbackObj);\n\n    // If a recurring card\n    if (csfState.numIframes === 1 && csfConfig.isCreditCardType) {\n        if (csfState.type === 'card') {\n            logger.error(\n                \"ERROR: Payment method with a single secured field - but 'brands' has not been set to an array containing the specific card brand\"\n            );\n            return false;\n        }\n\n        // Get card object from txVariant\n        const card: CardObject = cardType.getCardByBrand(csfState.type);\n\n        // It's possible we don't recognise the card type -\n        // scenario: frontend initially recognises card as e.g. Visa - but then backend tokenises it as a sub-brand which we currently don't recognise\n        if (card) {\n            // Assess whether cvc field is required\n            const cvcPolicy = card.cvcPolicy ?? CVC_POLICY_REQUIRED;\n\n            // If cvc is optional - the form can be considered valid\n            if (cvcPolicy !== CVC_POLICY_REQUIRED) {\n                validateForm();\n            }\n        }\n    }\n    return true;\n}\n"],"names":["isConfigured","csfState","csfConfig","csfProps","csfCallbacks","validateForm","callbackObj","iframesConfigured","type","rootNode","onConfigSuccess","numIframes","isCreditCardType","logger","card","cardType","getCardByBrand","cvcPolicy","CVC_POLICY_REQUIRED"],"mappings":"+IAaO,SAASA,GAAaC,SAAEA,EAAQC,UAAEA,EAASC,SAAEA,EAAQC,aAAEA,GAA+BC,GACzFJ,EAASD,cAAe,EAExB,MAAMM,EAAqC,CAAEC,mBAAmB,EAAMC,KAAMP,EAASO,KAAMC,SAAUN,EAASM,UAK9G,GAHAL,EAAaM,gBAAgBJ,GAGD,IAAxBL,EAASU,YAAoBT,EAAUU,iBAAkB,CACzD,GAAsB,SAAlBX,EAASO,KAIT,OAHAK,EACI,qIAEG,EAIX,MAAMC,EAAmBC,EAASC,eAAef,EAASO,MAI1D,GAAIM,EAAM,EAEYA,EAAKG,WAAaC,KAGlBA,GACdb,GAER,CACJ,CACA,OAAO,CACX"}