{"version":3,"file":"callbackUtils.js","sources":["../../../../../../../../src/components/internal/SecuredFields/lib/CSF/utils/callbackUtils.ts"],"sourcesContent":["import { ENCRYPTED_EXPIRY_DATE } from '../../constants';\nimport { CardFieldValidData, EncryptionObj } from '../../types';\n\ninterface CallbackObjectProps {\n    fieldType: string;\n    encryptedFieldName: string;\n    uuid: string;\n    isValid: boolean;\n    txVariant: string;\n    rootNode: HTMLElement;\n}\n\nconst makeCallbackObj = ({ fieldType, encryptedFieldName, uuid, isValid, txVariant, rootNode }: CallbackObjectProps): CardFieldValidData => ({\n    fieldType, // encryptedCardNumber, encryptedSecurityCode, encryptedExpiryDate\n    encryptedFieldName, // encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear\n    uid: uuid, // card-encrypted-encryptedCardNumber, card-encrypted-encryptedSecurityCode, card-encrypted-month, card-encrypted-year, card-encrypted-encryptedExpiryMonth, card-encrypted-encryptedExpiryYear\n    valid: isValid,\n    type: txVariant,\n    rootNode // A ref to the 'form' element holding the securedFields\n});\n\nexport const makeCallbackObjectsValidation = ({ fieldType, txVariant, rootNode }): CardFieldValidData[] => {\n    // - create callback objects to report the changed valid state of the field\n    const isExpiryDateField: boolean = fieldType === ENCRYPTED_EXPIRY_DATE;\n\n    const callbackObjectsArr: CardFieldValidData[] = [];\n\n    const sepExpiryDateNames: string[] = ['encryptedExpiryMonth', 'encryptedExpiryYear'];\n\n    let i: number;\n    let uuid: string;\n    let encryptedType: string;\n    let encryptedFieldName: string;\n\n    // For expiryDate field we need to remove 2 DOM elements & create 2 objects (relating to month & year)\n    // - for everything else we just need to remove 1 element & create 1 callback object\n    const totalFields: number = isExpiryDateField ? 2 : 1;\n\n    for (i = 0; i < totalFields; i += 1) {\n        encryptedType = isExpiryDateField ? sepExpiryDateNames[i] : fieldType; // encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear\n\n        uuid = `${txVariant}-encrypted-${encryptedType}`; // card-encrypted-encryptedCardNumber, card-encrypted-encryptedSecurityCode, card-encrypted-encryptedExpiryMonth, card-encrypted-encryptedExpiryYear\n\n        encryptedFieldName = isExpiryDateField ? encryptedType : fieldType; // encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear\n\n        // Create objects to broadcast valid state\n        // const callbackObj: CardFieldValidData = makeCallbackObj(pFieldType, encryptedFieldName, uuid, false, pTxVariant, pRootNode, null);\n        const callbackObj: CardFieldValidData = makeCallbackObj({\n            fieldType,\n            encryptedFieldName,\n            uuid,\n            isValid: false,\n            txVariant,\n            rootNode\n        } as CallbackObjectProps);\n\n        callbackObjectsArr.push(callbackObj);\n    }\n\n    return callbackObjectsArr;\n};\n\nexport const makeCallbackObjectsEncryption = ({ fieldType, txVariant, rootNode, encryptedObjArr }): CardFieldValidData[] => {\n    let i: number;\n    let uuid: string;\n    let encryptedObj: EncryptionObj;\n    let encryptedFieldName: string;\n    let encryptedBlob: string;\n\n    const callbackObjectsArr: CardFieldValidData[] = [];\n\n    for (i = 0; i < encryptedObjArr.length; i += 1) {\n        encryptedObj = encryptedObjArr[i];\n        encryptedFieldName = encryptedObj.encryptedFieldName;\n        uuid = `${txVariant}-encrypted-${encryptedFieldName}`;\n        encryptedBlob = encryptedObj.blob;\n\n        // Create objects to broadcast valid state\n        // const callbackObj: CardFieldValidData = makeCallbackObj(fieldType, encryptedFieldName, uuid, true, txVariant, rootNode, code);\n        const callbackObj: CardFieldValidData = makeCallbackObj({\n            fieldType,\n            encryptedFieldName,\n            uuid,\n            isValid: true,\n            txVariant,\n            rootNode\n        } as CallbackObjectProps);\n        callbackObj.blob = encryptedBlob;\n\n        callbackObjectsArr.push(callbackObj);\n    }\n\n    return callbackObjectsArr;\n};\n"],"names":["makeCallbackObj","fieldType","encryptedFieldName","uuid","isValid","txVariant","rootNode","uid","valid","type","makeCallbackObjectsValidation","isExpiryDateField","ENCRYPTED_EXPIRY_DATE","callbackObjectsArr","sepExpiryDateNames","i","encryptedType","totalFields","callbackObj","push","makeCallbackObjectsEncryption","encryptedObjArr","encryptedObj","encryptedBlob","length","blob"],"mappings":"2DAYA,MAAMA,EAAkB,EAAGC,YAAWC,qBAAoBC,OAAMC,UAASC,YAAWC,eAAyD,CACzIL,YACAC,qBACAK,IAAKJ,EACLK,MAAOJ,EACPK,KAAMJ,EACNC,aAGSI,EAAgC,EAAGT,YAAWI,YAAWC,eAElE,MAAMK,EAA6BV,IAAcW,EAE3CC,EAA2C,GAE3CC,EAA+B,CAAC,uBAAwB,uBAE9D,IAAIC,EACAZ,EACAa,EACAd,EAIJ,MAAMe,EAAsBN,EAAoB,EAAI,EAEpD,IAAKI,EAAI,EAAGA,EAAIE,EAAaF,GAAK,EAAG,CACjCC,EAAgBL,EAAoBG,EAAmBC,GAAKd,EAE5DE,EAAO,GAAGE,eAAuBW,IAEjCd,EAAqBS,EAAoBK,EAAgBf,EAIzD,MAAMiB,EAAkClB,EAAgB,CACpDC,YACAC,qBACAC,OACAC,SAAS,EACTC,YACAC,aAGJO,EAAmBM,KAAKD,EAC5B,CAEA,OAAOL,CAAAA,EAGEO,EAAgC,EAAGnB,YAAWI,YAAWC,WAAUe,sBAC5E,IAAIN,EACAZ,EACAmB,EACApB,EACAqB,EAEJ,MAAMV,EAA2C,GAEjD,IAAKE,EAAI,EAAGA,EAAIM,EAAgBG,OAAQT,GAAK,EAAG,CAC5CO,EAAeD,EAAgBN,GAC/Bb,EAAqBoB,EAAapB,mBAClCC,EAAO,GAAGE,eAAuBH,IACjCqB,EAAgBD,EAAaG,KAI7B,MAAMP,EAAkClB,EAAgB,CACpDC,YACAC,qBACAC,OACAC,SAAS,EACTC,YACAC,aAEJY,EAAYO,KAAOF,EAEnBV,EAAmBM,KAAKD,EAC5B,CAEA,OAAOL,CAAAA"}