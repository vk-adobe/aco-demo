{"version":3,"file":"handleIOSTouchEvents.js","sources":["../../../../../../../../src/components/internal/SecuredFields/lib/CSF/extensions/handleIOSTouchEvents.ts"],"sourcesContent":["import { selectOne } from '../../utilities/dom';\nimport ua from '../utils/userAgent';\nimport { on, off } from '../../../../../../utils/listenerUtils';\n\nconst getCaretPos = (pNode: HTMLInputElement | HTMLTextAreaElement): number => {\n    if ('selectionStart' in pNode) {\n        return pNode.selectionStart;\n    }\n    return 0;\n};\n\n/**\n * Detect if touched element is an input or textArea.\n * - If it is do some quirky shit to set focus and caret position on this element\n * - Else do some quirky shit to make the iOS keyboard retract\n *\n * Always then remove this listener and set var saying we have done so (read in CSF...handleFocus)\n * Tell all securedFields some other element now has focus so they can blur themselves\n *\n * @param e -\n */\nfunction touchendListener(e: Event): void {\n    const targetEl: EventTarget = e.target;\n\n    // If other element is Input or TextArea\n    if (targetEl instanceof HTMLInputElement || (HTMLTextAreaElement && targetEl instanceof HTMLTextAreaElement)) {\n        // Force caret to show - 'requires' resetting field's value\n        const val: string = targetEl.value;\n\n        let caretPos: number = getCaretPos(targetEl);\n\n        let adjFlag = false;\n\n        // For some annoying, iOS Safari, reason if caretPos is at the end of the string then it won't show up\n        // - so first decrease it; then set it again, asynchronously\n        if (caretPos === val.length) {\n            caretPos -= 1;\n            adjFlag = true;\n        }\n\n        targetEl.value = val;\n\n        /**\n         * If the input element is of an unexpected type (perhaps the merchant is using a custom button that is an input element, type=\"button\", or,\n         * it is something presented in the 3DS2 flow - both, TBC) then this next line will not work.\n         * However, the input element still has a setSelectionRange property of type \"function\", but trying to call it will throw an error...\n         * so, try, to see if setSelectionRange can be called\n         */\n        try {\n            if (targetEl.setSelectionRange) {\n                targetEl.focus();\n                targetEl.setSelectionRange(caretPos, caretPos);\n\n                // Quirky! (see comment about iOS Safari, above)\n                if (adjFlag) {\n                    caretPos += 1;\n                    setTimeout(() => {\n                        targetEl.setSelectionRange(caretPos, caretPos);\n                    }, 0);\n                }\n            }\n            /* eslint-disable-next-line */\n        } catch (e) {}\n    } else {\n        /**\n         * Workaround for iOS/Safari bug where keypad doesn't retract when SF paymentMethod is no longer active\n         */\n        const hasKeypadFix: boolean = this.config.keypadFix; // to avoid linting no-lonely-if\n        if (hasKeypadFix) {\n            // Create an input we can add focus to.\n            // Otherwise 2nd & sub times the caret gets left in the SF even though it has lost focus and cannot be typed into\n            const rootNode: HTMLElement = this.props.rootNode;\n            const nuInput: HTMLInputElement = document.createElement('input');\n            nuInput.style.width = '1px';\n            nuInput.style.height = '1px';\n            nuInput.style.opacity = '0';\n            nuInput.style.fontSize = '18px'; // prevents zoom\n            rootNode.appendChild(nuInput);\n            nuInput.focus(); // Takes caret from SF\n            rootNode.removeChild(nuInput); // Without this numpad will be replaced with text pad\n        }\n    }\n\n    // Remove listener - it gets reset by next call to handleAdditionalFields from handleFocus\n    this.destroyTouchendListener();\n\n    // Store the fact we have unset the listener\n    this.state.registerFieldForIos = false;\n\n    // Clear focus on secured field inputs now this checkout element has gained focus\n    this.postMessageToAllIframes({ fieldType: 'webInternalElement', fieldClick: true });\n}\n\n/**\n * re. Disabling arrow keys in iOS - need to enable all fields in the form and tell SFs to disable\n *\n * NOTE: Only called when iOS detected & this.props.shouldDisableIOSArrowKeys = true\n */\nfunction touchstartListener(e: Event): void {\n    this.hasGenuineTouchEvents = true;\n    const targetEl: EventTarget = e.target;\n    // If other element is Input or Span (i.e. label text) TODO apply to other types of el?\n    if (targetEl instanceof HTMLInputElement || targetEl instanceof HTMLSpanElement) {\n        this.postMessageToAllIframes({ fieldType: 'webInternalElement', checkoutTouchEvent: true });\n\n        const name = targetEl.getAttribute('name') ?? targetEl.getAttribute('data-id'); // if targetEl is a label's span it will only have a data-id\n        this.callbacks.onTouchstartIOS?.({ fieldType: 'webInternalElement', name });\n    }\n}\n\n/**\n * This works with the touchend handler to allow us to catch (click) events on non-securedFields elements\n * (re. http://gravitydept.com/blog/js-click-event-bubbling-on-ios - events don't bubble unless the click takes place on a link or input)\n *\n * We can use this event to:\n * 1. Set focus on these other elements, and\n * 2. Tell SecuredFields that this has happened so they can blur themselves\n * (see note in adyen-secured-fields...inputBase.js - \"Blur event never fires on input field\")\n *\n * NOTE: Only called when iOS detected\n */\nfunction handleTouchend(): void {\n    const bodyEl: HTMLBodyElement = selectOne(document, 'body');\n    bodyEl.style.cursor = 'pointer';\n\n    on(bodyEl, 'touchend', this.touchendListener);\n\n    // Store the fact we have set the listener\n    this.state.registerFieldForIos = true;\n}\n\nfunction destroyTouchendListener(): boolean {\n    if (!ua.__IS_IOS) return false; // For when fn is called as result of destroy being called on main csf instance\n\n    const bodyEl: HTMLBodyElement = selectOne(document, 'body');\n    bodyEl.style.cursor = 'auto';\n    off(bodyEl, 'touchend', this.touchendListener);\n    return true;\n}\n\nfunction destroyTouchstartListener(): boolean {\n    if (!ua.__IS_IOS) return false; // For when fn is called as result of destroy being called on main csf instance\n\n    off(document, 'touchstart', this.touchstartListener);\n    return true;\n}\n\nexport default {\n    touchendListener,\n    touchstartListener,\n    handleTouchend,\n    destroyTouchendListener,\n    destroyTouchstartListener\n};\n"],"names":["handleIOSTouchEvents","touchendListener","e","targetEl","target","HTMLInputElement","HTMLTextAreaElement","val","value","caretPos","pNode","selectionStart","adjFlag","length","setSelectionRange","focus","setTimeout","this","config","keypadFix","rootNode","props","nuInput","document","createElement","style","width","height","opacity","fontSize","appendChild","removeChild","destroyTouchendListener","state","registerFieldForIos","postMessageToAllIframes","fieldType","fieldClick","touchstartListener","hasGenuineTouchEvents","HTMLSpanElement","checkoutTouchEvent","name","getAttribute","callbacks","onTouchstartIOS","handleTouchend","bodyEl","selectOne","cursor","on","ua","__IS_IOS","off","destroyTouchstartListener"],"mappings":"+JAmJA,IAAeA,EAAA,CACXC,iBA/HJ,SAA0BC,GACtB,MAAMC,EAAwBD,EAAEE,OAGhC,GAAID,aAAoBE,kBAAqBC,qBAAuBH,aAAoBG,oBAAsB,CAE1G,MAAMC,EAAcJ,EAASK,MAE7B,IAAIC,EAxBJ,mBADaC,EAyBsBP,GAvB5BO,EAAMC,eAEV,EAuBCC,GAAU,EAIVH,IAAaF,EAAIM,SACjBJ,GAAY,EACZG,GAAU,GAGdT,EAASK,MAAQD,EAQjB,IACQJ,EAASW,oBACTX,EAASY,QACTZ,EAASW,kBAAkBL,EAAUA,GAGjCG,IACAH,GAAY,EACZO,YAAW,KACPb,EAASW,kBAAkBL,EAAUA,EAAAA,GACtC,IAIf,CAAE,MAAOP,GAAG,MACT,CAKH,GAD8Be,KAAKC,OAAOC,UACxB,CAGd,MAAMC,EAAwBH,KAAKI,MAAMD,SACnCE,EAA4BC,SAASC,cAAc,SACzDF,EAAQG,MAAMC,MAAQ,MACtBJ,EAAQG,MAAME,OAAS,MACvBL,EAAQG,MAAMG,QAAU,IACxBN,EAAQG,MAAMI,SAAW,OACzBT,EAASU,YAAYR,GACrBA,EAAQP,QACRK,EAASW,YAAYT,EACzB,CACJ,CA7EgB,IAACZ,EAgFjBO,KAAKe,0BAGLf,KAAKgB,MAAMC,qBAAsB,EAGjCjB,KAAKkB,wBAAwB,CAAEC,UAAW,qBAAsBC,YAAY,GAChF,EA0DIC,mBAnDJ,SAA4BpC,GACxBe,KAAKsB,uBAAwB,EAC7B,MAAMpC,EAAwBD,EAAEE,OAEhC,GAAID,aAAoBE,kBAAoBF,aAAoBqC,gBAAiB,CAC7EvB,KAAKkB,wBAAwB,CAAEC,UAAW,qBAAsBK,oBAAoB,IAEpF,MAAMC,EAAOvC,EAASwC,aAAa,SAAWxC,EAASwC,aAAa,WACpE1B,KAAK2B,UAAUC,kBAAkB,CAAET,UAAW,qBAAsBM,QACxE,CACJ,EA0CII,eA7BJ,WACI,MAAMC,EAA0BC,EAAUzB,SAAU,QACpDwB,EAAOtB,MAAMwB,OAAS,UAEtBC,EAAGH,EAAQ,WAAY9B,KAAKhB,kBAG5BgB,KAAKgB,MAAMC,qBAAsB,CACrC,EAsBIF,wBApBJ,WACI,IAAKmB,EAAGC,SAAU,OAAO,EAEzB,MAAML,EAA0BC,EAAUzB,SAAU,QAGpD,OAFAwB,EAAOtB,MAAMwB,OAAS,OACtBI,EAAIN,EAAQ,WAAY9B,KAAKhB,mBACtB,CACX,EAcIqD,0BAZJ,WACI,QAAKH,EAAGC,WAERC,EAAI9B,SAAU,aAAcN,KAAKqB,qBAC1B,EACX"}