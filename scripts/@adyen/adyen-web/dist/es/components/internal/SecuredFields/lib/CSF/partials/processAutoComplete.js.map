{"version":3,"file":"processAutoComplete.js","sources":["../../../../../../../../src/components/internal/SecuredFields/lib/CSF/partials/processAutoComplete.ts"],"sourcesContent":["import postMessageToIframe from '../utils/iframes/postMessageToIframe';\nimport { ENCRYPTED_EXPIRY_DATE, ENCRYPTED_EXPIRY_MONTH, ENCRYPTED_EXPIRY_YEAR } from '../../constants';\nimport { SFFeedbackObj, CardAutoCompleteData } from '../../types';\nimport { hasOwnProperty } from '../../../../../../utils/hasOwnProperty';\nimport getIframeContentWin from '../utils/iframes/getIframeContentWin';\nimport { CSFThisObject } from '../types';\n\n/**\n *\n * @param csfState - comes from initial, partial, implementation\n * @param csfConfig - comes from initial, partial, implementation\n * @param csfCallbacks - comes from initial, partial, implementation\n *\n * @param pFeedbackObj -\n */\nexport function processAutoComplete({ csfState, csfConfig, csfCallbacks }: CSFThisObject, pFeedbackObj: SFFeedbackObj): boolean {\n    /**\n     * NOTE: It seems Chrome has started autofilling across cross-origin iframes. Have tested as far back as v104 but have no resources to test further back\n     * So, in theory for Chrome \\>= v104 we don't need to do any of this, including having special listeners in the securedFields\n     */\n\n    // Specifically for cc-name (but no reason not to propagate all AC objects to the merchant)\n    if (pFeedbackObj.name === 'cc-name') {\n        const feedbackObj: SFFeedbackObj = { ...pFeedbackObj };\n        delete feedbackObj.numKey;\n        const ACFeedbackObj: CardAutoCompleteData = feedbackObj as CardAutoCompleteData;\n        csfCallbacks.onAutoComplete(ACFeedbackObj);\n        return true;\n    }\n\n    // Send date info to relevant secured fields (needed for Safari whose Security model won't allow direct population of fields in 3rd party iframes)\n    if (pFeedbackObj.name === 'cc-exp') {\n        const splittableDateVal = pFeedbackObj.value.replace(/[^0-9]/gi, '/'); // Replace any non-digits with a fwd-slash so we can always split it\n\n        const dateValArr: string[] = splittableDateVal.split('/');\n\n        if (dateValArr.length !== 2) {\n            // To avoid bug in some versions of Safari where date doesn't come through as expected\n            return false;\n        }\n\n        if (dateValArr[0].length === 1) dateValArr[0] = `0${dateValArr[0]}`; // pad, if required\n\n        const acMonthVal: string = dateValArr[0];\n\n        // Extra checks that passed year is a valid value\n        const year = dateValArr[1];\n        const isValidYear = (year?.length === 4 || year?.length === 2) && !isNaN(parseInt(year));\n        if (!isValidYear) {\n            return false;\n        }\n\n        const acYearVal: string = year.slice(-2); // take last 2 digits of year\n        const acDateVal = `${acMonthVal}/${acYearVal}`;\n\n        if (hasOwnProperty(csfState.securedFields, ENCRYPTED_EXPIRY_DATE)) {\n            const dataObj: object = {\n                txVariant: csfState.type,\n                fieldType: ENCRYPTED_EXPIRY_DATE,\n                autoComplete: acDateVal,\n                numKey: csfState.securedFields[ENCRYPTED_EXPIRY_DATE].numKey\n            };\n            postMessageToIframe(dataObj, getIframeContentWin(csfState, ENCRYPTED_EXPIRY_DATE), csfConfig.loadingContext);\n            return true;\n        }\n\n        if (hasOwnProperty(csfState.securedFields, ENCRYPTED_EXPIRY_MONTH)) {\n            const dataObj: object = {\n                txVariant: csfState.type,\n                fieldType: ENCRYPTED_EXPIRY_MONTH,\n                autoComplete: acMonthVal,\n                numKey: csfState.securedFields[ENCRYPTED_EXPIRY_MONTH].numKey\n            };\n            postMessageToIframe(dataObj, getIframeContentWin(csfState, ENCRYPTED_EXPIRY_MONTH), csfConfig.loadingContext);\n        }\n\n        if (hasOwnProperty(csfState.securedFields, ENCRYPTED_EXPIRY_YEAR)) {\n            // Dirty! - Need to wait til next page draw if setting month and year at the same time, otherwise only year gets set\n            setTimeout(() => {\n                const dataObj: object = {\n                    txVariant: csfState.type,\n                    fieldType: ENCRYPTED_EXPIRY_YEAR,\n                    autoComplete: acYearVal,\n                    numKey: csfState.securedFields[ENCRYPTED_EXPIRY_YEAR].numKey\n                };\n                postMessageToIframe(dataObj, getIframeContentWin(csfState, ENCRYPTED_EXPIRY_YEAR), csfConfig.loadingContext);\n            }, 0);\n        }\n        return true;\n    }\n\n    return false;\n}\n"],"names":["processAutoComplete","csfState","csfConfig","csfCallbacks","pFeedbackObj","name","feedbackObj","numKey","ACFeedbackObj","onAutoComplete","dateValArr","value","replace","split","length","acMonthVal","year","isNaN","parseInt","acYearVal","slice","acDateVal","hasOwnProperty","securedFields","ENCRYPTED_EXPIRY_DATE","dataObj","txVariant","type","fieldType","autoComplete","postMessageToIframe","getIframeContentWin","loadingContext","ENCRYPTED_EXPIRY_MONTH","ENCRYPTED_EXPIRY_YEAR","setTimeout"],"mappings":"2SAeO,SAASA,GAAoBC,SAAEA,EAAQC,UAAEA,EAASC,aAAEA,GAA+BC,GAOtF,GAA0B,YAAtBA,EAAaC,KAAoB,CACjC,MAAMC,EAA6B,IAAKF,UACjCE,EAAYC,OACnB,MAAMC,EAAsCF,EAE5C,OADAH,EAAaM,eAAeD,IACrB,CACX,CAGA,GAA0B,WAAtBJ,EAAaC,KAAmB,CAChC,MAEMK,EAFoBN,EAAaO,MAAMC,QAAQ,WAAY,KAElBC,MAAM,KAErD,GAA0B,IAAtBH,EAAWI,OAEX,OAAO,EAGkB,IAAzBJ,EAAW,GAAGI,SAAcJ,EAAW,GAAK,IAAIA,EAAW,MAE/D,MAAMK,EAAqBL,EAAW,GAGhCM,EAAON,EAAW,GAExB,MADsC,IAAjBM,GAAMF,QAAiC,IAAjBE,GAAMF,UAAkBG,MAAMC,SAASF,KAE9E,OAAO,EAGX,MAAMG,EAAoBH,EAAKI,UACzBC,EAAY,GAAGN,KAAcI,IAEnC,GAAIG,EAAerB,EAASsB,cAAeC,GAAwB,CAC/D,MAAMC,EAAkB,CACpBC,UAAWzB,EAAS0B,KACpBC,UAAWJ,EACXK,aAAcR,EACdd,OAAQN,EAASsB,cAAcC,GAAuBjB,QAG1D,OADAuB,EAAoBL,EAASM,EAAoB9B,EAAUuB,GAAwBtB,EAAU8B,iBACtF,CACX,CAEA,GAAIV,EAAerB,EAASsB,cAAeU,GAAyB,CAChE,MAAMR,EAAkB,CACpBC,UAAWzB,EAAS0B,KACpBC,UAAWK,EACXJ,aAAcd,EACdR,OAAQN,EAASsB,cAAcU,GAAwB1B,QAE3DuB,EAAoBL,EAASM,EAAoB9B,EAAUgC,GAAyB/B,EAAU8B,eAClG,CAcA,OAZIV,EAAerB,EAASsB,cAAeW,IAEvCC,YAAW,KACP,MAAMV,EAAkB,CACpBC,UAAWzB,EAAS0B,KACpBC,UAAWM,EACXL,aAAcV,EACdZ,OAAQN,EAASsB,cAAcW,GAAuB3B,QAE1DuB,EAAoBL,EAASM,EAAoB9B,EAAUiC,GAAwBhC,EAAU8B,eAAc,GAC5G,IAEA,CACX,CAEA,OAAO,CACX"}