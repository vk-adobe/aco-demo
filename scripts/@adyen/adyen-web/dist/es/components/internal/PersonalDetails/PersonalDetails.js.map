{"version":3,"file":"PersonalDetails.js","sources":["../../../../../src/components/internal/PersonalDetails/PersonalDetails.tsx"],"sourcesContent":["import { Fragment, h } from 'preact';\nimport { useEffect, useMemo, useRef } from 'preact/hooks';\nimport Fieldset from '../FormFields/Fieldset';\nimport Field from '../FormFields/Field';\nimport ReadOnlyPersonalDetails from './ReadOnlyPersonalDetails';\nimport { personalDetailsValidationRules } from './validate';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport { PersonalDetailsProps } from './types';\nimport { checkDateInputSupport } from '../FormFields/InputDate/utils';\nimport { PersonalDetailsSchema } from '../../../types';\nimport { getFormattedData } from './utils';\nimport useForm from '../../../utils/useForm';\nimport './PersonalDetails.scss';\nimport InputText from '../FormFields/InputText';\nimport RadioGroup from '../FormFields/RadioGroup';\nimport InputDate from '../FormFields/InputDate';\nimport InputEmail from '../FormFields/InputEmail';\nimport InputTelephone from '../FormFields/InputTelephone';\nimport { getErrorMessage } from '../../../utils/getErrorMessage';\nimport { ComponentMethodsRef } from '../UIElement/types';\nimport { HandleChangeForModeType } from '../../../utils/useForm/types';\n\nexport const PERSONAL_DETAILS_SCHEMA = ['firstName', 'lastName', 'gender', 'dateOfBirth', 'shopperEmail', 'telephoneNumber'];\n\nexport default function PersonalDetails(props: PersonalDetailsProps) {\n    const { label = '', namePrefix, placeholders, requiredFields, visibility } = props;\n\n    const { i18n } = useCoreContext();\n\n    /** An object by which to expose 'public' members to the parent UIElement */\n    const personalDetailsRef = useRef<ComponentMethodsRef>({});\n    // Just call once\n    if (!Object.keys(personalDetailsRef.current).length) {\n        props.setComponentRef?.(personalDetailsRef.current);\n    }\n\n    const isDateInputSupported = useMemo(checkDateInputSupport, []);\n    const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm<PersonalDetailsSchema>({\n        schema: requiredFields,\n        // Ensure any passed validation rules are merged with the default ones\n        rules: { ...personalDetailsValidationRules, ...props.validationRules },\n        defaultData: props.data\n    });\n\n    // Expose method expected by (parent) PersonalDetails.tsx\n    personalDetailsRef.current.showValidation = () => {\n        triggerValidation();\n    };\n\n    const eventHandler =\n        (mode: HandleChangeForModeType): h.JSX.GenericEventHandler<EventTarget> =>\n        (e: Event): void => {\n            const { name } = e.target as HTMLInputElement;\n            const key = name.split(`${namePrefix}.`).pop();\n\n            handleChangeFor(key, mode)(e);\n        };\n\n    const generateFieldName = (name: string): string => `${namePrefix ? `${namePrefix}.` : ''}${name}`;\n\n    useEffect(() => {\n        const formattedData = getFormattedData(data);\n        props.onChange({ data: formattedData, valid, errors, isValid });\n    }, [data, valid, errors, isValid]);\n\n    if (visibility === 'hidden') return null;\n    if (visibility === 'readOnly') return <ReadOnlyPersonalDetails {...props} data={data} />;\n\n    return (\n        <Fragment>\n            <Fieldset classNameModifiers={['personalDetails']} label={label}>\n                {requiredFields.includes('firstName') && (\n                    <Field\n                        label={i18n.get('firstName')}\n                        classNameModifiers={['col-50', 'firstName']}\n                        errorMessage={getErrorMessage(i18n, errors.firstName, i18n.get('firstName'))}\n                        name={'firstName'}\n                        i18n={i18n}\n                    >\n                        <InputText\n                            name={generateFieldName('firstName')}\n                            value={data.firstName}\n                            classNameModifiers={['firstName']}\n                            onInput={eventHandler('input')}\n                            onBlur={eventHandler('blur')}\n                            placeholder={placeholders.firstName}\n                            spellCheck={false}\n                            required={true}\n                        />\n                    </Field>\n                )}\n\n                {requiredFields.includes('lastName') && (\n                    <Field\n                        label={i18n.get('lastName')}\n                        classNameModifiers={['col-50', 'lastName']}\n                        errorMessage={getErrorMessage(i18n, errors.lastName, i18n.get('lastName'))}\n                        name={'lastName'}\n                        i18n={i18n}\n                    >\n                        <InputText\n                            name={generateFieldName('lastName')}\n                            value={data.lastName}\n                            classNameModifiers={['lastName']}\n                            onInput={eventHandler('input')}\n                            onBlur={eventHandler('blur')}\n                            placeholder={placeholders.lastName}\n                            spellCheck={false}\n                            required={true}\n                        />\n                    </Field>\n                )}\n\n                {requiredFields.includes('gender') && (\n                    <Field\n                        errorMessage={getErrorMessage(i18n, errors.gender)}\n                        classNameModifiers={['gender']}\n                        name={'gender'}\n                        useLabelElement={false}\n                    >\n                        <RadioGroup\n                            name={generateFieldName('gender')}\n                            value={data.gender}\n                            items={[\n                                { id: 'MALE', name: 'male' },\n                                { id: 'FEMALE', name: 'female' }\n                            ]}\n                            classNameModifiers={['gender']}\n                            onInput={eventHandler('input')}\n                            onChange={eventHandler('blur')}\n                            required={true}\n                        />\n                    </Field>\n                )}\n\n                {requiredFields.includes('dateOfBirth') && (\n                    <Field\n                        label={i18n.get('dateOfBirth')}\n                        classNameModifiers={['col-50', 'dateOfBirth']}\n                        errorMessage={getErrorMessage(i18n, errors.dateOfBirth, i18n.get('dateOfBirth'))}\n                        helper={isDateInputSupported ? null : i18n.get('dateOfBirth.format')}\n                        name={'dateOfBirth'}\n                        i18n={i18n}\n                    >\n                        <InputDate\n                            name={generateFieldName('dateOfBirth')}\n                            value={data.dateOfBirth}\n                            classNameModifiers={['dateOfBirth']}\n                            onInput={eventHandler('input')}\n                            onBlur={eventHandler('blur')}\n                            placeholder={placeholders.dateOfBirth}\n                            required={true}\n                        />\n                    </Field>\n                )}\n\n                {requiredFields.includes('shopperEmail') && (\n                    <Field\n                        label={i18n.get('shopperEmail')}\n                        classNameModifiers={['shopperEmail']}\n                        errorMessage={getErrorMessage(i18n, errors.shopperEmail, i18n.get('shopperEmail'))}\n                        dir={'ltr'}\n                        name={'emailAddress'}\n                        i18n={i18n}\n                    >\n                        <InputEmail\n                            name={generateFieldName('shopperEmail')}\n                            value={data.shopperEmail}\n                            classNameModifiers={['shopperEmail']}\n                            onInput={eventHandler('input')}\n                            onBlur={eventHandler('blur')}\n                            placeholder={placeholders.shopperEmail}\n                            required={true}\n                        />\n                    </Field>\n                )}\n\n                {requiredFields.includes('telephoneNumber') && (\n                    <Field\n                        label={i18n.get('telephoneNumber')}\n                        classNameModifiers={['telephoneNumber']}\n                        errorMessage={getErrorMessage(i18n, errors.telephoneNumber, i18n.get('telephoneNumber'))}\n                        dir={'ltr'}\n                        name={'telephoneNumber'}\n                        i18n={i18n}\n                    >\n                        <InputTelephone\n                            name={generateFieldName('telephoneNumber')}\n                            value={data.telephoneNumber}\n                            classNameModifiers={['telephoneNumber']}\n                            onInput={eventHandler('input')}\n                            onBlur={eventHandler('blur')}\n                            placeholder={placeholders.telephoneNumber}\n                            required={true}\n                        />\n                    </Field>\n                )}\n            </Fieldset>\n        </Fragment>\n    );\n}\n\nPersonalDetails.defaultProps = {\n    data: {},\n    onChange: () => {},\n    placeholders: {},\n    requiredFields: PERSONAL_DETAILS_SCHEMA,\n    validationRules: personalDetailsValidationRules,\n    visibility: 'editable'\n};\n"],"names":["PERSONAL_DETAILS_SCHEMA","PersonalDetails","props","label","namePrefix","placeholders","requiredFields","visibility","i18n","useCoreContext","personalDetailsRef","useRef","Object","keys","current","length","setComponentRef","isDateInputSupported","useMemo","checkDateInputSupport","handleChangeFor","triggerValidation","data","valid","errors","isValid","useForm","schema","rules","personalDetailsValidationRules","validationRules","defaultData","showValidation","eventHandler","mode","e","name","target","key","split","pop","generateFieldName","useEffect","formattedData","getFormattedData","onChange","h","ReadOnlyPersonalDetails","Fragment","Fieldset","classNameModifiers","includes","Field","get","errorMessage","getErrorMessage","firstName","InputText","value","onInput","onBlur","placeholder","spellCheck","required","lastName","gender","useLabelElement","RadioGroup","items","id","dateOfBirth","helper","InputDate","shopperEmail","dir","InputEmail","telephoneNumber","InputTelephone","defaultProps"],"mappings":"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"}