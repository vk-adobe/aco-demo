{"version":3,"file":"CountryField.js","sources":["../../../../../../src/components/internal/Address/components/CountryField.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport Field from '../../FormFields/Field';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport getDataset from '../../../../core/Services/get-dataset';\nimport { CountryFieldProps, CountryFieldItem } from '../types';\nimport Select from '../../FormFields/Select';\n\nconst formatCountries = (countries: Array<CountryFieldItem>, allowedCountries: string[]) => {\n    const applyFilter = (country: CountryFieldItem) => allowedCountries.includes(country.id);\n    const applyMapper = (country: CountryFieldItem) => {\n        return {\n            ...country,\n            name: country.name,\n            selectedOptionName: country.name\n        };\n    };\n    return allowedCountries.length ? countries.filter(applyFilter).map(applyMapper) : countries.map(applyMapper);\n};\n\nexport default function CountryField(props: CountryFieldProps) {\n    const { allowedCountries = [], classNameModifiers = [], errorMessage, onDropdownChange, value, required } = props;\n    const { i18n, loadingContext } = useCoreContext();\n    const [countries, setCountries] = useState<CountryFieldItem[]>([]);\n    const [loaded, setLoaded] = useState<boolean>(false);\n    const [readOnly, setReadOnly] = useState(props.readOnly);\n\n    useLayoutEffect(() => {\n        getDataset('countries', loadingContext, i18n.locale)\n            .then(response => {\n                const newCountries = formatCountries(response, allowedCountries);\n                setCountries(newCountries || []);\n                setReadOnly(newCountries.length === 1 || readOnly);\n                setLoaded(true);\n            })\n            .catch(error => {\n                console.error(error);\n                setCountries([]);\n                setLoaded(true);\n            });\n    }, []);\n\n    if (!loaded) return null;\n\n    return (\n        <Field\n            name={'country'}\n            label={i18n.get('country')}\n            errorMessage={errorMessage}\n            classNameModifiers={classNameModifiers}\n            isValid={!!value}\n            showValidIcon={false}\n            i18n={i18n}\n            readOnly={readOnly && !!value}\n        >\n            <Select\n                onChange={onDropdownChange}\n                name={'country'}\n                selectedValue={value}\n                items={countries}\n                readonly={readOnly && !!value}\n                required={required}\n            />\n        </Field>\n    );\n}\n"],"names":["CountryField","props","allowedCountries","classNameModifiers","errorMessage","onDropdownChange","value","required","i18n","loadingContext","useCoreContext","countries","setCountries","useState","loaded","setLoaded","readOnly","setReadOnly","useLayoutEffect","getDataset","locale","then","response","newCountries","applyMapper","country","name","selectedOptionName","length","filter","includes","id","map","formatCountries","catch","error","console","h","Field","label","get","isValid","showValidIcon","Select","onChange","selectedValue","items","readonly"],"mappings":"6YAoBe,SAASA,EAAaC,GACjC,MAAMC,iBAAEA,EAAmB,GAAEC,mBAAEA,EAAqB,GAAEC,aAAEA,EAAYC,iBAAEA,EAAgBC,MAAEA,EAAKC,SAAEA,GAAaN,GACtGO,KAAEA,EAAIC,eAAEA,GAAmBC,KAC1BC,EAAWC,GAAgBC,EAA6B,KACxDC,EAAQC,GAAaF,GAAkB,IACvCG,EAAUC,GAAeJ,EAASZ,EAAMe,UAiB/C,OAfAE,GAAgB,KACZC,EAAW,YAAaV,EAAgBD,EAAKY,QACxCC,MAAKC,IACF,MAAMC,EAtBE,EAACZ,EAAoCT,KACzD,MACMsB,EAAeC,IACV,IACAA,EACHC,KAAMD,EAAQC,KACdC,mBAAoBF,EAAQC,OAGpC,OAAOxB,EAAiB0B,OAASjB,EAAUkB,QARtBJ,GAA8BvB,EAAiB4B,SAASL,EAAQM,MAQtBC,IAAIR,GAAeb,EAAUqB,IAAIR,EAAAA,EAa/DS,CAAgBX,EAAUpB,GAC/CU,EAAaW,GAAgB,IAC7BN,EAAoC,IAAxBM,EAAaK,QAAgBZ,GACzCD,GAAU,EAAA,IAEbmB,OAAMC,IACHC,QAAQD,MAAMA,GACdvB,EAAa,IACbG,GAAU,EAAA,GACd,GACL,IAEED,EAGDuB,EAACC,EAAAA,CACGZ,KAAM,UACNa,MAAO/B,EAAKgC,IAAI,WAChBpC,aAAcA,EACdD,mBAAoBA,EACpBsC,UAAWnC,EACXoC,eAAe,EACflC,KAAMA,EACNQ,SAAUA,KAAcV,GAExB+B,EAACM,EAAAA,CACGC,SAAUvC,EACVqB,KAAM,UACNmB,cAAevC,EACfwC,MAAOnC,EACPoC,SAAU/B,KAAcV,EACxBC,SAAUA,KAnBF,IAuBxB"}