{"version":3,"file":"Specifications.js","sources":["../../../../../src/components/internal/Address/Specifications.ts"],"sourcesContent":["import { AddressSchema, AddressSpecifications, StringObject } from './types';\nimport { ADDRESS_SPECIFICATIONS } from './constants';\nimport { AddressField } from '../../../types/global-types';\n\nconst SCHEMA_MAX_DEPTH = 2;\n\nclass Specifications {\n    private specifications: AddressSpecifications;\n\n    constructor(specifications?) {\n        this.specifications = { ...ADDRESS_SPECIFICATIONS, ...specifications };\n    }\n\n    /**\n     * Checks if a certain country has a dataset.\n     * @param country - The selected country\n     * @returns Boolean\n     */\n    countryHasDataset(country: string): boolean {\n        return !!this.specifications?.[country]?.hasDataset;\n    }\n\n    /**\n     * Checks if a certain country has the passed field in their optional fields array.\n     * @param country - The selected country\n     * @param fieldName - The field to be checked\n     * @returns Boolean\n     */\n    countryHasOptionalField(country: string, fieldName: string): boolean {\n        return !!this.specifications?.[country]?.optionalFields?.includes(fieldName as any);\n    }\n\n    /**\n     * Returns the address schema of the selected country or the default address schema.\n     * @param country - The selected country\n     * @returns AddressSchema\n     */\n    getAddressSchemaForCountry(country: string): AddressSchema {\n        return this.specifications?.[country]?.schema || this.specifications.default.schema;\n    }\n\n    /**\n     * Returns the address labels of the selected country or the default address labels.\n     * @param country - The selected country\n     * @returns StringObject\n     */\n    getAddressLabelsForCountry(country: string): StringObject {\n        return this.specifications?.[country]?.labels || this.specifications.default.labels;\n    }\n\n    /**\n     * Returns the optional fields of the selected country or the default optional fields.\n     * @param country - The selected country\n     * @returns Optional fields array\n     */\n    getOptionalFieldsForCountry(country: string): string[] {\n        return this.specifications?.[country]?.optionalFields || this.specifications.default?.optionalFields || [];\n    }\n\n    /**\n     * Returns the key for a field of the passed country or the default key for that field.\n     * @param fieldName - The field to be searched\n     * @param country - The selected country\n     */\n    getKeyForField(fieldName: string, country: string): string {\n        return this.specifications?.[country]?.labels?.[fieldName] || this.specifications?.default?.labels?.[fieldName] || fieldName;\n    }\n\n    /**\n     * Returns the placeholder key for a field of the passed country or the default key for that field.\n     * @param fieldName - The field to be searched\n     * @param country - The selected country\n     */\n    getPlaceholderKeyForField(fieldName: string, country: string): string {\n        return this.specifications?.[country]?.placeholders?.[fieldName] || this.specifications?.default?.placeholders?.[fieldName];\n    }\n\n    /**\n     * Returns an array with the address schema of the selected country or the default address schema\n     * Flat version of getAddressSchemaForCountry\n     * @param country - The selected country\n     * @returns Array\n     */\n    getAddressSchemaForCountryFlat(country: string): AddressField[] {\n        return this.getAddressSchemaForCountry(country)\n            .flat(SCHEMA_MAX_DEPTH)\n            .filter((element): element is AddressField => typeof element === 'string');\n    }\n}\n\nexport default Specifications;\n"],"names":["Specifications","countryHasDataset","country","this","specifications","hasDataset","countryHasOptionalField","fieldName","optionalFields","includes","getAddressSchemaForCountry","schema","default","getAddressLabelsForCountry","labels","getOptionalFieldsForCountry","getKeyForField","getPlaceholderKeyForField","placeholders","getAddressSchemaForCountryFlat","flat","filter","element","constructor","ADDRESS_SPECIFICATIONS"],"mappings":"wDAMA,MAAMA,EAYFC,iBAAAA,CAAkBC,GACd,QAASC,KAAKC,iBAAiBF,IAAUG,UAC7C,CAQAC,uBAAAA,CAAwBJ,EAAiBK,GACrC,QAASJ,KAAKC,iBAAiBF,IAAUM,gBAAgBC,SAASF,EACtE,CAOAG,0BAAAA,CAA2BR,GACvB,OAAOC,KAAKC,iBAAiBF,IAAUS,QAAUR,KAAKC,eAAeQ,QAAQD,MACjF,CAOAE,0BAAAA,CAA2BX,GACvB,OAAOC,KAAKC,iBAAiBF,IAAUY,QAAUX,KAAKC,eAAeQ,QAAQE,MACjF,CAOAC,2BAAAA,CAA4Bb,GACxB,OAAOC,KAAKC,iBAAiBF,IAAUM,gBAAkBL,KAAKC,eAAeQ,SAASJ,gBAAkB,EAC5G,CAOAQ,cAAAA,CAAeT,EAAmBL,GAC9B,OAAOC,KAAKC,iBAAiBF,IAAUY,SAASP,IAAcJ,KAAKC,gBAAgBQ,SAASE,SAASP,IAAcA,CACvH,CAOAU,yBAAAA,CAA0BV,EAAmBL,GACzC,OAAOC,KAAKC,iBAAiBF,IAAUgB,eAAeX,IAAcJ,KAAKC,gBAAgBQ,SAASM,eAAeX,EACrH,CAQAY,8BAAAA,CAA+BjB,GAC3B,OAAOC,KAAKO,2BAA2BR,GAClCkB,KAjFY,GAkFZC,QAAQC,GAAwD,iBAAZA,GAC7D,CA9EAC,WAAAA,CAAYnB,oBAFZ,KAAQA,sBAARD,4FAGIA,KAAKC,eAAiB,IAAKoB,KAA2BpB,EAC1D"}