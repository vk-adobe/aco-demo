{"version":3,"file":"validate.formats.js","sources":["../../../../../src/components/internal/Address/validate.formats.ts"],"sourcesContent":["import { CountryFormatRules, FormatRules } from '../../../utils/Validator/types';\nimport { Formatter } from '../../../utils/useForm/types';\nimport { getFormattingRegEx, SPECIAL_CHARS, trimValWithOneSpace } from '../../../utils/validator-utils';\n\nconst createFormatByDigits = (digits: number): Formatter => {\n    const format = new Array(digits).fill('9').join('');\n    return {\n        // Formatter - excludes non digits and limits to maxlength\n        formatterFn: val => val.replace(getFormattingRegEx('^\\\\d', 'g'), '').substring(0, digits),\n        format,\n        maxlength: digits\n    };\n};\n\nconst specialCharsRegEx = getFormattingRegEx(SPECIAL_CHARS);\nconst formattingFn = val => trimValWithOneSpace(val).replace(specialCharsRegEx, '');\n\nexport const addressFormatters: FormatRules = {\n    postalCode: {\n        formatterFn: (val, context) => {\n            const country = context.state.data.country;\n\n            // Country specific formatting rule\n            const specificRule = countrySpecificFormatters[country]?.postalCode.formatterFn;\n            if (specificRule) {\n                return specificRule(val);\n            }\n\n            // Default formatting rule: allow anything\n            return val;\n        }\n    },\n    street: {\n        formatterFn: formattingFn\n    },\n    houseNumberOrName: {\n        formatterFn: formattingFn\n    },\n    city: {\n        formatterFn: formattingFn\n    }\n};\n\n// TODO make proper formatter fns for those entries that don't just have a straightforward, x number of digits, no spaces, format\n//  check against our internal documentation on address postal code\n//  which, for example, says BR isn't just 8 digits (it can be spilt by a hyphen) & CZ can also be 5 digits, no spaces\nexport const countrySpecificFormatters: CountryFormatRules = {\n    AT: {\n        postalCode: createFormatByDigits(4)\n    },\n    AU: {\n        postalCode: createFormatByDigits(4)\n    },\n    BE: {\n        postalCode: createFormatByDigits(4)\n    },\n    BG: {\n        postalCode: createFormatByDigits(4)\n    },\n    BR: {\n        postalCode: {\n            // Formatter - excludes non digits, but allows hyphens, and limits to a maxlength that varies depending on whether a hyphen is present or not\n            formatterFn: val => {\n                const nuVal = val.replace(getFormattingRegEx('^\\\\d-', 'g'), '');\n                const maxlength = nuVal.indexOf('-') > -1 ? 9 : 8;\n                return nuVal.substring(0, maxlength);\n            },\n            format: '12345678 or 12345-678',\n            maxlength: 9\n        }\n    },\n    CA: {\n        postalCode: {\n            format: 'A9A 9A9 or A9A9A9',\n            maxlength: 7\n        }\n    },\n    CH: {\n        postalCode: createFormatByDigits(4)\n    },\n    CY: {\n        postalCode: createFormatByDigits(4)\n    },\n    CZ: {\n        postalCode: {\n            format: '999 99',\n            maxlength: 6\n        }\n    },\n    DE: {\n        postalCode: createFormatByDigits(5)\n    },\n    DK: {\n        postalCode: {\n            format: '9999',\n            maxlength: 7\n        }\n    },\n    EE: {\n        postalCode: createFormatByDigits(5)\n    },\n    ES: {\n        postalCode: createFormatByDigits(5)\n    },\n    FI: {\n        postalCode: createFormatByDigits(5)\n    },\n    FR: {\n        postalCode: createFormatByDigits(5)\n    },\n    GB: {\n        postalCode: {\n            // Disallow special chars & set to maxlength\n            formatterFn: val => val.replace(getFormattingRegEx(SPECIAL_CHARS), '').substring(0, 8),\n            format: 'AA99 9AA or A99 9AA or A9 9AA',\n            maxlength: 8\n        }\n    },\n    GR: {\n        postalCode: {\n            format: '999 99',\n            maxlength: 6\n        }\n    },\n    HR: {\n        postalCode: {\n            format: '[1-5]9999',\n            maxlength: 5\n        }\n    },\n    HU: {\n        postalCode: createFormatByDigits(4)\n    },\n    IE: {\n        postalCode: {\n            format: 'A99 A999',\n            maxlength: 8\n        }\n    },\n    IS: {\n        postalCode: createFormatByDigits(3)\n    },\n    IT: {\n        postalCode: createFormatByDigits(5)\n    },\n    LI: {\n        postalCode: createFormatByDigits(4)\n    },\n    LT: {\n        postalCode: {\n            format: '9999 or 99999 or LT-99999',\n            maxlength: 8\n        }\n    },\n    LU: {\n        postalCode: createFormatByDigits(4)\n    },\n    LV: {\n        postalCode: {\n            format: '9999 or LV-9999',\n            maxlength: 7\n        }\n    },\n    MC: {\n        postalCode: {\n            format: '980NN',\n            maxlength: 5\n        }\n    },\n    MT: {\n        postalCode: {\n            format: 'AA99 or AAA99 or AA9999 or AAA9999',\n            maxlength: 8\n        }\n    },\n    MY: {\n        postalCode: createFormatByDigits(5)\n    },\n    NL: {\n        postalCode: {\n            format: '9999AA',\n            maxlength: 7\n        }\n    },\n    NZ: {\n        postalCode: createFormatByDigits(4)\n    },\n    NO: {\n        postalCode: createFormatByDigits(4)\n    },\n    PL: {\n        postalCode: {\n            // Formatter - excludes non digits, but allows hyphens, and limits to a maxlength that varies depending on whether a hyphen is present or not\n            formatterFn: val => {\n                const nuVal = val.replace(getFormattingRegEx('^\\\\d-', 'g'), '');\n                const maxlength = nuVal.indexOf('-') > -1 ? 6 : 5;\n                return nuVal.substring(0, maxlength);\n            },\n            format: '99999 or 99-999',\n            maxlength: 6\n        }\n    },\n    PT: {\n        postalCode: {\n            formatterFn: val => {\n                const nuVal = val.replace(getFormattingRegEx('^\\\\d-', 'g'), '');\n                return nuVal.substring(0, 8);\n            },\n            format: '9999-999',\n            maxlength: 8\n        }\n    },\n    RO: {\n        postalCode: createFormatByDigits(6)\n    },\n    SI: {\n        postalCode: {\n            format: '9999 or SI-9999',\n            maxlength: 7\n        }\n    },\n    SE: {\n        postalCode: createFormatByDigits(5)\n    },\n    SG: {\n        postalCode: createFormatByDigits(6)\n    },\n    SK: {\n        postalCode: {\n            format: '99999 or SK-99999',\n            maxlength: 8\n        }\n    },\n    JP: {\n        postalCode: {\n            format: '999-9999',\n            maxlength: 8\n        }\n    },\n    US: {\n        postalCode: {\n            formatterFn: val => {\n                const nuVal = val.replace(getFormattingRegEx('^\\\\d-', 'g'), '');\n                const maxlength = nuVal.indexOf('-') > -1 ? 10 : 5;\n                return nuVal.substring(0, maxlength);\n            },\n            format: '99999 or 99999-9999'\n        }\n    }\n};\n"],"names":["createFormatByDigits","digits","formatterFn","val","replace","getFormattingRegEx","substring","format","Array","fill","join","maxlength","specialCharsRegEx","SPECIAL_CHARS","formattingFn","trimValWithOneSpace","addressFormatters","postalCode","context","country","state","data","specificRule","countrySpecificFormatters","street","houseNumberOrName","city","AT","AU","BE","BG","BR","nuVal","indexOf","CA","CH","CY","CZ","DE","DK","EE","ES","FI","FR","GB","GR","HR","HU","IE","IS","IT","LI","LT","LU","LV","MC","MT","MY","NL","NZ","NO","PL","PT","RO","SI","SE","SG","SK","JP","US"],"mappings":"mHAIA,MAAMA,EAAwBC,IAEnB,CAEHC,YAAaC,GAAOA,EAAIC,QAAQC,EAAmB,OAAQ,KAAM,IAAIC,UAAU,EAAGL,GAClFM,OAJW,IAAIC,MAAMP,GAAQQ,KAAK,KAAKC,KAAK,IAK5CC,UAAWV,IAIbW,EAAoBP,EAAmBQ,GACvCC,EAAeX,GAAOY,EAAoBZ,GAAKC,QAAQQ,EAAmB,IAEnEI,EAAiC,CAC1CC,WAAY,CACRf,YAAa,CAACC,EAAKe,KACf,MAAMC,EAAUD,EAAQE,MAAMC,KAAKF,QAG7BG,EAAeC,EAA0BJ,IAAUF,WAAWf,YACpE,OAAIoB,EACOA,EAAanB,GAIjBA,CAAAA,GAGfqB,OAAQ,CACJtB,YAAaY,GAEjBW,kBAAmB,CACfvB,YAAaY,GAEjBY,KAAM,CACFxB,YAAaY,IAORS,EAAgD,CACzDI,GAAI,CACAV,WAAYjB,EAAqB,IAErC4B,GAAI,CACAX,WAAYjB,EAAqB,IAErC6B,GAAI,CACAZ,WAAYjB,EAAqB,IAErC8B,GAAI,CACAb,WAAYjB,EAAqB,IAErC+B,GAAI,CACAd,WAAY,CAERf,YAAaC,IACT,MAAM6B,EAAQ7B,EAAIC,QAAQC,EAAmB,QAAS,KAAM,IACtDM,EAAYqB,EAAMC,QAAQ,MAAO,EAAK,EAAI,EAChD,OAAOD,EAAM1B,UAAU,EAAGK,EAAAA,EAE9BJ,OAAQ,wBACRI,UAAW,IAGnBuB,GAAI,CACAjB,WAAY,CACRV,OAAQ,oBACRI,UAAW,IAGnBwB,GAAI,CACAlB,WAAYjB,EAAqB,IAErCoC,GAAI,CACAnB,WAAYjB,EAAqB,IAErCqC,GAAI,CACApB,WAAY,CACRV,OAAQ,SACRI,UAAW,IAGnB2B,GAAI,CACArB,WAAYjB,EAAqB,IAErCuC,GAAI,CACAtB,WAAY,CACRV,OAAQ,OACRI,UAAW,IAGnB6B,GAAI,CACAvB,WAAYjB,EAAqB,IAErCyC,GAAI,CACAxB,WAAYjB,EAAqB,IAErC0C,GAAI,CACAzB,WAAYjB,EAAqB,IAErC2C,GAAI,CACA1B,WAAYjB,EAAqB,IAErC4C,GAAI,CACA3B,WAAY,CAERf,YAAaC,GAAOA,EAAIC,QAAQC,EAAmBQ,GAAgB,IAAIP,UAAU,EAAG,GACpFC,OAAQ,gCACRI,UAAW,IAGnBkC,GAAI,CACA5B,WAAY,CACRV,OAAQ,SACRI,UAAW,IAGnBmC,GAAI,CACA7B,WAAY,CACRV,OAAQ,YACRI,UAAW,IAGnBoC,GAAI,CACA9B,WAAYjB,EAAqB,IAErCgD,GAAI,CACA/B,WAAY,CACRV,OAAQ,WACRI,UAAW,IAGnBsC,GAAI,CACAhC,WAAYjB,EAAqB,IAErCkD,GAAI,CACAjC,WAAYjB,EAAqB,IAErCmD,GAAI,CACAlC,WAAYjB,EAAqB,IAErCoD,GAAI,CACAnC,WAAY,CACRV,OAAQ,4BACRI,UAAW,IAGnB0C,GAAI,CACApC,WAAYjB,EAAqB,IAErCsD,GAAI,CACArC,WAAY,CACRV,OAAQ,kBACRI,UAAW,IAGnB4C,GAAI,CACAtC,WAAY,CACRV,OAAQ,QACRI,UAAW,IAGnB6C,GAAI,CACAvC,WAAY,CACRV,OAAQ,qCACRI,UAAW,IAGnB8C,GAAI,CACAxC,WAAYjB,EAAqB,IAErC0D,GAAI,CACAzC,WAAY,CACRV,OAAQ,SACRI,UAAW,IAGnBgD,GAAI,CACA1C,WAAYjB,EAAqB,IAErC4D,GAAI,CACA3C,WAAYjB,EAAqB,IAErC6D,GAAI,CACA5C,WAAY,CAERf,YAAaC,IACT,MAAM6B,EAAQ7B,EAAIC,QAAQC,EAAmB,QAAS,KAAM,IACtDM,EAAYqB,EAAMC,QAAQ,MAAO,EAAK,EAAI,EAChD,OAAOD,EAAM1B,UAAU,EAAGK,EAAAA,EAE9BJ,OAAQ,kBACRI,UAAW,IAGnBmD,GAAI,CACA7C,WAAY,CACRf,YAAaC,GACKA,EAAIC,QAAQC,EAAmB,QAAS,KAAM,IAC/CC,UAAU,EAAG,GAE9BC,OAAQ,WACRI,UAAW,IAGnBoD,GAAI,CACA9C,WAAYjB,EAAqB,IAErCgE,GAAI,CACA/C,WAAY,CACRV,OAAQ,kBACRI,UAAW,IAGnBsD,GAAI,CACAhD,WAAYjB,EAAqB,IAErCkE,GAAI,CACAjD,WAAYjB,EAAqB,IAErCmE,GAAI,CACAlD,WAAY,CACRV,OAAQ,oBACRI,UAAW,IAGnByD,GAAI,CACAnD,WAAY,CACRV,OAAQ,WACRI,UAAW,IAGnB0D,GAAI,CACApD,WAAY,CACRf,YAAaC,IACT,MAAM6B,EAAQ7B,EAAIC,QAAQC,EAAmB,QAAS,KAAM,IACtDM,EAAYqB,EAAMC,QAAQ,MAAO,EAAK,GAAK,EACjD,OAAOD,EAAM1B,UAAU,EAAGK,EAAAA,EAE9BJ,OAAQ"}