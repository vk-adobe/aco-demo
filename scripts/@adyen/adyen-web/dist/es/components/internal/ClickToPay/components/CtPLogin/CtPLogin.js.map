{"version":3,"file":"CtPLogin.js","sources":["../../../../../../../src/components/internal/ClickToPay/components/CtPLogin/CtPLogin.tsx"],"sourcesContent":["import { Fragment, h } from 'preact';\nimport { useCallback, useState } from 'preact/hooks';\nimport Button from '../../../Button';\nimport useClickToPayContext from '../../context/useClickToPayContext';\nimport CtPLoginInput, { CtPLoginInputHandlers } from './CtPLoginInput';\nimport { CtPInfo } from '../CtPInfo';\nimport CtPSection from '../CtPSection';\nimport SrciError from '../../services/sdks/SrciError';\nimport { useCoreContext } from '../../../../../core/Context/CoreProvider';\nimport './CtPLogin.scss';\nimport TimeoutError from '../../errors/TimeoutError';\nimport { isSrciError } from '../../services/utils';\n\nconst CtPLogin = (): h.JSX.Element => {\n    const { i18n } = useCoreContext();\n    const { isCtpPrimaryPaymentMethod, setIsCtpPrimaryPaymentMethod, verifyIfShopperIsEnrolled, startIdentityValidation } = useClickToPayContext();\n    const [shopperLogin, setShopperLogin] = useState<string>(null);\n    const [isValid, setIsValid] = useState<boolean>(false);\n    const [errorCode, setErrorCode] = useState<string>(null);\n    const [isLoggingIn, setIsLoggingIn] = useState<boolean>(false);\n    const [loginInputHandlers, setLoginInputHandlers] = useState<CtPLoginInputHandlers>(null);\n\n    const onSetLoginInputHandlers = useCallback((handlers: CtPLoginInputHandlers) => {\n        setLoginInputHandlers(handlers);\n    }, []);\n\n    const handleOnLoginChange = useCallback(({ data, isValid }) => {\n        setShopperLogin(data.shopperLogin);\n        setIsValid(isValid);\n\n        // As soon as the Shopper interacts with input, the CtP becomes the primary PM\n        if (data?.shopperLogin?.length > 0) {\n            setIsCtpPrimaryPaymentMethod(true);\n        }\n    }, []);\n\n    const handleOnLoginButtonClick = useCallback(async () => {\n        setErrorCode(null);\n\n        if (!isValid) {\n            loginInputHandlers.validateInput();\n            return;\n        }\n\n        setIsLoggingIn(true);\n\n        try {\n            const { isEnrolled } = await verifyIfShopperIsEnrolled({ shopperEmail: shopperLogin });\n            if (isEnrolled) {\n                await startIdentityValidation();\n            } else {\n                setErrorCode('NOT_FOUND');\n                setIsLoggingIn(false);\n            }\n        } catch (error: unknown) {\n            if (error instanceof SrciError) console.warn(`CtP - Login error: ${error.toString()}`);\n            if (error instanceof TimeoutError) console.warn(error.toString());\n            if (isSrciError(error)) setErrorCode(error?.reason);\n            else console.error(error);\n\n            setIsLoggingIn(false);\n        }\n    }, [verifyIfShopperIsEnrolled, startIdentityValidation, shopperLogin, isValid, loginInputHandlers]);\n\n    const handleButtonKeyDown = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Enter') {\n                void handleOnLoginButtonClick();\n            }\n        },\n        [handleOnLoginButtonClick]\n    );\n\n    return (\n        <Fragment>\n            <CtPSection.Title endAdornment={<CtPInfo />}>{i18n.get('ctp.login.title')}</CtPSection.Title>\n\n            <CtPSection.Text>{i18n.get('ctp.login.subtitle')}</CtPSection.Text>\n\n            <CtPLoginInput\n                onChange={handleOnLoginChange}\n                onSetInputHandlers={onSetLoginInputHandlers}\n                disabled={isLoggingIn}\n                errorMessage={errorCode && i18n.get(`ctp.errors.${errorCode}`)}\n                onPressEnter={handleOnLoginButtonClick}\n            />\n\n            <Button\n                label={i18n.get('continue')}\n                variant={isCtpPrimaryPaymentMethod ? 'primary' : 'secondary'}\n                status={isLoggingIn && 'loading'}\n                onClick={() => {\n                    void handleOnLoginButtonClick();\n                }}\n                onKeyDown={handleButtonKeyDown}\n            />\n        </Fragment>\n    );\n};\n\nexport default CtPLogin;\n"],"names":["CtPLogin","i18n","useCoreContext","isCtpPrimaryPaymentMethod","setIsCtpPrimaryPaymentMethod","verifyIfShopperIsEnrolled","startIdentityValidation","useClickToPayContext","shopperLogin","setShopperLogin","useState","isValid","setIsValid","errorCode","setErrorCode","isLoggingIn","setIsLoggingIn","loginInputHandlers","setLoginInputHandlers","onSetLoginInputHandlers","useCallback","handlers","handleOnLoginChange","data","length","handleOnLoginButtonClick","async","isEnrolled","shopperEmail","error","SrciError","console","warn","toString","TimeoutError","isSrciError","reason","validateInput","handleButtonKeyDown","event","key","h","Fragment","CtPSection","Title","endAdornment","CtPInfo","get","Text","CtPLoginInput","onChange","onSetInputHandlers","disabled","errorMessage","onPressEnter","Button","label","variant","status","onClick","onKeyDown"],"mappings":"qnBAaA,MAAMA,EAAW,KACb,MAAMC,KAAEA,GAASC,KACXC,0BAAEA,EAAyBC,6BAAEA,EAA4BC,0BAAEA,EAAyBC,wBAAEA,GAA4BC,KACjHC,EAAcC,GAAmBC,EAAiB,OAClDC,EAASC,GAAcF,GAAkB,IACzCG,EAAWC,GAAgBJ,EAAiB,OAC5CK,EAAaC,GAAkBN,GAAkB,IACjDO,EAAoBC,GAAyBR,EAAgC,MAE9ES,EAA0BC,GAAaC,IACzCH,EAAsBG,EAAAA,GACvB,IAEGC,EAAsBF,GAAY,EAAGG,OAAMZ,cAC7CF,EAAgBc,EAAKf,cACrBI,EAAWD,GAGPY,GAAMf,cAAcgB,OAAS,GAC7BpB,GAA6B,EACjC,GACD,IAEGqB,EAA2BL,GAAYM,UAGzC,GAFAZ,EAAa,MAERH,EAAL,CAKAK,GAAe,GAEf,IACI,MAAMW,WAAEA,SAAqBtB,EAA0B,CAAEuB,aAAcpB,IACnEmB,QACMrB,KAENQ,EAAa,aACbE,GAAe,GAEvB,CAAE,MAAOa,GACDA,aAAiBC,GAAWC,QAAQC,KAAK,sBAAsBH,EAAMI,cACrEJ,aAAiBK,GAAcH,QAAQC,KAAKH,EAAMI,YAClDE,EAAYN,GAAQf,EAAae,GAAOO,QACvCL,QAAQF,MAAMA,GAEnBb,GAAe,EACnB,CAnBA,MAFIC,EAAmBoB,eAqBvB,GACD,CAAChC,EAA2BC,EAAyBE,EAAcG,EAASM,IAEzEqB,EAAsBlB,GACvBmB,IACqB,UAAdA,EAAMC,KACDf,GACT,GAEJ,CAACA,IAGL,OACIgB,EAACC,EAAAA,KACGD,EAACE,EAAWC,MAAK,CAACC,aAAcJ,EAACK,EAAAA,OAAa7C,EAAK8C,IAAI,oBAEvDN,EAACE,EAAWK,KAAI,KAAE/C,EAAK8C,IAAI,uBAE3BN,EAACQ,EAAAA,CACGC,SAAU5B,EACV6B,mBAAoBhC,EACpBiC,SAAUrC,EACVsC,aAAcxC,GAAaZ,EAAK8C,IAAI,cAAclC,KAClDyC,aAAc7B,IAGlBgB,EAACc,EAAAA,CACGC,MAAOvD,EAAK8C,IAAI,YAChBU,QAAStD,EAA4B,UAAY,YACjDuD,OAAQ3C,GAAe,UACvB4C,QAAS,KACAlC,GAAAA,EAETmC,UAAWtB"}