{"version":3,"file":"ClickToPayService.js","sources":["../../../../../../src/components/internal/ClickToPay/services/ClickToPayService.ts"],"sourcesContent":["import { ISrcInitiator } from './sdks/AbstractSrcInitiator';\nimport {\n    CallbackStateSubscriber,\n    IClickToPayService,\n    IdentityLookupParams,\n    ClickToPayCheckoutPayload,\n    SrcProfileWithScheme,\n    SchemesConfiguration,\n    IdentityValidationData\n} from './types';\nimport { ISrcSdkLoader } from './sdks/SrcSdkLoader';\nimport { createCheckoutPayloadBasedOnScheme, createShopperCardsList, CTP_IFRAME_NAME } from './utils';\nimport { SrciIdentityLookupResponse, SrciIsRecognizedResponse, SrcProfile } from './sdks/types';\nimport SrciError from './sdks/SrciError';\nimport { SchemeNames } from './sdks/utils';\nimport ShopperCard from '../models/ShopperCard';\nimport uuidv4 from '../../../../utils/uuid';\nimport AdyenCheckoutError from '../../../../core/Errors/AdyenCheckoutError';\nimport { isFulfilled, isRejected } from '../../../../utils/promise-util';\nimport TimeoutError from '../errors/TimeoutError';\nimport { executeWithTimeout } from './execute-with-timeout';\n\nexport enum CtpState {\n    Idle = 'Idle',\n    Loading = 'Loading',\n    ShopperIdentified = 'ShopperIdentified',\n    OneTimePassword = 'OneTimePassword',\n    Ready = 'Ready',\n    Login = 'Login',\n    NotAvailable = 'NotAvailable'\n}\n\nclass ClickToPayService implements IClickToPayService {\n    private readonly sdkLoader: ISrcSdkLoader;\n    private readonly schemesConfig: SchemesConfiguration;\n    private readonly shopperIdentity?: IdentityLookupParams;\n    private readonly environment: string;\n\n    private readonly onTimeout?: (error: TimeoutError) => void;\n\n    /**\n     * Mandatory unique ID passed to all the networks (Click to Pay systems), used to track user journey\n     */\n    private readonly srciTransactionId: string = uuidv4();\n\n    private sdks: ISrcInitiator[];\n    private validationSchemeSdk: ISrcInitiator = null;\n    private stateSubscriber: CallbackStateSubscriber;\n\n    public state: CtpState = CtpState.Idle;\n    public shopperCards: ShopperCard[] = null;\n    public identityValidationData: IdentityValidationData = null;\n\n    /**\n     * Indicates if the shopper opted for saving cookies during the transaction\n     */\n    public storeCookies = false;\n\n    constructor(\n        schemesConfig: SchemesConfiguration,\n        sdkLoader: ISrcSdkLoader,\n        environment: string,\n        shopperIdentity?: IdentityLookupParams,\n        onTimeout?: (error: TimeoutError) => void\n    ) {\n        this.sdkLoader = sdkLoader;\n        this.schemesConfig = schemesConfig;\n        this.shopperIdentity = shopperIdentity;\n        this.environment = environment;\n        this.onTimeout = onTimeout;\n    }\n\n    public get shopperAccountFound(): boolean {\n        return [CtpState.Ready, CtpState.ShopperIdentified].includes(this.state);\n    }\n\n    public get schemes(): string[] {\n        return this.sdkLoader.schemes;\n    }\n\n    public updateStoreCookiesConsent(shouldStore: boolean) {\n        this.storeCookies = shouldStore;\n    }\n\n    public async initialize(): Promise<void> {\n        this.setState(CtpState.Loading);\n\n        try {\n            this.sdks = await this.sdkLoader.load(this.environment);\n            await this.initiateSdks();\n\n            const { recognized = false, idTokens = null } = await this.verifyIfShopperIsRecognized();\n\n            if (recognized) {\n                await this.getShopperProfile(idTokens);\n                this.setState(CtpState.Ready);\n                return;\n            }\n\n            if (!this.shopperIdentity) {\n                this.setState(CtpState.NotAvailable);\n                return;\n            }\n\n            const { isEnrolled } = await this.verifyIfShopperIsEnrolled(this.shopperIdentity);\n            if (isEnrolled) {\n                this.setState(CtpState.ShopperIdentified);\n                return;\n            }\n\n            this.setState(CtpState.NotAvailable);\n        } catch (error) {\n            if ((error instanceof SrciError && error?.reason === 'REQUEST_TIMEOUT') || error instanceof TimeoutError) {\n                this.handleTimeout(error);\n            } else if (error instanceof SrciError) {\n                console.warn(`Error at ClickToPayService # init: ${error.toString()}`);\n            } else {\n                console.warn(error);\n            }\n\n            this.setState(CtpState.NotAvailable);\n        }\n    }\n\n    /**\n     * Set the callback for notifying when the CtPState changes\n     */\n    public subscribeOnStateChange(callback: CallbackStateSubscriber): void {\n        this.stateSubscriber = callback;\n    }\n\n    /**\n     * Initiates Consumer Identity validation with one Click to Pay System.\n     * The Click to Pay System sends a one-time-password (OTP) to the registered email address or mobile number.\n     **/\n    public async startIdentityValidation(): Promise<void> {\n        if (!this.validationSchemeSdk) {\n            throw Error('startIdentityValidation: No ValidationSDK set for the validation process');\n        }\n        try {\n            const { maskedValidationChannel } = await this.validationSchemeSdk.initiateIdentityValidation();\n\n            this.identityValidationData = {\n                maskedShopperContact: maskedValidationChannel.replace(/\\*/g, 'â€¢'),\n                selectedNetwork: SchemeNames[this.validationSchemeSdk.schemeName]\n            };\n\n            this.setState(CtpState.OneTimePassword);\n        } catch (error: unknown) {\n            // If there is an error when 'startIdentityValidation' (Ex: account is blocked), we reset the scheme chosen to perform this step\n            this.validationSchemeSdk = null;\n            throw error;\n        }\n    }\n\n    /**\n     * Completes the  validation of the Shopper by evaluating the supplied OTP.\n     */\n    public async finishIdentityValidation(otpCode: string): Promise<void> {\n        if (!this.validationSchemeSdk) {\n            throw Error('finishIdentityValidation: No ValidationSDK set for the validation process');\n        }\n\n        const validationToken = await this.validationSchemeSdk.completeIdentityValidation(otpCode);\n        await this.getShopperProfile([validationToken.idToken]);\n        this.setState(CtpState.Ready);\n        this.validationSchemeSdk = null;\n    }\n\n    /**\n     * This method performs checkout using the selected card\n     */\n    public async checkout(card: ShopperCard): Promise<ClickToPayCheckoutPayload> {\n        if (!card) {\n            throw Error('ClickToPayService # checkout: Missing card data');\n        }\n\n        const checkoutSdk = this.sdks.find(sdk => sdk.schemeName === card.scheme);\n\n        const checkoutResponse = await checkoutSdk.checkout({\n            srcDigitalCardId: card.srcDigitalCardId,\n            srcCorrelationId: card.srcCorrelationId,\n            ...(card.isDcfPopupEmbedded && { windowRef: window.frames[CTP_IFRAME_NAME] }),\n            ...(this.storeCookies && { complianceSettings: { complianceResources: [{ complianceType: 'REMEMBER_ME', uri: '' }] } })\n        });\n\n        if (checkoutResponse.dcfActionCode !== 'COMPLETE') {\n            throw new AdyenCheckoutError(\n                'ERROR',\n                `Checkout through Scheme DCF did not complete. DCF Action code received: ${checkoutResponse.dcfActionCode}`\n            );\n        }\n\n        return createCheckoutPayloadBasedOnScheme(card, checkoutResponse, this.environment);\n    }\n\n    /**\n     * Call the 'unbindAppInstance()' method of each SRC SDK in order to remove the shopper cookies.\n     * Besides, it deletes all information stored about the shopper.\n     */\n    public async logout(): Promise<void> {\n        if (!this.sdks) {\n            throw new AdyenCheckoutError('ERROR', 'ClickToPayService is not initialized');\n        }\n\n        try {\n            const logoutPromises = this.sdks.map(sdk => sdk.unbindAppInstance());\n            await Promise.all(logoutPromises);\n        } catch (error) {\n            if (error instanceof SrciError) console.warn(`Error at ClickToPayService # logout: ${error.toString()}`);\n            else console.warn(error);\n        }\n\n        this.shopperCards = null;\n        this.identityValidationData = null;\n        this.validationSchemeSdk = null;\n\n        this.setState(CtpState.Login);\n    }\n\n    /**\n     * Call the 'identityLookup()' method of each SRC SDK in order to verify if the shopper has an account.\n     *\n     * Based on the responses from the Click to Pay Systems, we should do the validation process using the SDK that\n     * that responds faster with 'consumerPresent=true'\n     */\n    public verifyIfShopperIsEnrolled(shopperIdentity: IdentityLookupParams): Promise<{ isEnrolled: boolean }> {\n        const { shopperEmail } = shopperIdentity;\n\n        return new Promise((resolve, reject) => {\n            const lookupPromises = this.sdks.map(sdk => {\n                const identityLookupPromise = executeWithTimeout<SrciIdentityLookupResponse>(\n                    () => sdk.identityLookup({ identityValue: shopperEmail, type: 'email' }),\n                    5000,\n                    new TimeoutError({\n                        source: 'identityLookup',\n                        scheme: sdk.schemeName,\n                        isTimeoutTriggeredBySchemeSdk: false\n                    })\n                );\n\n                return identityLookupPromise\n                    .then(response => {\n                        if (response.consumerPresent && !this.validationSchemeSdk) {\n                            this.setSdkForPerformingShopperIdentityValidation(sdk);\n                            resolve({ isEnrolled: true });\n                        }\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            });\n\n            void Promise.allSettled(lookupPromises).then(() => {\n                resolve({ isEnrolled: false });\n            });\n        });\n    }\n\n    private setState(state: CtpState): void {\n        this.state = state;\n        this.stateSubscriber?.(this.state);\n    }\n\n    private setSdkForPerformingShopperIdentityValidation(sdk: ISrcInitiator) {\n        this.validationSchemeSdk = sdk;\n    }\n\n    private handleTimeout(error: SrciError | TimeoutError) {\n        // If the timeout error was thrown directly by the scheme SDK, we convert it to TimeoutError\n        // If the timeout error was thrown by our internal timeout mechanism, we don't do anything\n        const timeoutError =\n            error instanceof SrciError\n                ? new TimeoutError({ source: error.source, scheme: error.scheme, isTimeoutTriggeredBySchemeSdk: true })\n                : error;\n\n        if (timeoutError.scheme === 'visa') {\n            timeoutError.setCorrelationId(window.VISA_SDK?.correlationId);\n\n            // Visa srciDpaId must be passed when there is no correlation ID available\n            if (window.VISA_SDK?.correlationId) window.VISA_SDK?.buildClientProfile?.();\n            else window.VISA_SDK?.buildClientProfile?.(this.schemesConfig.visa.srciDpaId);\n        }\n        this.onTimeout?.(timeoutError);\n    }\n\n    /**\n     * Based on the given 'idToken', this method goes through each SRCi SDK and fetches the shopper\n     * profile with his cards.\n     */\n    private async getShopperProfile(idTokens: string[]): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const srcProfilesPromises = this.sdks.map(sdk => sdk.getSrcProfile(idTokens));\n\n            void Promise.allSettled(srcProfilesPromises).then(srcProfilesResponses => {\n                if (srcProfilesResponses.every(isRejected)) {\n                    reject(srcProfilesResponses[0].reason);\n                }\n\n                const createProfileWithScheme = (promiseResult: PromiseSettledResult<SrcProfile>, index) =>\n                    isFulfilled(promiseResult) && { ...promiseResult.value, scheme: this.sdks[index].schemeName };\n\n                const profilesWithScheme: SrcProfileWithScheme[] = srcProfilesResponses.map(createProfileWithScheme).filter(profile => !!profile);\n\n                this.shopperCards = createShopperCardsList(profilesWithScheme);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Calls the 'isRecognized()' method of each SRC SDK in order to verify if the shopper is\n     * recognized on the device. The shopper is recognized if he/she has the Cookies stored\n     * on their browser\n     */\n    private verifyIfShopperIsRecognized(): Promise<SrciIsRecognizedResponse> {\n        return new Promise((resolve, reject) => {\n            const promises = this.sdks.map(sdk => {\n                const isRecognizedPromise = executeWithTimeout<SrciIsRecognizedResponse>(\n                    () => sdk.isRecognized(),\n                    5000,\n                    new TimeoutError({\n                        source: 'isRecognized',\n                        scheme: sdk.schemeName,\n                        isTimeoutTriggeredBySchemeSdk: false\n                    })\n                );\n\n                return isRecognizedPromise\n                    .then(response => {\n                        if (response.recognized) resolve(response);\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            });\n\n            // If the 'resolve' didn't happen until this point, then shopper is not recognized\n            void Promise.allSettled(promises).then(() => {\n                resolve({ recognized: false });\n            });\n        });\n    }\n\n    private initiateSdks(): Promise<void[]> {\n        const initPromises = this.sdks.map(sdk => {\n            const cfg = this.schemesConfig[sdk.schemeName];\n\n            return executeWithTimeout<void>(\n                () => sdk.init(cfg, this.srciTransactionId),\n                5000,\n                new TimeoutError({\n                    source: 'init',\n                    scheme: sdk.schemeName,\n                    isTimeoutTriggeredBySchemeSdk: false\n                })\n            );\n        });\n\n        return Promise.all(initPromises);\n    }\n}\n\nexport default ClickToPayService;\n"],"names":["CtpState","ClickToPayService","shopperAccountFound","includes","this","state","schemes","sdkLoader","updateStoreCookiesConsent","shouldStore","storeCookies","initialize","setState","sdks","load","environment","initiateSdks","recognized","idTokens","verifyIfShopperIsRecognized","getShopperProfile","shopperIdentity","isEnrolled","verifyIfShopperIsEnrolled","error","SrciError","reason","TimeoutError","handleTimeout","console","warn","toString","subscribeOnStateChange","callback","stateSubscriber","startIdentityValidation","validationSchemeSdk","Error","maskedValidationChannel","initiateIdentityValidation","identityValidationData","maskedShopperContact","replace","selectedNetwork","SchemeNames","schemeName","finishIdentityValidation","otpCode","validationToken","completeIdentityValidation","idToken","checkout","card","checkoutSdk","find","sdk","scheme","checkoutResponse","srcDigitalCardId","srcCorrelationId","isDcfPopupEmbedded","windowRef","window","frames","CTP_IFRAME_NAME","complianceSettings","complianceResources","complianceType","uri","dcfActionCode","AdyenCheckoutError","createCheckoutPayloadBasedOnScheme","logout","logoutPromises","map","unbindAppInstance","Promise","all","shopperCards","shopperEmail","resolve","reject","lookupPromises","executeWithTimeout","identityLookup","identityValue","type","source","isTimeoutTriggeredBySchemeSdk","then","response","consumerPresent","setSdkForPerformingShopperIdentityValidation","catch","allSettled","timeoutError","setCorrelationId","VISA_SDK","correlationId","buildClientProfile","schemesConfig","visa","srciDpaId","onTimeout","srcProfilesPromises","getSrcProfile","srcProfilesResponses","every","isRejected","profilesWithScheme","promiseResult","index","isFulfilled","value","filter","profile","createShopperCardsList","promises","isRecognized","initPromises","cfg","init","srciTransactionId","constructor","_define_property","uuidv4"],"mappings":"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"}