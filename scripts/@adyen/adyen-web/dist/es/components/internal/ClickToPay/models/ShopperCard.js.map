{"version":3,"file":"ShopperCard.js","sources":["../../../../../../src/components/internal/ClickToPay/models/ShopperCard.ts"],"sourcesContent":["import { DigitalCardStatus, SrcCard } from '../services/sdks/types';\nimport { SchemeNames } from '../services/sdks/utils';\nimport { ClickToPayScheme } from '../types';\n\nclass ShopperCard {\n    public dateOfCardLastUsed?: string;\n    public dateOfCardCreated: string;\n    public panLastFour: string;\n    public srcDigitalCardId: string;\n    public scheme: ClickToPayScheme;\n    public artUri: string;\n    public srcCorrelationId: string;\n    public tokenId?: string;\n    public isExpired: boolean;\n\n    private readonly panExpirationMonth: string;\n    private readonly panExpirationYear: string;\n    private readonly descriptorName?: string;\n    private readonly status?: DigitalCardStatus = null;\n\n    constructor(maskedCard: SrcCard, scheme: ClickToPayScheme, srcCorrelationId: string) {\n        this.dateOfCardLastUsed = maskedCard.dateOfCardLastUsed;\n        this.dateOfCardCreated = maskedCard.dateOfCardCreated;\n        this.panLastFour = maskedCard.panLastFour;\n        this.srcDigitalCardId = maskedCard.srcDigitalCardId;\n        this.descriptorName = maskedCard.digitalCardData.descriptorName;\n        this.tokenId = maskedCard.tokenId;\n        this.scheme = scheme;\n        this.artUri = maskedCard.digitalCardData.artUri;\n        this.srcCorrelationId = srcCorrelationId;\n        this.panExpirationMonth = maskedCard.panExpirationMonth;\n        this.panExpirationYear = maskedCard.panExpirationYear;\n        this.status = maskedCard.digitalCardData.status;\n\n        this.isExpired = this.confirmCardIsExpired();\n    }\n\n    get title() {\n        return this.scheme === 'visa' ? SchemeNames[this.scheme] : this.descriptorName || SchemeNames[this.scheme];\n    }\n\n    get isDcfPopupEmbedded(): boolean {\n        return this.scheme === 'mc';\n    }\n\n    private confirmCardIsExpired(): boolean {\n        if (this.status !== 'ACTIVE') return true;\n        if (!this.panExpirationYear && !this.panExpirationMonth) return false;\n\n        const [currentMonth, currentYear] = [new Date().getMonth() + 1, new Date().getFullYear()];\n        if (Number(this.panExpirationYear) > currentYear) return false;\n        if (Number(this.panExpirationYear) === currentYear && Number(this.panExpirationMonth) >= currentMonth) return false;\n\n        return true;\n    }\n}\n\nexport default ShopperCard;\n"],"names":["ShopperCard","title","this","scheme","SchemeNames","descriptorName","isDcfPopupEmbedded","confirmCardIsExpired","status","panExpirationYear","panExpirationMonth","currentMonth","currentYear","Date","getMonth","getFullYear","Number","constructor","maskedCard","srcCorrelationId","_define_property","dateOfCardLastUsed","dateOfCardCreated","panLastFour","srcDigitalCardId","artUri","tokenId","isExpired","digitalCardData"],"mappings":"gLAIA,MAAMA,EAiCF,SAAIC,GACA,MAAuB,SAAhBC,KAAKC,OAAoBC,EAAYF,KAAKC,QAAUD,KAAKG,gBAAkBD,EAAYF,KAAKC,OACvG,CAEA,sBAAIG,GACA,MAAuB,OAAhBJ,KAAKC,MAChB,CAEQI,oBAAAA,GACJ,GAAoB,WAAhBL,KAAKM,OAAqB,OAAO,EACrC,IAAKN,KAAKO,oBAAsBP,KAAKQ,mBAAoB,OAAO,EAEhE,MAAOC,EAAcC,GAAe,EAAC,IAAIC,MAAOC,WAAa,GAAG,IAAID,MAAOE,eAC3E,QAAIC,OAAOd,KAAKO,mBAAqBG,MACjCI,OAAOd,KAAKO,qBAAuBG,GAAeI,OAAOd,KAAKQ,qBAAuBC,EAG7F,CAlCAM,WAAAA,CAAYC,EAAqBf,EAA0BgB,GAf3DC,EAAAlB,KAAOmB,0BAAP,GACAD,EAAAlB,KAAOoB,yBAAP,GACAF,EAAAlB,KAAOqB,mBAAP,GACAH,EAAAlB,KAAOsB,wBAAP,GACAJ,EAAAlB,KAAOC,cAAP,GACAiB,EAAAlB,KAAOuB,cAAP,GACAL,EAAAlB,KAAOiB,wBAAP,GACAC,EAAAlB,KAAOwB,eAAP,GACAN,EAAAlB,KAAOyB,iBAAP,GAEAP,EAAAlB,KAAiBQ,0BAAjB,GACAU,EAAAlB,KAAiBO,yBAAjB,GACAW,EAAAlB,KAAiBG,sBAAjB,GACAe,EAAAlB,KAAiBM,SAA6B,MAG1CN,KAAKmB,mBAAqBH,EAAWG,mBACrCnB,KAAKoB,kBAAoBJ,EAAWI,kBACpCpB,KAAKqB,YAAcL,EAAWK,YAC9BrB,KAAKsB,iBAAmBN,EAAWM,iBACnCtB,KAAKG,eAAiBa,EAAWU,gBAAgBvB,eACjDH,KAAKwB,QAAUR,EAAWQ,QAC1BxB,KAAKC,OAASA,EACdD,KAAKuB,OAASP,EAAWU,gBAAgBH,OACzCvB,KAAKiB,iBAAmBA,EACxBjB,KAAKQ,mBAAqBQ,EAAWR,mBACrCR,KAAKO,kBAAoBS,EAAWT,kBACpCP,KAAKM,OAASU,EAAWU,gBAAgBpB,OAEzCN,KAAKyB,UAAYzB,KAAKK,sBAC1B"}