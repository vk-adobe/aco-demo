{"version":3,"file":"AbstractSrcInitiator.js","sources":["../../../../../../../src/components/internal/ClickToPay/services/sdks/AbstractSrcInitiator.ts"],"sourcesContent":["import {\n    CustomSdkConfiguration,\n    SrcCheckoutParams,\n    SrciCheckoutResponse,\n    SrciCompleteIdentityValidationResponse,\n    SrcIdentityLookupParams,\n    SrciIdentityLookupResponse,\n    SrciInitiateIdentityValidationResponse,\n    SrciIsRecognizedResponse,\n    SrcInitParams,\n    SrcProfile\n} from './types';\nimport SrciError, { MastercardError, VisaError } from './SrciError';\nimport { ClickToPayScheme } from '../../types';\nimport Script from '../../../../../utils/Script';\n\nexport interface ISrcInitiator {\n    schemeName: ClickToPayScheme;\n    // Loading 3rd party library\n    loadSdkScript(): Promise<void>;\n    removeSdkScript(): void;\n    // SRCi specification methods\n    init(params: SrcInitParams, srciTransactionId: string): Promise<void>;\n    isRecognized(): Promise<SrciIsRecognizedResponse>;\n    identityLookup(params: SrcIdentityLookupParams): Promise<SrciIdentityLookupResponse>;\n    initiateIdentityValidation(): Promise<SrciInitiateIdentityValidationResponse>;\n    completeIdentityValidation(validationData: string): Promise<SrciCompleteIdentityValidationResponse>;\n    getSrcProfile(idTokens: string[]): Promise<SrcProfile>;\n    checkout(params: SrcCheckoutParams): Promise<SrciCheckoutResponse>;\n    unbindAppInstance(): Promise<void>;\n}\n\nexport default abstract class AbstractSrcInitiator implements ISrcInitiator {\n    public schemeSdk: any;\n    public abstract readonly schemeName: ClickToPayScheme;\n\n    protected readonly customSdkConfiguration: CustomSdkConfiguration;\n\n    private readonly sdkUrl: string;\n    private scriptElement: Script | null = null;\n\n    protected constructor(sdkUrl: string, customSdkConfiguration: CustomSdkConfiguration) {\n        if (!sdkUrl) throw Error('AbstractSrcInitiator: Invalid SDK URL');\n\n        this.sdkUrl = sdkUrl;\n        this.customSdkConfiguration = customSdkConfiguration;\n    }\n\n    public async loadSdkScript(): Promise<void> {\n        if (!this.isSdkIsAvailableOnWindow()) {\n            this.scriptElement = new Script(this.sdkUrl);\n            await this.scriptElement.load();\n        }\n        this.assignSdkReference();\n    }\n\n    public removeSdkScript(): void {\n        this.scriptElement.remove();\n    }\n\n    /**\n     * Verifies if SDK is already loaded on the window object.\n     * Example: Merchant can preload the SDK to speed up the loading time\n     */\n    protected abstract isSdkIsAvailableOnWindow(): boolean;\n\n    /**\n     * Assign SchemeSDK object to 'schemeSdk' property.\n     * Each scheme creates its own object reference on 'window' using different naming,\n     * therefore this method should be implemented by the subclass to assign the property\n     * accordingly\n     */\n    protected abstract assignSdkReference(): void;\n\n    /**\n     * Initializes the app with common state. The init method must be called before any other methods.\n     */\n    public abstract init(params: SrcInitParams, srciTransactionId: string): Promise<void>;\n\n    /**\n     * This method performs checkout using the specified card. If successful, the\n     * response contains summary checkout information.\n     */\n    public async checkout(params: SrcCheckoutParams): Promise<SrciCheckoutResponse> {\n        try {\n            const checkoutResponse = await this.schemeSdk.checkout(params);\n            return checkoutResponse;\n        } catch (error) {\n            const srciError = new SrciError(error as VisaError | MastercardError, 'checkout', this.schemeName);\n            throw srciError;\n        }\n    }\n\n    /**\n     * This method disassociates the Consumer application / Consumer Device from the Consumer’s SRC Profile.\n     */\n    public async unbindAppInstance(): Promise<void> {\n        try {\n            await this.schemeSdk.unbindAppInstance();\n        } catch (error) {\n            const srciError = new SrciError(error as VisaError | MastercardError, 'unbindAppInstance', this.schemeName);\n            throw srciError;\n        }\n    }\n\n    /**\n     * Determines whether the consumer is recognized, e.g. by detecting the presence of a local cookie in\n     * the browser environment.\n     */\n    public async isRecognized(): Promise<SrciIsRecognizedResponse> {\n        try {\n            const isRecognizedResponse = await this.schemeSdk.isRecognized();\n            return isRecognizedResponse;\n        } catch (error) {\n            const srciError = new SrciError(error as VisaError | MastercardError, 'isRecognized', this.schemeName);\n            throw srciError;\n        }\n    }\n\n    /**\n     * Sends a validation code to the specified consumer.\n     * This method sends a one-time password (OTP) to the consumer to start validation\n     */\n    public async initiateIdentityValidation(): Promise<SrciInitiateIdentityValidationResponse> {\n        try {\n            const identityValidationResponse = await this.schemeSdk.initiateIdentityValidation();\n            return identityValidationResponse;\n        } catch (error) {\n            const srciError = new SrciError(error as VisaError | MastercardError, 'initiateIdentityValidation', this.schemeName);\n            throw srciError;\n        }\n    }\n\n    /**\n     * Obtains the masked card and other account profile data associated with the userId.\n     */\n    public async getSrcProfile(idTokens: string[]): Promise<SrcProfile> {\n        try {\n            const getSrcProfileResponse = await this.schemeSdk.getSrcProfile({ idTokens });\n            return getSrcProfileResponse;\n        } catch (error) {\n            const srciError = new SrciError(error as VisaError | MastercardError, 'getSrcProfile', this.schemeName);\n            throw srciError;\n        }\n    }\n\n    /**\n     * Obtains the user account associated with the consumer’s identity (an email address or phone\n     * number).\n     */\n    public abstract identityLookup(params: SrcIdentityLookupParams): Promise<SrciIdentityLookupResponse>;\n\n    /**\n     * This method completes the identity validation by receiving the one-time password (OTP) sent to the\n     * consumer to start validation.\n     */\n    public abstract completeIdentityValidation(otp: string): Promise<SrciCompleteIdentityValidationResponse>;\n}\n"],"names":["AbstractSrcInitiator","loadSdkScript","this","isSdkIsAvailableOnWindow","scriptElement","Script","sdkUrl","load","assignSdkReference","removeSdkScript","remove","checkout","params","schemeSdk","error","SrciError","schemeName","unbindAppInstance","isRecognized","initiateIdentityValidation","getSrcProfile","idTokens","constructor","customSdkConfiguration","_define_property","Error"],"mappings":"oMAgCe,MAAeA,EAgB1B,mBAAaC,GACJC,KAAKC,6BACND,KAAKE,cAAgB,IAAIC,EAAOH,KAAKI,cAC/BJ,KAAKE,cAAcG,QAE7BL,KAAKM,oBACT,CAEOC,eAAAA,GACHP,KAAKE,cAAcM,QACvB,CAyBA,cAAaC,CAASC,GAClB,IAEI,aAD+BV,KAAKW,UAAUF,SAASC,EAE3D,CAAE,MAAOE,GAEL,MADkB,IAAIC,EAAUD,EAAsC,WAAYZ,KAAKc,WAE3F,CACJ,CAKA,uBAAaC,GACT,UACUf,KAAKW,UAAUI,mBACzB,CAAE,MAAOH,GAEL,MADkB,IAAIC,EAAUD,EAAsC,oBAAqBZ,KAAKc,WAEpG,CACJ,CAMA,kBAAaE,GACT,IAEI,aADmChB,KAAKW,UAAUK,cAEtD,CAAE,MAAOJ,GAEL,MADkB,IAAIC,EAAUD,EAAsC,eAAgBZ,KAAKc,WAE/F,CACJ,CAMA,gCAAaG,GACT,IAEI,aADyCjB,KAAKW,UAAUM,4BAE5D,CAAE,MAAOL,GAEL,MADkB,IAAIC,EAAUD,EAAsC,6BAA8BZ,KAAKc,WAE7G,CACJ,CAKA,mBAAaI,CAAcC,GACvB,IAEI,aADoCnB,KAAKW,UAAUO,cAAc,CAAEC,YAEvE,CAAE,MAAOP,GAEL,MADkB,IAAIC,EAAUD,EAAsC,gBAAiBZ,KAAKc,WAEhG,CACJ,CAvGA,WAAAM,CAAsBhB,EAAgBiB,GAClC,GATJC,EAAAtB,KAAOW,iBAAP,GAGAW,EAAAtB,KAAmBqB,8BAAnB,GAEAC,EAAAtB,KAAiBI,cAAjB,GACAkB,EAAAtB,KAAQE,gBAA+B,OAG9BE,EAAQ,MAAMmB,MAAM,yCAEzBvB,KAAKI,OAASA,EACdJ,KAAKqB,uBAAyBA,CAClC"}