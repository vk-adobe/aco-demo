{"version":3,"file":"CtPSaveCookiesCheckbox.js","sources":["../../../../../../../../src/components/internal/ClickToPay/components/CtPOneTimePassword/CtPSaveCookiesCheckbox/CtPSaveCookiesCheckbox.tsx"],"sourcesContent":["import { h, Fragment } from 'preact';\nimport classnames from 'classnames';\nimport Field from '../../../../FormFields/Field';\nimport Checkbox from '../../../../FormFields/Checkbox';\nimport { useCoreContext } from '../../../../../../core/Context/CoreProvider';\nimport { useState, useCallback } from 'preact/hooks';\nimport useClickToPayContext from '../../../context/useClickToPayContext';\nimport isScreenSmall from '../../../../../../utils/isScreenSmall';\nimport './CtPSaveCookiesCheckbox.scss';\n\nfunction CtPSaveCookiesCheckbox() {\n    const { i18n } = useCoreContext();\n    const { updateStoreCookiesConsent, isStoringCookies } = useClickToPayContext();\n    const [checked, setIsChecked] = useState(isStoringCookies);\n    const [isTextTruncated, setIsTextTruncated] = useState<boolean>(isScreenSmall());\n\n    const handleOnChange = useCallback(() => {\n        const newChecked = !checked;\n        setIsChecked(newChecked);\n        updateStoreCookiesConsent(newChecked);\n    }, [updateStoreCookiesConsent, setIsChecked, checked]);\n\n    return (\n        <div\n            className={classnames('adyen-checkout-ctp__otp-checkbox-container', {\n                'adyen-checkout-ctp__otp-checkbox-container--checked': checked\n            })}\n        >\n            <Field\n                classNameModifiers={['consentCheckbox']}\n                name={'clickToPayCookiesCheckbox'}\n                showContextualElement={false}\n                useLabelElement={false}\n                i18n={i18n}\n            >\n                <Checkbox\n                    name={'clickToPayCookiesCheckbox'}\n                    onInput={handleOnChange}\n                    label={i18n.get('ctp.otp.saveCookiesCheckbox.label')}\n                    checked={checked}\n                    aria-describedby={'adyen-ctp-cookies-info'}\n                />\n            </Field>\n\n            <p className=\"adyen-checkout-ctp__otp-checkbox-info\">\n                {isTextTruncated ? (\n                    <Fragment>\n                        <span id=\"adyen-ctp-cookies-info\">{i18n.get('ctp.otp.saveCookiesCheckbox.shorterInfo')} </span>\n                        <button className=\"adyen-checkout-ctp__otp-readmore-button\" onClick={() => setIsTextTruncated(false)}>\n                            {i18n.get('readMore')}..\n                        </button>\n                    </Fragment>\n                ) : (\n                    <span id=\"adyen-ctp-cookies-info\">{i18n.get('ctp.otp.saveCookiesCheckbox.information')}</span>\n                )}\n            </p>\n        </div>\n    );\n}\n\nexport default CtPSaveCookiesCheckbox;\n"],"names":["CtPSaveCookiesCheckbox","i18n","useCoreContext","updateStoreCookiesConsent","isStoringCookies","useClickToPayContext","checked","setIsChecked","useState","isTextTruncated","setIsTextTruncated","isScreenSmall","handleOnChange","useCallback","newChecked","h","div","className","classnames","Field","classNameModifiers","name","showContextualElement","useLabelElement","Checkbox","onInput","label","get","aria-describedby","p","Fragment","span","id","button","onClick"],"mappings":"oiBAUA,SAASA,IACL,MAAMC,KAAEA,GAASC,KACXC,0BAAEA,EAAyBC,iBAAEA,GAAqBC,KACjDC,EAASC,GAAgBC,EAASJ,IAClCK,EAAiBC,GAAsBF,EAAkBG,KAE1DC,EAAiBC,GAAY,KAC/B,MAAMC,GAAcR,EACpBC,EAAaO,GACbX,EAA0BW,EAAAA,GAC3B,CAACX,EAA2BI,EAAcD,IAE7C,OACIS,EAACC,MAAAA,CACGC,UAAWC,EAAW,6CAA8C,CAChE,sDAAuDZ,KAG3DS,EAACI,EAAAA,CACGC,mBAAoB,CAAC,mBACrBC,KAAM,4BACNC,uBAAuB,EACvBC,iBAAiB,EACjBtB,KAAMA,GAENc,EAACS,EAAAA,CACGH,KAAM,4BACNI,QAASb,EACTc,MAAOzB,EAAK0B,IAAI,qCAChBrB,QAASA,EACTsB,mBAAkB,4BAI1Bb,EAACc,IAAAA,CAAEZ,UAAU,yCACRR,EACGM,EAACe,OACGf,EAACgB,OAAAA,CAAKC,GAAG,0BAA0B/B,EAAK0B,IAAI,2CAA2C,KACvFZ,EAACkB,SAAAA,CAAOhB,UAAU,0CAA0CiB,QAAS,IAAMxB,GAAmB,IACzFT,EAAK0B,IAAI,YAAY,OAI9BZ,EAACgB,OAAAA,CAAKC,GAAG,0BAA0B/B,EAAK0B,IAAI,6CAKhE"}