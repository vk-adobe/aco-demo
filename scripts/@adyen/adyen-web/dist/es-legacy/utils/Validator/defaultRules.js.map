{"version":3,"file":"defaultRules.js","sources":["../../../../src/utils/Validator/defaultRules.ts"],"sourcesContent":["import { ValidatorRule } from './types';\nimport { isEmpty } from '../validator-utils';\nimport { ERROR_FIELD_INVALID, ERROR_FIELD_REQUIRED } from '../../core/Errors/constants';\nimport { email, telephoneNumber } from '../regex';\nimport { unformatDate } from '../../components/internal/FormFields/InputDate/utils';\n\nconst isPhoneValid = (value: string, validationRule: ValidatorRule): boolean | null => {\n    if (isEmpty(value)) {\n        validationRule.errorMessage = ERROR_FIELD_REQUIRED;\n        return null;\n    }\n    validationRule.errorMessage = ERROR_FIELD_INVALID;\n    return telephoneNumber.test(value);\n};\n\nconst isEmailValid = (value: string, validationRule: ValidatorRule): boolean | null => {\n    if (isEmpty(value)) {\n        validationRule.errorMessage = ERROR_FIELD_REQUIRED;\n        return null;\n    }\n    validationRule.errorMessage = ERROR_FIELD_INVALID;\n    return value.length >= 6 && value.length <= 320 && email.test(value);\n};\n\nconst isDateOfBirthValid = (value: string, validationRule: ValidatorRule): boolean | null => {\n    if (!value) {\n        validationRule.errorMessage = ERROR_FIELD_REQUIRED;\n        return false;\n    }\n    validationRule.errorMessage = 'dateOfBirth.invalid';\n    const rawValue = unformatDate(value);\n    const ageDiff = Date.now() - Date.parse(rawValue);\n    const age = new Date(ageDiff).getFullYear() - 1970;\n    return age >= 18;\n};\n\nconst phoneNumberRule: ValidatorRule = {\n    validate: value => isPhoneValid(value, phoneNumberRule),\n    modes: ['blur']\n};\n\nconst emailRule: ValidatorRule = {\n    validate: value => isEmailValid(value, emailRule),\n    modes: ['blur']\n};\n\nconst dateOfBirthRule: ValidatorRule = {\n    validate: value => isDateOfBirthValid(value, dateOfBirthRule),\n    modes: ['blur']\n};\n\nexport const validationRules = { phoneNumberRule, emailRule, dateOfBirthRule };\n"],"names":["phoneNumberRule","validate","value","validationRule","isEmpty","errorMessage","ERROR_FIELD_REQUIRED","ERROR_FIELD_INVALID","telephoneNumber","test","isPhoneValid","modes","emailRule","length","email","isEmailValid","dateOfBirthRule","rawValue","unformatDate","ageDiff","Date","now","parse","getFullYear","isDateOfBirthValid","validationRules"],"mappings":"+RAMA,MA8BMA,EAAiC,CACnCC,SAAUC,GA/BO,EAACA,EAAeC,IAC7BC,EAAQF,IACRC,EAAeE,aAAeC,EACvB,OAEXH,EAAeE,aAAeE,EACvBC,EAAgBC,KAAKP,IAyBTQ,CAAaR,EAAOF,GACvCW,MAAO,CAAC,SAGNC,EAA2B,CAC7BX,SAAUC,GA3BO,EAACA,EAAeC,IAC7BC,EAAQF,IACRC,EAAeE,aAAeC,EACvB,OAEXH,EAAeE,aAAeE,EACvBL,EAAMW,QAAU,GAAKX,EAAMW,QAAU,KAAOC,EAAML,KAAKP,IAqB3Ca,CAAab,EAAOU,GACvCD,MAAO,CAAC,SAGNK,EAAiC,CACnCf,SAAUC,GAvBa,EAACA,EAAeC,KACvC,IAAKD,EAED,OADAC,EAAeE,aAAeC,GACvB,EAEXH,EAAeE,aAAe,sBAC9B,MAAMY,EAAWC,EAAahB,GACxBiB,EAAUC,KAAKC,MAAQD,KAAKE,MAAML,GAExC,OADY,IAAIG,KAAKD,GAASI,cAAgB,MAChC,EAAA,EAcKC,CAAmBtB,EAAOc,GAC7CL,MAAO,CAAC,SAGCc,EAAkB,CAAEzB,kBAAiBY,YAAWI"}