{"version":3,"file":"promiseTimeout.js","sources":["../../../src/utils/promiseTimeout.ts"],"sourcesContent":["/**\n * Tests if a passed promise settles before a certain amount of time has elapsed\n *\n * @param ms - number of milliseconds the passed promise has to settle\n * @param promise - the passed promise\n * @param timeOutObject - the object that the promiseTimeout will reject with if the passed promise doesn't settle in time\n */\nconst promiseTimeout = (ms: number, promise: Promise<any>, timeOutObject: object) => {\n    let timer;\n\n    const promiseTimer: Promise<any> = new Promise((resolve, reject): void => {\n        // Create a timeout to reject promise if not resolved\n        timer = setTimeout((): void => {\n            reject(timeOutObject);\n        }, ms);\n\n        promise\n            .then((res): void => {\n                clearTimeout(timer);\n                resolve(res);\n            })\n            .catch((err): void => {\n                clearTimeout(timer);\n                reject(err);\n            });\n    });\n\n    const cancelTimer = (): void => {\n        clearTimeout(timer);\n    };\n\n    return {\n        promise: promiseTimer,\n        cancel: cancelTimer\n    };\n};\n\nexport default promiseTimeout;\n"],"names":["promiseTimeout","ms","promise","timeOutObject","timer","Promise","resolve","reject","setTimeout","then","res","clearTimeout","catch","err","cancel"],"mappings":"AAOMA,MAAAA,EAAiB,CAACC,EAAYC,EAAuBC,KACvD,IAAIC,EAuBJ,MAAO,CACHF,QAtB+B,IAAIG,SAAQ,CAACC,EAASC,KAErDH,EAAQI,YAAW,KACfD,EAAOJ,EAAAA,GACRF,GAEHC,EACKO,MAAMC,IACHC,aAAaP,GACbE,EAAQI,EAAAA,IAEXE,OAAOC,IACJF,aAAaP,GACbG,EAAOM,EAAAA,GACX,IASJC,OANgB,KAChBH,aAAaP,EAAAA,EAMjB"}