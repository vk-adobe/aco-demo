{"version":3,"file":"get-process-message-handler.js","sources":["../../../src/utils/get-process-message-handler.ts"],"sourcesContent":["/**\n * Centralised window.postMessage processing function used in 3DS2 components and also by the deviceFingerprinting process\n * NOTE: this latter use case means that while the deviceFingerprinting is still completing this component is also listening to\n *  securedFields related postMessaging\n *\n * @param domain - expected domain for the postMesssage to have originated from\n * @param resolve - the resolve function from the Promise that called this function\n * @param reject - the reject function from the Promise that called this function\n * @param parseErrorObj - an error object to log in the case of unparseable data (albeit from a valid origin)\n * @param expectedType - string to check that the passed data has the expected type\n */\nimport { hasOwnProperty } from './hasOwnProperty';\nimport { PostMsgParseErrorObject } from '../components/ThreeDS2/types';\n\nconst getProcessMessageHandler =\n    (domain: string, resolve: Function, reject: Function, expectedType: string): Function =>\n    event => {\n        const parseErrorObj: PostMsgParseErrorObject = {};\n        const origin = event.origin || event.originalEvent?.origin;\n\n        if (origin !== domain) {\n            return 'Message was not sent from the expected domain';\n        }\n\n        if (typeof event.data !== 'string') {\n            return 'Event data was not of type string';\n        }\n\n        if (!event.data.length) {\n            return 'Invalid event data string';\n        }\n\n        // Try to parse the data\n        try {\n            const feedbackObj = JSON.parse(event.data);\n            if (hasOwnProperty(feedbackObj, 'type') && feedbackObj.type === expectedType) {\n                resolve(feedbackObj);\n            } else {\n                // Silent fail - applies when RiskModule device fingerprinting is ongoing and this handler is picking up securedFields traffic\n                return 'Event data was not of expected type';\n            }\n        } catch (e) {\n            parseErrorObj.type = `${expectedType}-JSON-parse-error`;\n            parseErrorObj.comment = 'failed to JSON parse event.data';\n            parseErrorObj.extraInfo = `event.data = ${event.data}`;\n            parseErrorObj.eventDataRaw = event.data;\n\n            // TODO - decide whether to console.log/debug/error &/or call the merchant defined onError callback\n            console.debug('get-process-message-handler::CATCH::Un-parseable JSON:: parseErrorObj=', parseErrorObj);\n\n            return false;\n        }\n\n        return true;\n    };\n\nexport default getProcessMessageHandler;\n"],"names":["getProcessMessageHandler","domain","resolve","reject","expectedType","event","parseErrorObj","origin","originalEvent","data","length","feedbackObj","JSON","parse","hasOwnProperty","type","e","comment","extraInfo","eventDataRaw","console","debug"],"mappings":"qDAcA,MAAMA,EACF,CAACC,EAAgBC,EAAmBC,EAAkBC,IACtDC,IAEmCA,IAAAA,EAD/B,MAAMC,EAAyC,CAAC,EAGhD,IAFeD,EAAME,SAA6B,QAAnBF,EAAAA,EAAMG,qBAANH,IAAAA,OAAAA,EAAAA,EAAqBE,WAErCN,EACX,MAAO,gDAGX,GAA0B,iBAAfI,EAAMI,KACb,MAAO,oCAGX,IAAKJ,EAAMI,KAAKC,OACZ,MAAO,4BAIX,IACI,MAAMC,EAAcC,KAAKC,MAAMR,EAAMI,MACrC,IAAIK,EAAeH,EAAa,SAAWA,EAAYI,OAASX,EAI5D,MAAO,sCAHPF,EAAQS,EAKhB,CAAE,MAAOK,GASL,OARAV,EAAcS,KAAO,GAAGX,qBACxBE,EAAcW,QAAU,kCACxBX,EAAcY,UAAY,gBAAgBb,EAAMI,OAChDH,EAAca,aAAed,EAAMI,KAGnCW,QAAQC,MAAM,yEAA0Ef,IAEjF,CACX,CAEA,OAAO,CAAA"}