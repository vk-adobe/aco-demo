{"version":3,"file":"EventsQueue.js","sources":["../../../../src/core/Analytics/EventsQueue.ts"],"sourcesContent":["import { HttpOptions, httpPost } from '../Services/http';\nimport { AnalyticsObject, EventQueueProps } from './types';\n\ninterface CAActions {\n    channel: 'Web';\n    platform: 'Web';\n    info: AnalyticsObject[];\n    errors: AnalyticsObject[];\n    logs: AnalyticsObject[];\n}\n\nexport interface EventsQueueModule {\n    add: (t: string, o: AnalyticsObject) => void;\n    run: (id: string) => Promise<any>;\n    getQueue: () => CAActions;\n}\n\nconst EventsQueue = ({ analyticsContext, clientKey, analyticsPath }: EventQueueProps): EventsQueueModule => {\n    const caActions: CAActions = {\n        channel: 'Web',\n        platform: 'Web',\n        info: [],\n        errors: [],\n        logs: []\n    };\n\n    const runQueue = (checkoutAttemptId: string): Promise<any> => {\n        if (!caActions.info.length && !caActions.logs.length && !caActions.errors.length) {\n            return Promise.resolve(null);\n        }\n\n        const options: HttpOptions = {\n            errorLevel: 'silent' as const,\n            loadingContext: analyticsContext,\n            path: `${analyticsPath}/${checkoutAttemptId}?clientKey=${clientKey}`\n        };\n\n        return httpPost(options, caActions)\n            .then(() => {\n                // Succeed, silently\n                return undefined;\n            })\n            .catch(() => {\n                // Caught, silently, at http level. We do not expect this catch block to ever fire, but... just in case...\n                console.debug('### EventsQueue:::: send has failed');\n            });\n    };\n\n    return {\n        add: (type, actionObj) => {\n            caActions[type].push(actionObj);\n        },\n\n        run: (checkoutAttemptId: string) => {\n            const promise = runQueue(checkoutAttemptId);\n\n            caActions.info = [];\n            caActions.errors = [];\n            caActions.logs = [];\n\n            return promise;\n        },\n\n        // Expose getter for testing purposes\n        getQueue: () => caActions\n    };\n};\n\nexport default EventsQueue;\n"],"names":["EventsQueue","analyticsContext","clientKey","analyticsPath","caActions","channel","platform","info","errors","logs","add","type","actionObj","push","run","checkoutAttemptId","promise","length","httpPost","errorLevel","loadingContext","path","then","undefined","catch","console","debug","Promise","resolve","runQueue","getQueue"],"mappings":"+CAiBMA,MAAAA,EAAc,EAAGC,mBAAkBC,YAAWC,oBAChD,MAAMC,EAAuB,CACzBC,QAAS,MACTC,SAAU,MACVC,KAAM,GACNC,OAAQ,GACRC,KAAM,IAyBV,MAAO,CACHC,IAAK,CAACC,EAAMC,KACRR,EAAUO,GAAME,KAAKD,EAAAA,EAGzBE,IAAMC,IACF,MAAMC,EA5BG,CAACD,GACTX,EAAUG,KAAKU,QAAWb,EAAUK,KAAKQ,QAAWb,EAAUI,OAAOS,OAUnEC,EANsB,CACzBC,WAAY,SACZC,eAAgBnB,EAChBoB,KAAM,GAAGlB,KAAiBY,eAA+Bb,KAGpCE,GACpBkB,MAAK,KAEKC,IAEVC,OAAM,KAEHC,QAAQC,MAAM,sCAAA,IAhBXC,QAAQC,QAAQ,MA0BPC,CAASd,GAMzB,OAJAX,EAAUG,KAAO,GACjBH,EAAUI,OAAS,GACnBJ,EAAUK,KAAO,GAEVO,CAAAA,EAIXc,SAAU,IAAM1B,EACpB"}