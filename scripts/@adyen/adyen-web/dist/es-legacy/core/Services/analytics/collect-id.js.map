{"version":3,"file":"collect-id.js","sources":["../../../../../src/core/Services/analytics/collect-id.ts"],"sourcesContent":["import { httpPost } from '../http';\nimport Storage from '../../../utils/Storage';\nimport { CheckoutAttemptIdSession, CollectIdEvent, CollectIdProps, TelemetryEvent } from './types';\n\nexport const FAILURE_MSG =\n    'WARNING: Failed to retrieve \"checkoutAttemptId\". Consequently, analytics will not be available for this payment. The payment process, however, will not be affected.';\n\n/**\n * If the checkout attempt ID was stored more than fifteen minutes ago, then we should request a new ID.\n * More here: COWEB-1099\n */\nfunction confirmSessionDurationIsMaxFifteenMinutes(checkoutAttemptIdSession: CheckoutAttemptIdSession): boolean {\n    if (!checkoutAttemptIdSession?.id) return false;\n\n    const fifteenMinInMs = 1000 * 60 * 15;\n    const fifteenMinAgoTimestamp = Date.now() - fifteenMinInMs;\n    return checkoutAttemptIdSession.timestamp > fifteenMinAgoTimestamp;\n}\n\n/**\n * Send an event to Adyen with some basic telemetry info and receive a checkoutAttemptId in response\n * @param config - object containing values needed to calculate the url for the request; and also some that need to be serialized and included in the body of request\n * @returns a function returning a promise containing the response of the call (an object containing a checkoutAttemptId property)\n */\n// const collectId = ({ analyticsContext, clientKey, locale, amount }: CollectIdProps) => { // TODO - amount will be supported in the future\nconst collectId = ({ analyticsContext, clientKey, locale, analyticsPath, bundleType }: CollectIdProps) => {\n    let promise;\n\n    const options = {\n        errorLevel: 'fatal' as const, // ensure our catch block is called\n        loadingContext: analyticsContext,\n        path: `${analyticsPath}?clientKey=${clientKey}`\n    };\n\n    return (event: CollectIdEvent): Promise<string> => {\n        const telemetryEvent: TelemetryEvent = {\n            // amount,  // TODO will be supported in the future\n            version: process.env.VERSION,\n            // The data team want both platform & channel properties:\n            channel: 'Web',\n            platform: 'Web',\n            buildType: bundleType,\n            locale,\n            referrer: window.location.href,\n            screenWidth: window.screen.width,\n            ...event\n        };\n\n        if (promise) return promise; // Prevents multiple standalone components on the same page from making multiple calls to collect a checkoutAttemptId\n        if (!clientKey) return Promise.reject('no-client-key');\n\n        const storage = new Storage<CheckoutAttemptIdSession>('checkout-attempt-id', 'sessionStorage');\n        const checkoutAttemptIdSession = storage.get();\n\n        // In some cases, e.g. where the merchant has redirected the shopper and then returned them to checkout, we still have a valid checkoutAttemptId\n        // so there is no need for the re-initialised Checkout to generate another one\n        if (confirmSessionDurationIsMaxFifteenMinutes(checkoutAttemptIdSession)) {\n            return Promise.resolve(checkoutAttemptIdSession.id);\n        }\n\n        promise = httpPost(options, telemetryEvent)\n            .then(conversion => {\n                if (conversion?.checkoutAttemptId) {\n                    storage.set({ id: conversion.checkoutAttemptId, timestamp: Date.now() });\n                    return conversion.checkoutAttemptId;\n                }\n                return undefined;\n            })\n            .catch(() => {\n                return Promise.reject(FAILURE_MSG);\n            });\n\n        return promise;\n    };\n};\n\nexport default collectId;\n"],"names":["FAILURE_MSG","collectId","analyticsContext","clientKey","locale","analyticsPath","bundleType","promise","options","errorLevel","loadingContext","path","event","telemetryEvent","_object_spread","version","channel","platform","buildType","referrer","window","location","href","screenWidth","screen","width","Promise","reject","storage","Storage","checkoutAttemptIdSession","get","id","fifteenMinAgoTimestamp","Date","now","timestamp","confirmSessionDurationIsMaxFifteenMinutes","resolve","httpPost","then","conversion","checkoutAttemptId","set","undefined","catch"],"mappings":"uMAIO,MAAMA,EACT,uKAoBJ,MAAMC,EAAY,EAAGC,mBAAkBC,YAAWC,SAAQC,gBAAeC,iBACrE,IAAIC,EAEJ,MAAMC,EAAU,CACZC,WAAY,QACZC,eAAgBR,EAChBS,KAAM,GAAGN,eAA2BF,KAGxC,OAAQS,IACJ,MAAMC,wUAAiCC,CAAA,CAEnCC,QAAS,SAETC,QAAS,MACTC,SAAU,MACVC,UAAWZ,EACXF,SACAe,SAAUC,OAAOC,SAASC,KAC1BC,YAAaH,OAAOI,OAAOC,OACxBb,GAGP,GAAIL,EAAS,OAAOA,EACpB,IAAKJ,EAAW,OAAOuB,QAAQC,OAAO,iBAEtC,MAAMC,EAAU,IAAIC,EAAkC,sBAAuB,kBACvEC,EAA2BF,EAAQG,MAIzC,OA7CR,SAAmDD,GAC/C,KAAKA,aAAAA,EAAAA,EAA0BE,IAAI,OAAO,EAE1C,MACMC,EAAyBC,KAAKC,MADb,IAEvB,OAAOL,EAAyBM,UAAYH,CAChD,CAuCYI,CAA0CP,GACnCJ,QAAQY,QAAQR,EAAyBE,KAGpDzB,EAAUgC,EAAS/B,EAASK,GACvB2B,MAAKC,IACF,GAAIA,aAAAA,EAAAA,EAAYC,kBAEZ,OADAd,EAAQe,IAAI,CAAEX,GAAIS,EAAWC,kBAAmBN,UAAWF,KAAKC,QACzDM,EAAWC,iBAEfE,IAEVC,OAAM,IACInB,QAAQC,OAAO3B,KAGvBO,EAAAA,CACX"}