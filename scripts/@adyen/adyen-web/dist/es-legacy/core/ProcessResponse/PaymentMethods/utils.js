import{filterAllowedPaymentMethods as e,filterRemovedPaymentMethods as t,filterSupportedStoredPaymentMethods as r,filterEcomStoredPaymentMethods as o}from"./filters.js";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t.push.apply(t,r)}return t}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}const a=e=>s(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},o=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),o.forEach((function(t){n(e,t,r[t])}))}return e}({},e),{storedPaymentMethodId:e.id,isStoredPaymentMethod:!0}),i=(r,{allowPaymentMethods:o=[],removePaymentMethods:n=[]})=>r?r.filter(e,o).filter(t,n):[],p=(n,{allowPaymentMethods:s=[],removePaymentMethods:i=[]})=>n?n.filter(r).filter(e,s).filter(t,i).filter(o).map(a):[],c=e=>{var t,r;if("string"==typeof e)throw new Error('paymentMethodsResponse was provided but of an incorrect type (should be an object but a string was provided).Try JSON.parse("{...}") your paymentMethodsResponse.');if(e instanceof Array)throw new Error("paymentMethodsResponse was provided but of an incorrect type (should be an object but an array was provided).Please check you are passing the whole response.");!e||(null==e||null===(t=e.paymentMethods)||void 0===t?void 0:t.length)||(null==e||null===(r=e.storedPaymentMethods)||void 0===r?void 0:r.length)||console.warn("paymentMethodsResponse was provided but no payment methods were found.")};export{c as checkPaymentMethodsResponse,i as processPaymentMethods,p as processStoredPaymentMethods};
//# sourceMappingURL=utils.js.map
