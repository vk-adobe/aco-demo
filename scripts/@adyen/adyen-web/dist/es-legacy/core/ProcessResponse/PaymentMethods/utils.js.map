{"version":3,"file":"utils.js","sources":["../../../../../src/core/ProcessResponse/PaymentMethods/utils.ts"],"sourcesContent":["import { PaymentMethod, PaymentMethodsResponse, StoredPaymentMethod } from '../../../types/global-types';\nimport {\n    filterAllowedPaymentMethods,\n    filterEcomStoredPaymentMethods,\n    filterRemovedPaymentMethods,\n    filterSupportedStoredPaymentMethods\n} from './filters';\n\nconst processStoredPaymentMethod = (pm): StoredPaymentMethod => ({\n    ...pm,\n    storedPaymentMethodId: pm.id,\n    isStoredPaymentMethod: true\n});\n\nexport const processPaymentMethods = (paymentMethods: PaymentMethod[], { allowPaymentMethods = [], removePaymentMethods = [] }): PaymentMethod[] => {\n    if (!paymentMethods) return [];\n\n    return paymentMethods.filter(filterAllowedPaymentMethods, allowPaymentMethods).filter(filterRemovedPaymentMethods, removePaymentMethods);\n};\n\nexport const processStoredPaymentMethods = (\n    storedPaymentMethods: StoredPaymentMethod[],\n    { allowPaymentMethods = [], removePaymentMethods = [] }\n): StoredPaymentMethod[] => {\n    if (!storedPaymentMethods) return [];\n\n    return storedPaymentMethods\n        .filter(filterSupportedStoredPaymentMethods) // only display supported stored payment methods\n        .filter(filterAllowedPaymentMethods, allowPaymentMethods)\n        .filter(filterRemovedPaymentMethods, removePaymentMethods)\n        .filter(filterEcomStoredPaymentMethods) // Only accept Ecommerce shopper interactions\n        .map(processStoredPaymentMethod);\n};\n\nexport const checkPaymentMethodsResponse = (paymentMethodsResponse: PaymentMethodsResponse) => {\n    if (typeof paymentMethodsResponse === 'string') {\n        throw new Error(\n            'paymentMethodsResponse was provided but of an incorrect type (should be an object but a string was provided).' +\n                'Try JSON.parse(\"{...}\") your paymentMethodsResponse.'\n        );\n    }\n\n    if (paymentMethodsResponse instanceof Array) {\n        throw new Error(\n            'paymentMethodsResponse was provided but of an incorrect type (should be an object but an array was provided).' +\n                'Please check you are passing the whole response.'\n        );\n    }\n\n    if (paymentMethodsResponse && !paymentMethodsResponse?.paymentMethods?.length && !paymentMethodsResponse?.storedPaymentMethods?.length) {\n        console.warn('paymentMethodsResponse was provided but no payment methods were found.');\n    }\n};\n"],"names":["processStoredPaymentMethod","pm","_object_spread_props","storedPaymentMethodId","id","isStoredPaymentMethod","processPaymentMethods","paymentMethods","allowPaymentMethods","removePaymentMethods","filter","filterAllowedPaymentMethods","filterRemovedPaymentMethods","processStoredPaymentMethods","storedPaymentMethods","filterSupportedStoredPaymentMethods","filterEcomStoredPaymentMethods","map","checkPaymentMethodsResponse","paymentMethodsResponse","Error","Array","length","console","warn"],"mappings":"gpBAQA,MAAMA,EAA8BC,GAA6BC,wUAC1DD,CAAAA,CAAAA,EAAAA,GAAAA,CACHE,sBAAuBF,EAAGG,GAC1BC,uBAAuB,IAGdC,EAAwB,CAACC,GAAmCC,sBAAsB,GAAIC,uBAAuB,MACjHF,EAEEA,EAAeG,OAAOC,EAA6BH,GAAqBE,OAAOE,EAA6BH,GAFvF,GAKnBI,EAA8B,CACvCC,GACEN,sBAAsB,GAAIC,uBAAuB,MAE9CK,EAEEA,EACFJ,OAAOK,GACPL,OAAOC,EAA6BH,GACpCE,OAAOE,EAA6BH,GACpCC,OAAOM,GACPC,IAAIjB,GAPyB,GAUzBkB,EAA+BC,QAeTA,EAAmDA,EAdlF,GAAsC,iBAA3BA,EACP,MAAM,IAAIC,MACN,qKAKR,GAAID,aAAkCE,MAClC,MAAM,IAAID,MACN,kKAKJD,IAA2BA,SAAAA,QAAAA,EAAAA,EAAwBZ,sBAAxBY,IAAAA,OAAAA,EAAAA,EAAwCG,UAAWH,SAAAA,QAAAA,EAAAA,EAAwBL,4BAAxBK,IAAAA,SAAAA,EAA8CG,SAC5HC,QAAQC,KAAK,yEACjB"}