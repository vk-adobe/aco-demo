{"version":3,"file":"requests.js","sources":["../../../../src/components/GooglePay/requests.ts"],"sourcesContent":["import { getDecimalAmount } from '../../utils/amount-util';\nimport config from './config';\nimport { GooglePaymentDataRequest, GooglePayConfiguration } from './types';\n\n/**\n * Configure your site's support for payment methods supported by the Google Pay API.\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/object#IsReadyToPayRequest|isReadyToPayRequest}\n * @returns Google Pay API version, payment methods supported by the site\n */\nexport function isReadyToPayRequest({\n    allowedAuthMethods,\n    allowedCardNetworks,\n    existingPaymentMethodRequired = false\n}: Pick<\n    GooglePayConfiguration,\n    'allowedAuthMethods' | 'allowedCardNetworks' | 'existingPaymentMethodRequired'\n>): google.payments.api.IsReadyToPayRequest {\n    return {\n        apiVersion: config.API_VERSION,\n        apiVersionMinor: config.API_VERSION_MINOR,\n        allowedPaymentMethods: [\n            {\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods,\n                    allowedCardNetworks\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {}\n                }\n            }\n        ],\n        existingPaymentMethodRequired\n    };\n}\n\n/**\n * Provide Google Pay API with a payment amount, currency, and amount status\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/object#TransactionInfo|TransactionInfo}\n * @returns transaction info, suitable for use as transactionInfo property of PaymentDataRequest\n */\nexport function getTransactionInfo({\n    amount,\n    countryCode = 'US',\n    totalPriceStatus = 'FINAL',\n    ...props\n}: GooglePayConfiguration): google.payments.api.TransactionInfo {\n    const formattedPrice = String(getDecimalAmount(amount.value, amount.currency));\n\n    return {\n        countryCode,\n        currencyCode: amount.currency,\n        totalPrice: formattedPrice,\n        totalPriceStatus: totalPriceStatus,\n        ...props.transactionInfo\n    };\n}\n\nexport function initiatePaymentRequest({ configuration, ...props }: GooglePayConfiguration, countryCode: string): GooglePaymentDataRequest {\n    return {\n        apiVersion: config.API_VERSION,\n        apiVersionMinor: config.API_VERSION_MINOR,\n        transactionInfo: getTransactionInfo({ countryCode, ...props }),\n        merchantInfo: {\n            merchantId: configuration.merchantId,\n            merchantName: configuration.merchantName,\n            ...(configuration.merchantOrigin ? { merchantOrigin: configuration.merchantOrigin } : {}),\n            ...(configuration.authJwt ? { authJwt: configuration.authJwt } : {})\n        },\n        allowedPaymentMethods: [\n            {\n                type: 'CARD',\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: config.GATEWAY,\n                        gatewayMerchantId: configuration.gatewayMerchantId\n                    }\n                },\n                parameters: {\n                    allowedAuthMethods: props.allowedAuthMethods,\n                    allowedCardNetworks: props.allowedCardNetworks,\n                    assuranceDetailsRequired: props.assuranceDetailsRequired,\n                    allowPrepaidCards: props.allowPrepaidCards,\n                    allowCreditCards: props.allowCreditCards,\n                    billingAddressRequired: props.billingAddressRequired,\n                    billingAddressParameters: props.billingAddressParameters\n                }\n            }\n        ],\n        emailRequired: props.emailRequired,\n        shippingAddressRequired: props.shippingAddressRequired,\n        shippingAddressParameters: props.shippingAddressParameters,\n        shippingOptionRequired: props.shippingOptionRequired,\n        shippingOptionParameters: props.shippingOptionParameters,\n        callbackIntents: props.callbackIntents\n    };\n}\n"],"names":["isReadyToPayRequest","allowedAuthMethods","allowedCardNetworks","existingPaymentMethodRequired","apiVersion","config","API_VERSION","apiVersionMinor","API_VERSION_MINOR","allowedPaymentMethods","type","parameters","tokenizationSpecification","getTransactionInfo","_param","amount","countryCode","totalPriceStatus","props","_object_without_properties","formattedPrice","String","getDecimalAmount","value","currency","_object_spread","currencyCode","totalPrice","transactionInfo","initiatePaymentRequest","configuration","merchantInfo","merchantId","merchantName","merchantOrigin","authJwt","gateway","GATEWAY","gatewayMerchantId","assuranceDetailsRequired","allowPrepaidCards","allowCreditCards","billingAddressRequired","billingAddressParameters","emailRequired","shippingAddressRequired","shippingAddressParameters","shippingOptionRequired","shippingOptionParameters","callbackIntents"],"mappings":"64BAUO,SAASA,GAAoBC,mBAChCA,EAAkBC,oBAClBA,EAAmBC,8BACnBA,GAAgC,IAKhC,MAAO,CACHC,WAAYC,EAAOC,YACnBC,gBAAiBF,EAAOG,kBACxBC,sBAAuB,CACnB,CACIC,KAAM,OACNC,WAAY,CACRV,qBACAC,uBAEJU,0BAA2B,CACvBF,KAAM,kBACNC,WAAY,CAAA,KAIxBR,gCAER,CAQO,SAASU,EAAmBC,OAAAC,OAC/BA,EAAMC,YACNA,EAAc,KAAIC,iBAClBA,EAAmB,SAHYH,EAI5BI,EAJ4BC,EAAAL,EAAA,CAC/BC,SACAC,cACAC,qBAGA,MAAMG,EAAiBC,OAAOC,EAAiBP,EAAOQ,MAAOR,EAAOS,WAEpE,OAAOC,EAAA,CACHT,cACAU,aAAcX,EAAOS,SACrBG,WAAYP,EACZH,iBAAkBA,GACfC,EAAMU,gBAEjB,CAEO,SAASC,EAAuBf,EAAqDE,GAArD,IAAAc,cAAEA,GAAFhB,EAAoBI,EAApBC,EAAAL,EAAA,CAAEgB,kBACrC,MAAO,CACH1B,WAAYC,EAAOC,YACnBC,gBAAiBF,EAAOG,kBACxBoB,gBAAiBf,EAAmBY,EAAA,CAAET,eAAgBE,IACtDa,aAAcN,EAAA,CACVO,WAAYF,EAAcE,WAC1BC,aAAcH,EAAcG,cACxBH,EAAcI,eAAiB,CAAEA,eAAgBJ,EAAcI,gBAAmB,CAAC,EACnFJ,EAAcK,QAAU,CAAEA,QAASL,EAAcK,SAAY,IAErE1B,sBAAuB,CACnB,CACIC,KAAM,OACNE,0BAA2B,CACvBF,KAAM,kBACNC,WAAY,CACRyB,QAAS/B,EAAOgC,QAChBC,kBAAmBR,EAAcQ,oBAGzC3B,WAAY,CACRV,mBAAoBiB,EAAMjB,mBAC1BC,oBAAqBgB,EAAMhB,oBAC3BqC,yBAA0BrB,EAAMqB,yBAChCC,kBAAmBtB,EAAMsB,kBACzBC,iBAAkBvB,EAAMuB,iBACxBC,uBAAwBxB,EAAMwB,uBAC9BC,yBAA0BzB,EAAMyB,4BAI5CC,cAAe1B,EAAM0B,cACrBC,wBAAyB3B,EAAM2B,wBAC/BC,0BAA2B5B,EAAM4B,0BACjCC,uBAAwB7B,EAAM6B,uBAC9BC,yBAA0B9B,EAAM8B,yBAChCC,gBAAiB/B,EAAM+B,gBAE/B"}