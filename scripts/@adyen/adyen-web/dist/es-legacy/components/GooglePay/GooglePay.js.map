{"version":3,"file":"GooglePay.js","sources":["../../../../src/components/GooglePay/GooglePay.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport GooglePayService from './GooglePayService';\nimport GooglePayButton from './components/GooglePayButton';\nimport defaultProps from './defaultProps';\nimport { formatGooglePayContactToAdyenAddressFormat, getGooglePayLocale } from './utils';\nimport collectBrowserInfo from '../../utils/browserInfo';\nimport AdyenCheckoutError from '../../core/Errors/AdyenCheckoutError';\nimport { TxVariants } from '../tx-variants';\nimport { sanitizeResponse, verifyPaymentDidNotFail } from '../internal/UIElement/utils';\nimport {\n    ANALYTICS_EXPRESS_PAGES_ARRAY,\n    ANALYTICS_INSTANT_PAYMENT_BUTTON,\n    ANALYTICS_RENDERED_STR,\n    ANALYTICS_SELECTED_STR\n} from '../../core/Analytics/constants';\n\nimport type { AddressData, BrowserInfo, PaymentMethod, PaymentResponseData, RawPaymentResponse } from '../../types/global-types';\nimport type { GooglePayConfiguration } from './types';\nimport type { ICore } from '../../core/types';\nimport { AnalyticsInfoEvent } from '../../core/Analytics/AnalyticsInfoEvent';\nimport { AnalyticsEvent } from '../../core/Analytics/AnalyticsEvent';\n\nclass GooglePay extends UIElement<GooglePayConfiguration> {\n    public static type = TxVariants.googlepay;\n    public static txVariants = [TxVariants.googlepay, TxVariants.paywithgoogle];\n    public static defaultProps = defaultProps;\n\n    protected readonly googlePay;\n\n    constructor(checkout: ICore, props?: GooglePayConfiguration) {\n        super(checkout, props);\n        this.handleAuthorization = this.handleAuthorization.bind(this);\n        this.showGooglePayPaymentSheet = this.showGooglePayPaymentSheet.bind(this);\n\n        const { isExpress, paymentDataCallbacks } = this.props;\n\n        if (isExpress === false && paymentDataCallbacks?.onPaymentDataChanged) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'GooglePay - You must set \"isExpress\" flag to \"true\" in order to use \"onPaymentDataChanged\" callback'\n            );\n        }\n\n        if (!this.props.configuration.merchantId) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'GooglePay - Missing merchantId. Please ensure that it is correctly configured in your customer area.'\n            );\n        }\n\n        this.googlePay = new GooglePayService(this.props.environment, {\n            ...(isExpress && paymentDataCallbacks?.onPaymentDataChanged && { onPaymentDataChanged: paymentDataCallbacks.onPaymentDataChanged }),\n            onPaymentAuthorized: this.onPaymentAuthorized\n        });\n    }\n\n    /**\n     * Google Pay requires custom logic due to supporting two Tx variants that lead to the same payment method.\n     * If the merchant creates a standalone Google Pay component, we need to verify if the payment method is available using both tx variants\n     *\n     * @param type\n     * @returns\n     */\n    protected override getPaymentMethodFromPaymentMethodsResponse(type?: string): PaymentMethod {\n        return (\n            this.core.paymentMethodsResponse.find(type || this.constructor['type']) || this.core.paymentMethodsResponse.find(TxVariants.paywithgoogle)\n        );\n    }\n\n    protected override formatProps(props): GooglePayConfiguration {\n        const buttonSizeMode = props.buttonSizeMode ?? (props.isDropin ? 'fill' : 'static');\n        const buttonLocale = getGooglePayLocale(props.buttonLocale ?? props.i18n?.locale);\n\n        const callbackIntents: google.payments.api.CallbackIntent[] = [...props.callbackIntents, 'PAYMENT_AUTHORIZATION'];\n\n        return {\n            ...props,\n            configuration: props.configuration,\n            buttonSizeMode,\n            buttonLocale,\n            callbackIntents\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    protected override formatData() {\n        const { googlePayCardNetwork, googlePayToken, billingAddress, deliveryAddress } = this.state;\n        const { isExpress } = this.props;\n\n        return {\n            paymentMethod: {\n                type: this.type,\n                googlePayCardNetwork,\n                googlePayToken,\n                ...(isExpress && { subtype: 'express' })\n            },\n            browserInfo: this.browserInfo,\n            origin: !!window && window.location.origin,\n            ...(billingAddress && { billingAddress }),\n            ...(deliveryAddress && { deliveryAddress })\n        };\n    }\n\n    protected submitAnalytics(analyticsObj: AnalyticsEvent) {\n        // Analytics will need to know about this.props.isExpress & this.props.expressPage\n        if (analyticsObj instanceof AnalyticsInfoEvent && analyticsObj.type === ANALYTICS_RENDERED_STR) {\n            const { isExpress, expressPage } = this.props;\n            const hasExpressPage = expressPage && ANALYTICS_EXPRESS_PAGES_ARRAY.includes(expressPage);\n\n            if (typeof isExpress === 'boolean') {\n                analyticsObj.isExpress = isExpress;\n            }\n\n            if (isExpress === true && hasExpressPage) {\n                analyticsObj.expressPage = expressPage; // We only care about the expressPage value if isExpress is true\n            }\n        }\n\n        super.submitAnalytics(analyticsObj);\n    }\n\n    /**\n     * Displays the Google Pay payment sheet overlay\n     */\n    private showGooglePayPaymentSheet() {\n        this.googlePay.initiatePayment(this.props, this.core.options.countryCode).catch((error: google.payments.api.PaymentsError) => {\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\n            this.handleError(new AdyenCheckoutError(error.statusCode === 'CANCELED' ? 'CANCEL' : 'ERROR', error.toString(), { cause: error }));\n        });\n    }\n\n    public override submit = () => {\n        if (this.props.isInstantPayment) {\n            const event = new AnalyticsInfoEvent({\n                type: ANALYTICS_SELECTED_STR,\n                target: ANALYTICS_INSTANT_PAYMENT_BUTTON\n            });\n\n            this.submitAnalytics(event);\n        }\n\n        new Promise<void>((resolve, reject) => this.props.onClick(resolve, reject)).then(this.showGooglePayPaymentSheet).catch(() => {\n            // Swallow exception triggered by onClick reject\n        });\n    };\n\n    /**\n     * Method called when the payment is authorized in the payment sheet\n     *\n     * @see https://developers.google.com/pay/api/web/reference/client#onPaymentAuthorized\n     **/\n    private onPaymentAuthorized = async (paymentData: google.payments.api.PaymentData): Promise<google.payments.api.PaymentAuthorizationResult> => {\n        const billingAddress: AddressData = formatGooglePayContactToAdyenAddressFormat(paymentData.paymentMethodData.info.billingAddress);\n        const deliveryAddress: AddressData = formatGooglePayContactToAdyenAddressFormat(paymentData.shippingAddress, true);\n\n        this.setState({\n            authorizedEvent: paymentData,\n            googlePayToken: paymentData.paymentMethodData.tokenizationData.token,\n            googlePayCardNetwork: paymentData.paymentMethodData.info.cardNetwork,\n            ...(billingAddress && { billingAddress }),\n            ...(deliveryAddress && { deliveryAddress })\n        });\n\n        return new Promise<google.payments.api.PaymentAuthorizationResult>(resolve => {\n            this.handleAuthorization()\n                .then(this.makePaymentsCall)\n                .then(sanitizeResponse)\n                .then(verifyPaymentDidNotFail)\n                .then((paymentResponse: PaymentResponseData) => {\n                    resolve({ transactionState: 'SUCCESS' });\n                    return paymentResponse;\n                })\n                .then(paymentResponse => {\n                    this.handleResponse(paymentResponse);\n                })\n                .catch((paymentResponse?: RawPaymentResponse) => {\n                    this.setElementStatus('ready');\n\n                    const googlePayError = paymentResponse?.error?.googlePayError;\n                    const fallbackMessage = this.props.i18n.get('error.subtitle.payment');\n\n                    const error: google.payments.api.PaymentDataError =\n                        typeof googlePayError === 'string' || undefined\n                            ? {\n                                  intent: 'PAYMENT_AUTHORIZATION',\n                                  reason: 'OTHER_ERROR',\n                                  message: (googlePayError as string) || fallbackMessage\n                              }\n                            : {\n                                  intent: googlePayError?.intent || 'PAYMENT_AUTHORIZATION',\n                                  reason: googlePayError?.reason || 'OTHER_ERROR',\n                                  message: googlePayError?.message || fallbackMessage\n                              };\n\n                    resolve({\n                        transactionState: 'ERROR',\n                        error\n                    });\n\n                    const responseWithError = {\n                        ...paymentResponse,\n                        error: {\n                            googlePayError: error\n                        }\n                    };\n\n                    this.handleFailedResult(responseWithError);\n                });\n        });\n    };\n\n    /**\n     * Call the 'onAuthorized' callback if available.\n     * Must be resolved/reject for the payment flow to continue\n     */\n    private async handleAuthorization(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this.props.onAuthorized) {\n                resolve();\n            }\n\n            const { authorizedEvent, billingAddress, deliveryAddress } = this.state;\n\n            this.props.onAuthorized(\n                {\n                    authorizedEvent,\n                    ...(billingAddress && { billingAddress }),\n                    ...(deliveryAddress && { deliveryAddress })\n                },\n                { resolve, reject }\n            );\n        }).catch((error?: google.payments.api.PaymentDataError | string) => {\n            // Format error in a way that the 'catch' of the 'onPaymentAuthorize' block accepts it\n            const data = { error: { googlePayError: error } };\n            return Promise.reject(data);\n        });\n    }\n\n    public get isValid(): boolean {\n        return true;\n    }\n\n    /**\n     * Determine a shopper's ability to return a form of payment from the Google Pay API.\n     */\n    public override async isAvailable(): Promise<void> {\n        return this.isReadyToPay()\n            .then(response => {\n                if (!response.result) {\n                    throw new AdyenCheckoutError('ERROR', 'GooglePay is not available');\n                }\n\n                if (response.paymentMethodPresent === false) {\n                    throw new AdyenCheckoutError('ERROR', 'GooglePay - No paymentMethodPresent');\n                }\n\n                return Promise.resolve();\n            })\n            .catch(error => {\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Determine a shopper's ability to return a form of payment from the Google Pay API.\n     */\n    public isReadyToPay = (): Promise<google.payments.api.IsReadyToPayResponse> => {\n        return this.googlePay.isReadyToPay(this.props);\n    };\n\n    /**\n     * Use this method to prefetch a PaymentDataRequest configuration to improve loadPaymentData execution time on later user interaction. No value is returned.\n     */\n    public prefetch = (): void => {\n        return this.googlePay.prefetchPaymentData(this.props, this.core.options.countryCode);\n    };\n\n    get browserInfo(): BrowserInfo {\n        return collectBrowserInfo();\n    }\n\n    get icon(): string {\n        return this.props.icon ?? this.resources.getImage()('googlepay');\n    }\n\n    render() {\n        if (this.props.showPayButton) {\n            return (\n                <GooglePayButton\n                    buttonColor={this.props.buttonColor}\n                    buttonType={this.props.buttonType}\n                    buttonSizeMode={this.props.buttonSizeMode}\n                    buttonLocale={this.props.buttonLocale}\n                    buttonRootNode={this.props.buttonRootNode}\n                    buttonRadius={this.props.buttonRadius}\n                    paymentsClient={this.googlePay.paymentsClient}\n                    onClick={this.submit}\n                />\n            );\n        }\n\n        return null;\n    }\n}\n\nexport default GooglePay;\n"],"names":["GooglePay","UIElement","getPaymentMethodFromPaymentMethodsResponse","type","this","core","paymentMethodsResponse","find","constructor","TxVariants","paywithgoogle","formatProps","props","buttonSizeMode","isDropin","buttonLocale","getGooglePayLocale","i18n","locale","callbackIntents","_object_spread_props","configuration","formatData","googlePayCardNetwork","googlePayToken","billingAddress","deliveryAddress","state","isExpress","_object_spread","paymentMethod","subtype","browserInfo","origin","window","location","submitAnalytics","analyticsObj","AnalyticsInfoEvent","ANALYTICS_RENDERED_STR","expressPage","hasExpressPage","ANALYTICS_EXPRESS_PAGES_ARRAY","includes","super","showGooglePayPaymentSheet","googlePay","initiatePayment","options","countryCode","catch","error","handleError","AdyenCheckoutError","statusCode","toString","cause","handleAuthorization","Promise","resolve","reject","onAuthorized","authorizedEvent","data","googlePayError","isValid","isAvailable","isReadyToPay","then","response","result","paymentMethodPresent","collectBrowserInfo","icon","_this_props_icon","resources","getImage","render","showPayButton","h","GooglePayButton","buttonColor","buttonType","buttonRootNode","buttonRadius","paymentsClient","onClick","submit","checkout","_define_property","isInstantPayment","event","ANALYTICS_SELECTED_STR","target","ANALYTICS_INSTANT_PAYMENT_BUTTON","onPaymentAuthorized","async","paymentData","formatGooglePayContactToAdyenAddressFormat","paymentMethodData","info","shippingAddress","setState","tokenizationData","token","cardNetwork","makePaymentsCall","sanitizeResponse","verifyPaymentDidNotFail","paymentResponse","transactionState","handleResponse","setElementStatus","fallbackMessage","get","intent","reason","message","responseWithError","handleFailedResult","prefetch","prefetchPaymentData","bind","paymentDataCallbacks","onPaymentDataChanged","merchantId","GooglePayService","environment","googlepay","txVariants","defaultProps"],"mappings":"unDAuBA,MAAMA,UAAkBC,EAyCDC,0CAAAA,CAA2CC,GAC1D,OACIC,KAAKC,KAAKC,uBAAuBC,KAAKJ,GAAQC,KAAKI,YAAmB,OAAKJ,KAAKC,KAAKC,uBAAuBC,KAAKE,EAAWC,cAEpI,CAEmBC,WAAAA,CAAYC,GAEmCA,IAAAA,EADvCA,EAAvB,MAAMC,EAAiBD,QAAAA,EAAAA,EAAMC,sBAAND,IAAAA,EAAAA,EAAyBA,EAAME,SAAW,OAAS,SAClCF,IAAAA,EAAxC,MAAMG,EAAeC,EAAqC,QAAlBJ,EAAAA,EAAMG,oBAANH,IAAAA,EAAAA,EAAsBA,QAAAA,EAAAA,EAAMK,YAANL,IAAAA,OAAAA,EAAAA,EAAYM,QAEpEC,EAAwD,IAAIP,EAAMO,gBAAiB,yBAEzF,OAAOC,EACAR,EAAAA,CAAAA,EAAAA,GAAAA,CACHS,cAAeT,EAAMS,cACrBR,iBACAE,eACAI,mBAER,CAKA,UAAAG,GACI,MAAMC,qBAAEA,EAAoBC,eAAEA,EAAcC,eAAEA,EAAcC,gBAAEA,GAAoBtB,KAAKuB,OACjFC,UAAEA,GAAcxB,KAAKQ,MAE3B,OAAOiB,EAAA,CACHC,cAAeD,EAAA,CACX1B,KAAMC,KAAKD,KACXoB,uBACAC,kBACII,GAAa,CAAEG,QAAS,YAEhCC,YAAa5B,KAAK4B,YAClBC,SAAUC,QAAUA,OAAOC,SAASF,QAChCR,GAAkB,CAAEA,kBACpBC,GAAmB,CAAEA,mBAEjC,CAEUU,eAAAA,CAAgBC,GAEtB,GAAIA,aAAwBC,GAAsBD,EAAalC,OAASoC,EAAwB,CAC5F,MAAMX,UAAEA,EAASY,YAAEA,GAAgBpC,KAAKQ,MAClC6B,EAAiBD,GAAeE,EAA8BC,SAASH,GAEpD,kBAAdZ,IACPS,EAAaT,UAAYA,IAGX,IAAdA,GAAsBa,IACtBJ,EAAaG,YAAcA,EAEnC,CAEAI,MAAMR,gBAAgBC,EAC1B,CAKA,yBAAAQ,GACIzC,KAAK0C,UAAUC,gBAAgB3C,KAAKQ,MAAOR,KAAKC,KAAK2C,QAAQC,aAAaC,OAAOC,IAE7E/C,KAAKgD,YAAY,IAAIC,EAAwC,aAArBF,EAAMG,WAA4B,SAAW,QAASH,EAAMI,WAAY,CAAEC,MAAOL,IAAM,GAEvI,CAsFA,yBAAcM,GACV,OAAO,IAAIC,SAAc,CAACC,EAASC,KAC1BxD,KAAKQ,MAAMiD,cACZF,IAGJ,MAAMG,gBAAEA,EAAerC,eAAEA,EAAcC,gBAAEA,GAAoBtB,KAAKuB,MAElEvB,KAAKQ,MAAMiD,aACPhC,EAAA,CACIiC,mBACIrC,GAAkB,CAAEA,kBACpBC,GAAmB,CAAEA,oBAE7B,CAAEiC,UAASC,UAAO,IAEvBV,OAAOC,IAEN,MAAMY,EAAO,CAAEZ,MAAO,CAAEa,eAAgBb,IACxC,OAAOO,QAAQE,OAAOG,EAAAA,GAE9B,CAEA,WAAWE,GACP,OAAO,CACX,CAKA,iBAAsBC,GAClB,OAAO9D,KAAK+D,eACPC,MAAKC,IACF,IAAKA,EAASC,OACV,MAAM,IAAIjB,EAAmB,QAAS,8BAG1C,IAAsC,IAAlCgB,EAASE,qBACT,MAAM,IAAIlB,EAAmB,QAAS,uCAG1C,OAAOK,QAAQC,SAAO,IAEzBT,OAAMC,GACIO,QAAQE,OAAOT,IAElC,CAgBA,eAAInB,GACA,OAAOwC,GACX,CAEA,QAAIC,GACO,IAAAC,EAAP,OAAO,QAAAA,EAAAtE,KAAKQ,MAAM6D,YAAX,IAAAC,EAAAA,EAAmBtE,KAAKuE,UAAUC,UAAfxE,CAA0B,YACxD,CAEAyE,MAAAA,GACI,OAAIzE,KAAKQ,MAAMkE,cAEPC,EAACC,EAAAA,CACGC,YAAa7E,KAAKQ,MAAMqE,YACxBC,WAAY9E,KAAKQ,MAAMsE,WACvBrE,eAAgBT,KAAKQ,MAAMC,eAC3BE,aAAcX,KAAKQ,MAAMG,aACzBoE,eAAgB/E,KAAKQ,MAAMuE,eAC3BC,aAAchF,KAAKQ,MAAMwE,aACzBC,eAAgBjF,KAAK0C,UAAUuC,eAC/BC,QAASlF,KAAKmF,SAKnB,IACX,CAnRA/E,WAAAA,CAAYgF,EAAiB5E,GACzBgC,MAAM4C,EAAU5E,GAHpB6E,EAAArF,KAAmB0C,iBAAnB,GA0GA2C,OAAgBF,UAAS,KACrB,GAAInF,KAAKQ,MAAM8E,iBAAkB,CAC7B,MAAMC,EAAQ,IAAIrD,EAAmB,CACjCnC,KAAMyF,EACNC,OAAQC,IAGZ1F,KAAKgC,gBAAgBuD,EACzB,CAEA,IAAIjC,SAAc,CAACC,EAASC,IAAWxD,KAAKQ,MAAM0E,QAAQ3B,EAASC,KAASQ,KAAKhE,KAAKyC,2BAA2BK,OAAM,QAEvH,IAQJuC,EAAArF,KAAQ2F,uBAAsBC,MAAOC,IACjC,MAAMxE,EAA8ByE,EAA2CD,EAAYE,kBAAkBC,KAAK3E,gBAC5GC,EAA+BwE,EAA2CD,EAAYI,iBAAiB,GAU7G,OARAjG,KAAKkG,SAASzE,EAAA,CACViC,gBAAiBmC,EACjBzE,eAAgByE,EAAYE,kBAAkBI,iBAAiBC,MAC/DjF,qBAAsB0E,EAAYE,kBAAkBC,KAAKK,aACrDhF,GAAkB,CAAEA,kBACpBC,GAAmB,CAAEA,qBAGtB,IAAIgC,SAAwDC,IAC/DvD,KAAKqD,sBACAW,KAAKhE,KAAKsG,kBACVtC,KAAKuC,GACLvC,KAAKwC,GACLxC,MAAMyC,IACHlD,EAAQ,CAAEmD,iBAAkB,YACrBD,KAEVzC,MAAKyC,IACFzG,KAAK2G,eAAeF,EAAAA,IAEvB3D,OAAO2D,IAGmBA,IAAAA,EAFvBzG,KAAK4G,iBAAiB,SAEtB,MAAMhD,EAAiB6C,SAAsB,QAAtBA,EAAAA,EAAiB1D,aAAjB0D,IAAAA,OAAAA,EAAAA,EAAwB7C,eACzCiD,EAAkB7G,KAAKQ,MAAMK,KAAKiG,IAAI,0BAEtC/D,EACwB,iBAAnBa,EACD,CACImD,OAAQ,wBACRC,OAAQ,cACRC,QAASrD,GAA8BiD,GAE3C,CACIE,QAAQnD,aAAAA,EAAAA,EAAgBmD,SAAU,wBAClCC,QAAQpD,aAAAA,EAAAA,EAAgBoD,SAAU,cAClCC,SAASrD,aAAAA,EAAAA,EAAgBqD,UAAWJ,GAGlDtD,EAAQ,CACJmD,iBAAkB,QAClB3D,UAGJ,MAAMmE,EAAoBlG,EACnByF,EAAAA,CAAAA,EAAAA,GAAAA,CACH1D,MAAO,CACHa,eAAgBb,KAIxB/C,KAAKmH,mBAAmBD,EAAAA,GAC5B,GACR,IA0DJ7B,OAAOtB,gBAAe,IACX/D,KAAK0C,UAAUqB,aAAa/D,KAAKQ,SAM5C6E,OAAO+B,YAAW,IACPpH,KAAK0C,UAAU2E,oBAAoBrH,KAAKQ,MAAOR,KAAKC,KAAK2C,QAAQC,eArPxE7C,KAAKqD,oBAAsBrD,KAAKqD,oBAAoBiE,KAAKtH,MACzDA,KAAKyC,0BAA4BzC,KAAKyC,0BAA0B6E,KAAKtH,MAErE,MAAMwB,UAAEA,EAAS+F,qBAAEA,GAAyBvH,KAAKQ,MAEjD,IAAkB,IAAdgB,IAAuB+F,aAAAA,EAAAA,EAAsBC,sBAC7C,MAAM,IAAIvE,EACN,uBACA,uGAIR,IAAKjD,KAAKQ,MAAMS,cAAcwG,WAC1B,MAAM,IAAIxE,EACN,uBACA,wGAIRjD,KAAK0C,UAAY,IAAIgF,EAAiB1H,KAAKQ,MAAMmH,YAAa3G,EACtDQ,EAAAA,CAAAA,EAAAA,IAAa+F,aAAAA,EAAAA,EAAsBC,uBAAwB,CAAEA,qBAAsBD,EAAqBC,uBAAqB,CACjI7B,oBAAqB3F,KAAK2F,sBAElC,EA/BAN,EADEzF,EACYG,OAAOM,EAAWuH,WAChCvC,EAFEzF,EAEYiI,aAAa,CAACxH,EAAWuH,UAAWvH,EAAWC,gBAC7D+E,EAHEzF,EAGYkI,eAAeA"}