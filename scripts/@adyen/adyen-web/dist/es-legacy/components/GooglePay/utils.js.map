{"version":3,"file":"utils.js","sources":["../../../../src/components/GooglePay/utils.ts"],"sourcesContent":["import { AddressData } from '../../types/global-types';\n\n/**\n *\n */\nexport function resolveEnvironment(env = 'TEST'): google.payments.api.Environment {\n    const environment = env.toLowerCase();\n    switch (environment) {\n        case 'production':\n        case 'live':\n        case 'live-au':\n        case 'live-apse':\n        case 'live-us':\n        case 'live-in':\n            return 'PRODUCTION';\n        default:\n            return 'TEST';\n    }\n}\n\n/**\n * This function formats Google Pay contact format to Adyen address format\n *\n * Setting 'houseNumberOrName' to ZZ won't affect the AVS check, and it will make the algorithm take the\n * house number from the 'street' property.\n */\nexport function formatGooglePayContactToAdyenAddressFormat(\n    paymentContact?: Partial<google.payments.api.Address>,\n    isDeliveryAddress?: boolean\n): AddressData | undefined {\n    if (!paymentContact) {\n        return;\n    }\n\n    return {\n        postalCode: paymentContact.postalCode,\n        country: paymentContact.countryCode,\n        street: [paymentContact.address1, paymentContact.address2, paymentContact.address3].join(' ').trim(),\n        houseNumberOrName: 'ZZ',\n        city: paymentContact.locality || '',\n        ...(paymentContact.administrativeArea && { stateOrProvince: paymentContact.administrativeArea }),\n        ...(isDeliveryAddress && {\n            firstName: paymentContact.name\n        })\n    };\n}\n\nconst supportedLocales = [\n    'en',\n    'ar',\n    'bg',\n    'ca',\n    'cs',\n    'da',\n    'de',\n    'el',\n    'es',\n    'et',\n    'fi',\n    'fr',\n    'hr',\n    'id',\n    'it',\n    'ja',\n    'ko',\n    'ms',\n    'nl',\n    'no',\n    'pl',\n    'pt',\n    'ru',\n    'sk',\n    'sl',\n    'sr',\n    'sv',\n    'th',\n    'tr',\n    'uk',\n    'zh'\n];\n\nexport function getGooglePayLocale(locale = '') {\n    const twoLetterLocale = locale.toLowerCase().substring(0, 2);\n    return supportedLocales.includes(twoLetterLocale) ? twoLetterLocale : null;\n}\n"],"names":["resolveEnvironment","env","toLowerCase","formatGooglePayContactToAdyenAddressFormat","paymentContact","isDeliveryAddress","_object_spread","postalCode","country","countryCode","street","address1","address2","address3","join","trim","houseNumberOrName","city","locality","administrativeArea","stateOrProvince","firstName","name","supportedLocales","getGooglePayLocale","locale","twoLetterLocale","substring","includes"],"mappings":"wHAKO,SAASA,EAAmBC,EAAM,QAErC,OADoBA,EAAIC,eAEpB,IAAK,aACL,IAAK,OACL,IAAK,UACL,IAAK,YACL,IAAK,UACL,IAAK,UACD,MAAO,aACX,QACI,MAAO,OAEnB,CAQO,SAASC,EACZC,EACAC,GAEA,GAAKD,EAIL,6UAAOE,CAAA,CACHC,WAAYH,EAAeG,WAC3BC,QAASJ,EAAeK,YACxBC,OAAQ,CAACN,EAAeO,SAAUP,EAAeQ,SAAUR,EAAeS,UAAUC,KAAK,KAAKC,OAC9FC,kBAAmB,KACnBC,KAAMb,EAAec,UAAY,IAC7Bd,EAAee,oBAAsB,CAAEC,gBAAiBhB,EAAee,oBACvEd,GAAqB,CACrBgB,UAAWjB,EAAekB,MAGtC,CAEA,MAAMC,EAAmB,CACrB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGG,SAASC,EAAmBC,EAAS,IACxC,MAAMC,EAAkBD,EAAOvB,cAAcyB,UAAU,EAAG,GAC1D,OAAOJ,EAAiBK,SAASF,GAAmBA,EAAkB,IAC1E"}