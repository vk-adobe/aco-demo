{"version":3,"file":"Blik.js","sources":["../../../../src/components/Blik/Blik.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport BlikInput from '../../components/Blik/components/BlikInput';\nimport Await from '../internal/Await';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport config from './config';\nimport RedirectButton from '../../components/internal/RedirectButton';\nimport SRPanelProvider from '../../core/Errors/SRPanelProvider';\nimport { TxVariants } from '../tx-variants';\nimport { AwaitConfiguration } from '../internal/Await/types';\n\ninterface BlikElementData {\n    paymentMethod: {\n        type: string;\n        blikCode: string;\n    };\n}\n\nclass BlikElement extends UIElement<AwaitConfiguration> {\n    public static type = TxVariants.blik;\n\n    formatData(): BlikElementData {\n        const recurringPayment = !!this.props.storedPaymentMethodId;\n\n        return {\n            paymentMethod: {\n                type: BlikElement.type,\n                ...(!recurringPayment && { blikCode: this.state?.data?.blikCode }),\n                ...(recurringPayment && { storedPaymentMethodId: this.props.storedPaymentMethodId })\n            }\n        };\n    }\n\n    get isValid(): boolean {\n        if (this.props.storedPaymentMethodId) {\n            return true;\n        }\n\n        return !!this.state.isValid;\n    }\n\n    get displayName() {\n        if (this.props.storedPaymentMethodId && this.props.label) {\n            return this.props.label;\n        }\n        return this.props.name;\n    }\n\n    get additionalInfo() {\n        if (this.props.storedPaymentMethodId && this.props.label) {\n            return this.props.name;\n        }\n        return null;\n    }\n\n    /**\n     * NOTE: for future reference:\n     *  this.props.onComplete (which is called from this.onComplete) equates to the merchant defined onAdditionalDetails callback\n     *  (the initial /payments response defines an \"await\" action, actionTypes.ts translates this to \"onComplete: props.onAdditionalDetails\")\n     */\n    render() {\n        if (this.props.paymentData) {\n            return (\n                <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                    <SRPanelProvider srPanel={this.props.modules.srPanel}>\n                        <Await\n                            ref={ref => {\n                                this.componentRef = ref;\n                            }}\n                            clientKey={this.props.clientKey}\n                            paymentData={this.props.paymentData}\n                            onError={this.handleError}\n                            onComplete={this.onComplete}\n                            brandLogo={this.icon}\n                            type={config.type}\n                            messageText={this.props.i18n.get(config.messageTextId)}\n                            awaitText={this.props.i18n.get(config.awaitTextId)}\n                            showCountdownTimer={config.showCountdownTimer}\n                            delay={config.STATUS_INTERVAL}\n                            countdownTime={config.COUNTDOWN_MINUTES}\n                            throttleTime={config.THROTTLE_TIME}\n                            throttleInterval={config.THROTTLE_INTERVAL}\n                            onActionHandled={this.onActionHandled}\n                        />\n                    </SRPanelProvider>\n                </CoreProvider>\n            );\n        }\n\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                {this.props.storedPaymentMethodId ? (\n                    <RedirectButton\n                        showPayButton={this.props.showPayButton}\n                        name={this.displayName}\n                        amount={this.props.amount}\n                        payButton={this.payButton}\n                        onSubmit={this.submit}\n                        ref={ref => {\n                            this.componentRef = ref;\n                        }}\n                    />\n                ) : (\n                    <BlikInput\n                        // @ts-ignore Ref is used by preact component\n                        ref={ref => {\n                            this.componentRef = ref;\n                        }}\n                        {...this.props}\n                        onChange={this.setState}\n                        onSubmit={this.submit}\n                        payButton={this.payButton}\n                    />\n                )}\n            </CoreProvider>\n        );\n    }\n}\n\nexport default BlikElement;\n"],"names":["BlikElement","UIElement","formatData","_this_state_data","_this_state","recurringPayment","this","props","storedPaymentMethodId","paymentMethod","_object_spread","type","blikCode","state","data","isValid","displayName","label","name","additionalInfo","render","paymentData","h","CoreProvider","i18n","loadingContext","resources","SRPanelProvider","srPanel","modules","Await","ref","componentRef","clientKey","onError","handleError","onComplete","brandLogo","icon","config","messageText","get","messageTextId","awaitText","awaitTextId","showCountdownTimer","delay","STATUS_INTERVAL","countdownTime","COUNTDOWN_MINUTES","throttleTime","THROTTLE_TIME","throttleInterval","THROTTLE_INTERVAL","onActionHandled","RedirectButton","showPayButton","amount","payButton","onSubmit","submit","BlikInput","onChange","setState","_define_property","TxVariants","blik"],"mappings":"kwCAkBA,MAAMA,UAAoBC,EAGtBC,UAAAA,OAMiDC,EAAAC,EAL7C,MAAMC,IAAqBC,KAAKC,MAAMC,sBAEtC,MAAO,CACHC,cAAeC,EAAA,CACXC,KAAMX,EAAYW,OACbN,GAAoB,CAAEO,SAAoB,QAAVR,EAAAE,KAAKO,aAAL,IAAAT,GAAA,QAAAD,EAAAC,EAAYU,YAAZ,IAAAX,OAAA,EAAAA,EAAkBS,UACnDP,GAAoB,CAAEG,sBAAuBF,KAAKC,MAAMC,wBAGxE,CAEA,WAAIO,GACA,QAAIT,KAAKC,MAAMC,yBAINF,KAAKO,MAAME,OACxB,CAEA,eAAIC,GACA,OAAIV,KAAKC,MAAMC,uBAAyBF,KAAKC,MAAMU,MACxCX,KAAKC,MAAMU,MAEfX,KAAKC,MAAMW,IACtB,CAEA,kBAAIC,GACA,OAAIb,KAAKC,MAAMC,uBAAyBF,KAAKC,MAAMU,MACxCX,KAAKC,MAAMW,KAEf,IACX,CAOAE,MAAAA,GACI,OAAId,KAAKC,MAAMc,YAEPC,EAACC,EAAAA,CAAaC,KAAMlB,KAAKC,MAAMiB,KAAMC,eAAgBnB,KAAKC,MAAMkB,eAAgBC,UAAWpB,KAAKoB,WAC5FJ,EAACK,EAAAA,CAAgBC,QAAStB,KAAKC,MAAMsB,QAAQD,SACzCN,EAACQ,EAAAA,CACGC,IAAKA,IACDzB,KAAK0B,aAAeD,CAAAA,EAExBE,UAAW3B,KAAKC,MAAM0B,UACtBZ,YAAaf,KAAKC,MAAMc,YACxBa,QAAS5B,KAAK6B,YACdC,WAAY9B,KAAK8B,WACjBC,UAAW/B,KAAKgC,KAChB3B,KAAM4B,EAAO5B,KACb6B,YAAalC,KAAKC,MAAMiB,KAAKiB,IAAIF,EAAOG,eACxCC,UAAWrC,KAAKC,MAAMiB,KAAKiB,IAAIF,EAAOK,aACtCC,mBAAoBN,EAAOM,mBAC3BC,MAAOP,EAAOQ,gBACdC,cAAeT,EAAOU,kBACtBC,aAAcX,EAAOY,cACrBC,iBAAkBb,EAAOc,kBACzBC,gBAAiBhD,KAAKgD,oBAQtChC,EAACC,EAAAA,CAAaC,KAAMlB,KAAKC,MAAMiB,KAAMC,eAAgBnB,KAAKC,MAAMkB,eAAgBC,UAAWpB,KAAKoB,WAC3FpB,KAAKC,MAAMC,sBACRc,EAACiC,EAAAA,CACGC,cAAelD,KAAKC,MAAMiD,cAC1BtC,KAAMZ,KAAKU,YACXyC,OAAQnD,KAAKC,MAAMkD,OACnBC,UAAWpD,KAAKoD,UAChBC,SAAUrD,KAAKsD,OACf7B,IAAKA,IACDzB,KAAK0B,aAAeD,CAAAA,IAI5BT,EAACuC,EAAAA,EAAAA,EAAAA,CAEG9B,IAAKA,IACDzB,KAAK0B,aAAeD,CAAAA,GAEpBzB,KAAKC,OAAK,CACduD,SAAUxD,KAAKyD,SACfJ,SAAUrD,KAAKsD,OACfF,UAAWpD,KAAKoD,aAKpC,EAjGAM,EADEhE,EACYW,OAAOsD,EAAWC"}