{"version":3,"file":"FastlaneSDK.js","sources":["../../../../src/components/PayPalFastlane/FastlaneSDK.ts"],"sourcesContent":["import { resolveEnvironments } from '../../core/Environment';\nimport requestFastlaneToken from './services/request-fastlane-token';\nimport { convertAdyenLocaleToFastlaneLocale } from './utils/convert-locale';\nimport Script from '../../utils/Script';\nimport AdyenCheckoutError from '../../core/Errors/AdyenCheckoutError';\nimport type {\n    FastlanePaymentMethodConfiguration,\n    FastlaneWindowInstance,\n    FastlaneAuthenticatedCustomerResult,\n    FastlaneShippingAddressSelectorResult,\n    FastlaneSDKConfiguration,\n    FastlaneConsentRenderState\n} from './types';\nimport type { FastlaneTokenData } from './services/request-fastlane-token';\n\nclass FastlaneSDK {\n    private readonly clientKey: string;\n    private readonly checkoutShopperURL: string;\n    private readonly locale: string;\n    private readonly forceConsentDetails: boolean;\n\n    private fastlaneSdk?: FastlaneWindowInstance;\n    private latestShopperDetails?: { email: string; customerId: string };\n    private fastlaneSessionId?: string;\n\n    constructor(configuration: FastlaneSDKConfiguration) {\n        if (!configuration?.environment) throw new AdyenCheckoutError('IMPLEMENTATION_ERROR', \"FastlaneSDK: 'environment' property is required\");\n        if (!configuration?.clientKey) throw new AdyenCheckoutError('IMPLEMENTATION_ERROR', \"FastlaneSDK: 'clientKey' property is required\");\n\n        if (configuration.forceConsentDetails && configuration.environment.includes('live'))\n            console.warn(\"Fastlane SDK: 'forceConsentDetails' should not be used on 'live' environment\");\n\n        const { apiUrl } = resolveEnvironments(configuration.environment);\n\n        this.checkoutShopperURL = apiUrl;\n        this.clientKey = configuration.clientKey;\n        this.forceConsentDetails = configuration.forceConsentDetails || false;\n        this.locale = convertAdyenLocaleToFastlaneLocale(configuration.locale || 'en-US');\n    }\n\n    /**\n     * Initializes the Fastlane SDK\n     */\n    public async initialize(): Promise<FastlaneSDK> {\n        const tokenData = await this.requestClientToken();\n        await this.fetchSdk(tokenData.value, tokenData.clientId);\n        await this.initializeFastlaneInstance();\n        return this;\n    }\n\n    /**\n     * Triggers the authentication for Fastlane using shopper's email.\n     * If shopper is recognized, the OTP flow is initialized.\n     *\n     * @param email\n     */\n    public async authenticate(email: string): Promise<FastlaneAuthenticatedCustomerResult> {\n        if (!this.fastlaneSdk) {\n            throw new AdyenCheckoutError('IMPLEMENTATION_ERROR', 'authenticate(): Fastlane SDK is not initialized');\n        }\n\n        const { customerContextId } = await this.fastlaneSdk.identity.lookupCustomerByEmail(email);\n\n        if (customerContextId) {\n            this.latestShopperDetails = { email, customerId: customerContextId };\n            return this.fastlaneSdk.identity.triggerAuthenticationFlow(customerContextId);\n        } else {\n            return {\n                authenticationState: 'not_found',\n                profileData: undefined\n            };\n        }\n    }\n\n    /**\n     * Creates the Adyen Component configuration based on the Fastlane authentication result.\n     *\n     * In case the shopper authenticated successfully, it returns config to be used in the Fastlane component\n     * Otherwise, it returns the configuration to be used in the Card component\n     *\n     * @param authResult\n     */\n    public async getComponentConfiguration(authResult: FastlaneAuthenticatedCustomerResult): Promise<FastlanePaymentMethodConfiguration> {\n        if (!authResult) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'FastlaneSDK: you must pass the authentication result to get the component configuration'\n            );\n        }\n\n        if (authResult.authenticationState === 'succeeded') {\n            const hasCard = !!authResult.profileData?.card;\n\n            if (!hasCard) {\n                throw new AdyenCheckoutError('ERROR', 'getComponentConfiguration(): There is no card associated with the authenticated profile');\n            }\n\n            return {\n                paymentType: 'fastlane',\n                configuration: {\n                    fastlaneSessionId: this.fastlaneSessionId,\n                    email: this.latestShopperDetails.email,\n                    tokenId: authResult.profileData.card.id,\n                    lastFour: authResult.profileData.card.paymentSource.card.lastDigits,\n                    brand: authResult.profileData.card.paymentSource.card.brand.toLowerCase()\n                }\n            };\n        } else {\n            const consentDetails = await this.fetchConsentDetails();\n            return {\n                paymentType: 'card',\n                configuration: {\n                    ...(consentDetails && {\n                        fastlaneConfiguration: {\n                            fastlaneSessionId: this.fastlaneSessionId,\n                            ...consentDetails\n                        }\n                    })\n                }\n            };\n        }\n    }\n\n    /**\n     * Displays the Fastlane Shipping Address selector UI\n     */\n    public showShippingAddressSelector(): Promise<FastlaneShippingAddressSelectorResult> {\n        return this.fastlaneSdk.profile.showShippingAddressSelector();\n    }\n\n    /**\n     * Render the \"Fastlane by PayPal\" logo in the specified HTML container\n     */\n    public async mountWatermark(container: HTMLElement | string, options = { includeAdditionalInfo: true }): Promise<void> {\n        const component = await this.fastlaneSdk.FastlaneWatermarkComponent(options);\n        component.render(container);\n    }\n\n    private requestClientToken(): Promise<FastlaneTokenData> {\n        return requestFastlaneToken(this.checkoutShopperURL, this.clientKey);\n    }\n\n    private async fetchSdk(clientToken: string, clientId: string): Promise<void> {\n        const url = `https://www.paypal.com/sdk/js?client-id=${clientId}&components=buttons,fastlane`;\n        const script = new Script(url, 'body', {}, { sdkClientToken: clientToken });\n\n        await script.load();\n    }\n\n    /**\n     * Fetch the fastlane session ID used internally by PayPal for Network Token Usage event\n     * This ID is not critical for the payment processing part\n     *\n     * @private\n     */\n    private async fetchSessionIdAsync(): Promise<void> {\n        try {\n            const { sessionId } = await this.fastlaneSdk.identity.getSession();\n            this.fastlaneSessionId = sessionId;\n        } catch (error) {\n            console.warn('Fastlane SDK: Failed to fetch session ID', error);\n        }\n    }\n\n    /**\n     * Fetch object containing that details that will be used to display the sign-up UI\n     * inside the card component\n     * @private\n     */\n    private async fetchConsentDetails(): Promise<FastlaneConsentRenderState> {\n        try {\n            const consentComponent = await this.fastlaneSdk.ConsentComponent();\n            return await consentComponent.getRenderState();\n        } catch (error) {\n            throw new AdyenCheckoutError('ERROR', 'fetchConsentDetails(): failed to fetch consent details', { cause: error });\n        }\n    }\n\n    private async initializeFastlaneInstance(): Promise<void> {\n        try {\n            this.fastlaneSdk = await window.paypal.Fastlane({\n                intendedExperience: 'externalProcessorCustomConsent',\n                ...(this.forceConsentDetails && {\n                    metadata: {\n                        geoLocOverride: 'US'\n                    }\n                })\n            });\n            this.fastlaneSdk.setLocale(this.locale);\n\n            void this.fetchSessionIdAsync();\n        } catch (error) {\n            throw new AdyenCheckoutError('ERROR', 'Fastlane SDK: Failed to initialize fastlane using the window.paypal.Fastlane constructor', {\n                cause: error\n            });\n        }\n    }\n}\n\nexport default FastlaneSDK;\n"],"names":["FastlaneSDK","initialize","tokenData","this","requestClientToken","fetchSdk","value","clientId","initializeFastlaneInstance","authenticate","email","fastlaneSdk","AdyenCheckoutError","customerContextId","identity","lookupCustomerByEmail","latestShopperDetails","customerId","triggerAuthenticationFlow","authenticationState","profileData","undefined","getComponentConfiguration","authResult","card","paymentType","configuration","fastlaneSessionId","tokenId","id","lastFour","paymentSource","lastDigits","brand","toLowerCase","consentDetails","fetchConsentDetails","_object_spread","fastlaneConfiguration","showShippingAddressSelector","profile","mountWatermark","container","options","includeAdditionalInfo","FastlaneWatermarkComponent","render","requestFastlaneToken","checkoutShopperURL","clientKey","clientToken","script","Script","sdkClientToken","load","fetchSessionIdAsync","sessionId","getSession","error","console","warn","consentComponent","ConsentComponent","getRenderState","cause","window","paypal","Fastlane","intendedExperience","forceConsentDetails","metadata","geoLocOverride","setLocale","locale","constructor","_define_property","environment","includes","apiUrl","resolveEnvironments","convertAdyenLocaleToFastlaneLocale"],"mappings":"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"}