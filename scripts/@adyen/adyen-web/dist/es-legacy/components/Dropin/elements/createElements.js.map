{"version":3,"file":"createElements.js","sources":["../../../../../src/components/Dropin/elements/createElements.ts"],"sourcesContent":["import { filterUnsupportedPaymentMethod, filterPresent, filterAvailable, optionallyFilterUpiSubTxVariants } from './filters';\nimport { getComponentConfiguration } from './getComponentConfiguration';\nimport getComponentNameOfPaymentType from '../../components-name-map';\nimport UIElement from '../../internal/UIElement';\nimport type { PaymentMethod, StoredPaymentMethod } from '../../../types/global-types';\nimport type { PaymentMethodsConfiguration } from '../types';\nimport type { ICore } from '../../../core/types';\n\n/**\n * Returns a filtered (available) list of component Elements\n *\n * @param paymentMethods - Array of PaymentMethod objects from the /paymentMethods response\n * @param paymentMethodsConfiguration - Dropin paymentMethodsConfiguration object\n * @param commonProps - High level props to be passed through to every component\n * @param core - Reference to the checkout core object\n */\nconst createElements = (\n    paymentMethods: PaymentMethod[] | StoredPaymentMethod[],\n    paymentMethodsConfiguration: PaymentMethodsConfiguration,\n    commonProps,\n    core: ICore\n): Promise<UIElement[]> => {\n    const elements = optionallyFilterUpiSubTxVariants(paymentMethods)\n        .filter(filterUnsupportedPaymentMethod)\n        .map(paymentMethod => {\n            const isStoredPaymentMethod = 'isStoredPaymentMethod' in paymentMethod && paymentMethod.isStoredPaymentMethod;\n            const paymentMethodConfigurationProps = getComponentConfiguration(paymentMethod.type, paymentMethodsConfiguration, isStoredPaymentMethod);\n            const PaymentMethodElement = core.getComponent(paymentMethod.type);\n\n            if (!PaymentMethodElement) {\n                console.warn(\n                    `\\nDropin: You support the payment method '${\n                        paymentMethod.type\n                    }' but this component has not been configured. Make sure to import the Class  '${getComponentNameOfPaymentType(\n                        paymentMethod.type\n                    )}' and then pass it in the Dropin's 'paymentMethodComponents' config property if you wish to offer this payment method.`\n                );\n                return null;\n            }\n\n            const elementProps = { ...paymentMethod, ...commonProps, ...paymentMethodConfigurationProps };\n\n            return new PaymentMethodElement(core, elementProps);\n        })\n        .filter(filterPresent);\n\n    return filterAvailable(elements);\n};\n\nexport default createElements;\n"],"names":["createElements","paymentMethods","paymentMethodsConfiguration","commonProps","core","elements","optionallyFilterUpiSubTxVariants","filter","filterUnsupportedPaymentMethod","map","paymentMethod","isStoredPaymentMethod","paymentMethodConfigurationProps","getComponentConfiguration","type","PaymentMethodElement","getComponent","console","warn","getComponentNameOfPaymentType","elementProps","_object_spread","filterPresent","filterAvailable"],"mappings":"2XAgBMA,MAAAA,EAAiB,CACnBC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAWC,EAAiCL,GAC7CM,OAAOC,GACPC,KAAIC,IACD,MAAMC,EAAwB,0BAA2BD,GAAiBA,EAAcC,sBAClFC,EAAkCC,EAA0BH,EAAcI,KAAMZ,EAA6BS,GAC7GI,EAAuBX,EAAKY,aAAaN,EAAcI,MAE7D,IAAKC,EAQD,OAPAE,QAAQC,KACJ,6CACIR,EAAcI,qFAC+DK,EAC7ET,EAAcI,+HAGf,KAGX,MAAMM,wUAAeC,CAAKX,CAAAA,EAAAA,EAAkBP,EAAgBS,GAE5D,OAAO,IAAIG,EAAqBX,EAAMgB,EAAAA,IAEzCb,OAAOe,GAEZ,OAAOC,EAAgBlB,EAAAA"}