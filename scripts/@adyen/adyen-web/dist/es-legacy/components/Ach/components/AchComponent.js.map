{"version":3,"file":"AchComponent.js","sources":["../../../../../src/components/Ach/components/AchComponent.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport FormInstruction from '../../internal/FormInstruction';\nimport { AccountTypeSelector } from './AccountTypeSelector';\nimport Fieldset from '../../internal/FormFields/Fieldset';\nimport useForm from '../../../utils/useForm';\nimport Field from '../../internal/FormFields/Field';\nimport InputText from '../../internal/FormFields/InputText';\nimport { achValidationRules, achFormatters } from './validate';\nimport StoreDetails from '../../internal/StoreDetails';\n\nimport type { PayButtonProps } from '../../internal/PayButton/PayButton';\nimport type { ComponentMethodsRef } from '../../internal/UIElement/types';\nimport type { AchPlaceholders } from '../types';\nimport type { AchStateErrors } from './useSRPanelForACHErrors';\nimport useSRPanelForAchErrors from './useSRPanelForACHErrors';\n\ntype AchForm = {\n    selectedAccountType: string;\n    ownerName: string;\n    routingNumber: string;\n    accountNumber: string;\n    accountNumberVerification: string;\n};\n\ninterface AchComponentProps {\n    onChange({\n        data,\n        valid,\n        errors,\n        isValid,\n        storePaymentMethod\n    }: {\n        data: AchForm;\n        valid: { [key: string]: boolean };\n        errors: { [key: string]: any };\n        isValid: boolean;\n        storePaymentMethod: boolean;\n    }): void;\n    payButton: (props: Partial<PayButtonProps>) => h.JSX.Element;\n    setComponentRef: (ref: ComponentMethodsRef) => void;\n    hasHolderName: boolean;\n    showPayButton: boolean;\n    enableStoreDetails: boolean;\n    placeholders?: AchPlaceholders;\n}\n\nfunction AchComponent({ onChange, payButton, showPayButton, placeholders, hasHolderName, setComponentRef, enableStoreDetails }: AchComponentProps) {\n    const schema = useMemo(\n        () => ['selectedAccountType', 'routingNumber', 'accountNumber', 'accountNumberVerification', ...(hasHolderName ? ['ownerName'] : [])],\n        [hasHolderName]\n    );\n    const { i18n } = useCoreContext();\n    const [status, setStatus] = useState('ready');\n    const { handleChangeFor, triggerValidation, data, errors, valid, isValid } = useForm<AchForm>({\n        schema,\n        rules: achValidationRules,\n        formatters: achFormatters\n    });\n    const [storePaymentMethod, setStorePaymentMethod] = useState(false);\n    const isFormDisabled = status === 'loading';\n\n    const isValidating = useRef(false);\n\n    const achRef = useRef<ComponentMethodsRef>({\n        setStatus: setStatus,\n        showValidation: () => {\n            isValidating.current = true;\n            triggerValidation();\n        }\n    });\n\n    useEffect(() => {\n        setComponentRef(achRef.current);\n    }, [setComponentRef, achRef.current]);\n\n    useSRPanelForAchErrors({ errors: errors as AchStateErrors, data, isValidating });\n\n    useEffect(() => {\n        onChange({ data, valid, errors, isValid, storePaymentMethod });\n    }, [onChange, data, valid, errors, isValid, storePaymentMethod]);\n\n    /**\n     * If the \"Verify account number\" field has errors, we want to trigger\n     * its validation when there is any change done to the \"Account number\" field\n     */\n    const onAccountNumberInput = useCallback(\n        (event: h.JSX.TargetedInputEvent<HTMLInputElement>) => {\n            handleChangeFor('accountNumber', 'input')(event);\n\n            const hasAccountVerificationError = !!errors.accountNumberVerification;\n            if (hasAccountVerificationError) {\n                triggerValidation(['accountNumberVerification']);\n            }\n        },\n        [handleChangeFor, triggerValidation, data.accountNumberVerification, errors.accountNumberVerification]\n    );\n\n    return (\n        <div className=\"adyen-checkout__ach\">\n            <FormInstruction />\n\n            <Fieldset classNameModifiers={[]} label={i18n.get('ach.bankAccount.title')}>\n                <AccountTypeSelector\n                    placeholder={placeholders?.accountTypeSelector}\n                    onSelect={handleChangeFor('selectedAccountType')}\n                    selectedAccountType={data.selectedAccountType}\n                    disabled={isFormDisabled}\n                    errorMessage={!!errors.selectedAccountType && i18n.get(errors.selectedAccountType.errorMessage)}\n                />\n\n                {hasHolderName && (\n                    <Field\n                        label={i18n.get('ach.accountHolderNameField.title')}\n                        errorMessage={!!errors.ownerName && i18n.get(errors.ownerName.errorMessage)}\n                        isValid={!!valid.ownerName}\n                        name={'ownerName'}\n                    >\n                        <InputText\n                            disabled={isFormDisabled}\n                            name={'ownerName'}\n                            placeholder={placeholders?.ownerName}\n                            value={data.ownerName}\n                            onInput={handleChangeFor('ownerName', 'input')}\n                            onBlur={handleChangeFor('ownerName', 'blur')}\n                            required={true}\n                        />\n                    </Field>\n                )}\n\n                <Field\n                    label={i18n.get('ach.routingNumber.label')}\n                    classNameModifiers={['col-60']}\n                    errorMessage={!!errors.routingNumber && i18n.get(errors.routingNumber.errorMessage)}\n                    name={'routingNumber'}\n                    isValid={!!valid.routingNumber}\n                >\n                    <InputText\n                        disabled={isFormDisabled}\n                        name={'routingNumber'}\n                        placeholder={placeholders?.routingNumber}\n                        value={data.routingNumber}\n                        onInput={handleChangeFor('routingNumber', 'input')}\n                        onBlur={handleChangeFor('routingNumber', 'blur')}\n                        required={true}\n                        maxlength={9}\n                    />\n                </Field>\n\n                <Field\n                    label={i18n.get('ach.bankAccountNumber.label')}\n                    classNameModifiers={['col-40']}\n                    errorMessage={!!errors.accountNumber && i18n.get(errors.accountNumber.errorMessage)}\n                    isValid={!!valid.accountNumber}\n                    name={'accountNumber'}\n                >\n                    <InputText\n                        disabled={isFormDisabled}\n                        name={'accountNumber'}\n                        placeholder={placeholders?.accountNumber}\n                        value={data.accountNumber}\n                        onInput={onAccountNumberInput}\n                        onBlur={handleChangeFor('accountNumber', 'blur')}\n                        required={true}\n                        maxlength={17}\n                    />\n                </Field>\n\n                <Field\n                    label={i18n.get('ach.bankAccountNumberVerification.label')}\n                    errorMessage={!!errors.accountNumberVerification && i18n.get(errors.accountNumberVerification.errorMessage)}\n                    name={'accountNumberVerification'}\n                    isValid={!!valid.accountNumberVerification}\n                >\n                    <InputText\n                        disabled={isFormDisabled}\n                        name={'accountNumberVerification'}\n                        placeholder={placeholders?.accountNumberVerification}\n                        value={data.accountNumberVerification}\n                        onInput={handleChangeFor('accountNumberVerification', 'input')}\n                        onBlur={handleChangeFor('accountNumberVerification', 'blur')}\n                        required={true}\n                        maxlength={17}\n                    />\n                </Field>\n            </Fieldset>\n\n            {enableStoreDetails && <StoreDetails disabled={isFormDisabled} onChange={setStorePaymentMethod} />}\n\n            {showPayButton && payButton({ status, label: i18n.get('confirmPurchase') })}\n        </div>\n    );\n}\n\nexport default AchComponent;\n"],"names":["AchComponent","onChange","payButton","showPayButton","placeholders","hasHolderName","setComponentRef","enableStoreDetails","schema","useMemo","i18n","useCoreContext","status","setStatus","useState","handleChangeFor","triggerValidation","data","errors","valid","isValid","useForm","rules","achValidationRules","formatters","achFormatters","storePaymentMethod","setStorePaymentMethod","isFormDisabled","isValidating","useRef","achRef","showValidation","current","useEffect","useSRPanelForAchErrors","onAccountNumberInput","useCallback","event","accountNumberVerification","h","div","className","FormInstruction","Fieldset","classNameModifiers","label","get","AccountTypeSelector","placeholder","accountTypeSelector","onSelect","selectedAccountType","disabled","errorMessage","Field","ownerName","name","InputText","value","onInput","onBlur","required","routingNumber","maxlength","accountNumber","StoreDetails"],"mappings":"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"}