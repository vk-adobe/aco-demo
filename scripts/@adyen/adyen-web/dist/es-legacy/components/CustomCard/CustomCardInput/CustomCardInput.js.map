{"version":3,"file":"CustomCardInput.js","sources":["../../../../../src/components/CustomCard/CustomCardInput/CustomCardInput.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect, useRef, useMemo } from 'preact/hooks';\nimport Language from '../../../language/Language';\nimport SecuredFieldsProvider from '../../internal/SecuredFields/SFP/SecuredFieldsProvider';\nimport { SFPState } from '../../internal/SecuredFields/SFP/types';\nimport { BinLookupResponse, CardBrandsConfiguration, CardPlaceholders } from '../../Card/types';\nimport SFExtensions from '../../internal/SecuredFields/binLookup/extensions';\nimport { StylesObject } from '../../internal/SecuredFields/lib/types';\nimport { Resources } from '../../../core/Context/Resources';\nimport { SFError } from '../../Card/components/CardInput/types';\nimport { ValidationError } from '../types';\n\ninterface SecuredFieldsProps {\n    autoFocus?: boolean;\n    brand?: string;\n    brands?: string[];\n    brandsConfiguration?: CardBrandsConfiguration;\n    clientKey?: string;\n    countryCode?: string;\n    forceCompat?: boolean;\n    i18n: Language;\n    implementationType?: string;\n    keypadFix?: boolean;\n    loadingContext?: string;\n    legacyInputMode?: boolean;\n    minimumExpiryDate?: string;\n    onAdditionalSFConfig?: () => {};\n    onAdditionalSFRemoved?: () => {};\n    onAllValid?: () => {};\n    onAutoComplete?: () => {};\n    onBinValue?: () => {};\n    onBrand?: () => {};\n    onConfigSuccess?: () => {};\n    onChange: (data) => void;\n    handleKeyPress?: (obj: KeyboardEvent) => void;\n    onError?: () => {};\n    onFieldValid?: () => {};\n    onFocus?: (e) => {};\n    onLoad?: () => {};\n    placeholders?: CardPlaceholders;\n    rootNode: HTMLElement;\n    resources: Resources;\n    showWarnings?: boolean;\n    styles?: StylesObject;\n    trimTrailingSeparator?: boolean;\n    type: string;\n    maskSecurityCode?: boolean;\n}\n\nconst defaultProps = {\n    onChange: () => {},\n    onError: () => {},\n    onValidationError: () => {}\n};\n\nfunction CustomCardInput(props: SecuredFieldsProps) {\n    const sfp = useRef(null);\n\n    const [errors, setErrors] = useState({});\n    const [valid, setValid] = useState({});\n    const [data, setData] = useState({});\n\n    const [isSfpValid, setIsSfpValid] = useState(false);\n\n    const [issuingCountryCode, setIssuingCountryCode] = useState(null);\n\n    const [dualBrandSelectElements, setDualBrandSelectElements] = useState([]);\n    const [selectedBrandValue, setSelectedBrandValue] = useState('');\n\n    const handleSecuredFieldsChange = (sfState: SFPState): void => {\n        setData({ ...data, ...sfState.data });\n        setErrors({ ...errors, ...sfState.errors });\n        setValid({ ...valid, ...sfState.valid });\n\n        setIsSfpValid(sfState.isSfpValid);\n    };\n\n    // Farm the handlers for binLookup related functionality out to another 'extensions' file\n    const extensions = useMemo(\n        () =>\n            SFExtensions(\n                props,\n                { sfp },\n                { dualBrandSelectElements, setDualBrandSelectElements, setSelectedBrandValue, issuingCountryCode, setIssuingCountryCode }\n            ),\n        [dualBrandSelectElements, issuingCountryCode]\n    );\n\n    /**\n     * EXPECTED METHODS ON SecuredFields.this\n     */\n    this.processBinLookupResponse = (binLookupResponse: BinLookupResponse, isReset: boolean) => {\n        extensions.processBinLookup(binLookupResponse, isReset);\n    };\n\n    this.dualBrandingChangeHandler = extensions.handleDualBrandSelection;\n\n    /**\n     * EFFECT HOOKS\n     */\n    useEffect(() => {\n        // componentDidMount\n        this.setFocusOn = sfp.current.setFocusOn;\n        this.updateStyles = sfp.current.updateStyles;\n        this.showValidation = sfp.current.showValidation;\n        this.handleUnsupportedCard = sfp.current.handleUnsupportedCard;\n\n        // componentWillUnmount\n        return () => {\n            sfp.current.destroy();\n        };\n    }, []);\n\n    /**\n     * Main 'componentDidUpdate' handler\n     */\n    useEffect(() => {\n        const sfStateErrorsObj = sfp.current.mapErrorsToValidationRuleResult();\n\n        const mappedErrors = { ...errors, ...sfStateErrorsObj }; // maps sfErrors\n\n        props.onChange({\n            data,\n            valid,\n            errors: mappedErrors,\n            isValid: isSfpValid,\n            selectedBrandValue\n        });\n\n        // Create an array of Validation error objects and send to callback\n        if (Object.keys(mappedErrors).length) {\n            const validationErrors: ValidationError[] = Object.entries(mappedErrors).map(([fieldType, error]) => {\n                const valErr: ValidationError = {\n                    fieldType,\n                    ...(error ? (error as SFError) : { error: '', rootNode: this.props.rootNode })\n                };\n                return valErr;\n            });\n            this.props.onValidationError?.(validationErrors);\n        }\n    }, [data, valid, errors, selectedBrandValue]);\n\n    /**\n     * RENDER\n     */\n    // prettier-ignore\n    return (\n        <SecuredFieldsProvider\n            ref={sfp}\n            {...extractPropsForSFP(props)}\n            type={props.brand}\n            onChange={handleSecuredFieldsChange}\n            render={() => null}\n        />\n    );\n}\n\nCustomCardInput.defaultProps = defaultProps;\n\nexport default CustomCardInput;\n\nconst extractPropsForSFP = (props: SecuredFieldsProps) => {\n    return {\n        autoFocus: props.autoFocus,\n        brands: props.brands,\n        brandsConfiguration: props.brandsConfiguration,\n        clientKey: props.clientKey,\n        forceCompat: props.forceCompat,\n        // countryCode: props.countryCode, // only used for korean cards when koreanAuthenticationRequired is true\n        i18n: props.i18n,\n        implementationType: props.implementationType,\n        keypadFix: props.keypadFix,\n        legacyInputMode: props.legacyInputMode,\n        loadingContext: props.loadingContext,\n        minimumExpiryDate: props.minimumExpiryDate,\n        onAdditionalSFConfig: props.onAdditionalSFConfig,\n        onAdditionalSFRemoved: props.onAdditionalSFRemoved,\n        onAllValid: props.onAllValid,\n        onAutoComplete: props.onAutoComplete,\n        onBinValue: props.onBinValue,\n        onBrand: props.onBrand,\n        // onChange // set directly\n        onConfigSuccess: props.onConfigSuccess,\n        handleKeyPress: props.handleKeyPress,\n        onError: props.onError,\n        onFieldValid: props.onFieldValid,\n        onFocus: props.onFocus,\n        onLoad: props.onLoad,\n        // render // set directly\n        rootNode: props.rootNode,\n        showWarnings: props.showWarnings,\n        styles: props.styles,\n        trimTrailingSeparator: props.trimTrailingSeparator,\n        resources: props.resources,\n        maskSecurityCode: props.maskSecurityCode,\n        placeholders: props.placeholders\n    };\n};\n"],"names":["CustomCardInput","props","sfp","useRef","errors","setErrors","useState","valid","setValid","data","setData","isSfpValid","setIsSfpValid","issuingCountryCode","setIssuingCountryCode","dualBrandSelectElements","setDualBrandSelectElements","selectedBrandValue","setSelectedBrandValue","extensions","useMemo","SFExtensions","this","processBinLookupResponse","binLookupResponse","isReset","processBinLookup","dualBrandingChangeHandler","handleDualBrandSelection","useEffect","setFocusOn","current","updateStyles","showValidation","handleUnsupportedCard","destroy","sfStateErrorsObj","mapErrorsToValidationRuleResult","mappedErrors","_object_spread","onChange","isValid","Object","keys","length","_this_props_onValidationError","_this_props","validationErrors","entries","map","fieldType","error","rootNode","onValidationError","call","h","SecuredFieldsProvider","ref","extractPropsForSFP","type","brand","sfState","render","defaultProps","onError","autoFocus","brands","brandsConfiguration","clientKey","forceCompat","i18n","implementationType","keypadFix","legacyInputMode","loadingContext","minimumExpiryDate","onAdditionalSFConfig","onAdditionalSFRemoved","onAllValid","onAutoComplete","onBinValue","onBrand","onConfigSuccess","handleKeyPress","onFieldValid","onFocus","onLoad","showWarnings","styles","trimTrailingSeparator","resources","maskSecurityCode","placeholders"],"mappings":"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"}