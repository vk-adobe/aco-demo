{"version":3,"file":"SegmentedControl.js","sources":["../../../../../src/components/internal/SegmentedControl/SegmentedControl.tsx"],"sourcesContent":["import { h } from 'preact';\nimport cx from 'classnames';\nimport './SegmentedControl.scss';\n\n/**\n * It makes no sense of the aria tags to be responsibility of another component\n * The new interface makes it clear that id and control are required\n * While moving the expanded logic to within the SegmentedController\n * Both interfaces are compatible\n */\nexport interface OldSegmentedControlOption<T> {\n    label: string;\n    value: T;\n    htmlProps: {\n        id: string;\n        'aria-expanded': boolean;\n        'aria-controls': string;\n    };\n}\n\nexport interface NewSegmentedControlOption<T> {\n    label: string;\n    value: T;\n    id: string;\n    controls: string;\n    htmlProps?: {};\n}\n\ntype SegmentedControlOption<T> = NewSegmentedControlOption<T> | OldSegmentedControlOption<T>;\n\nexport type SegmentedControlOptions<T> = Array<SegmentedControlOption<T>>;\n\nexport interface SegmentedControlProps<T> {\n    classNameModifiers?: string[];\n    selectedValue: T;\n    disabled?: boolean;\n    options: SegmentedControlOptions<T>;\n    onChange(value: T, event: MouseEvent): void;\n}\n\n/**\n *\n * example:\n * <SegmentedControl\n *   onChange={(value) = setMode(value)}\n *   selectedValue={mode}\n *   disabled={status === 'loading'}\n *   classNameModifiers={['css-class']}\n *   options={segmentedControlOptions}\n * />\n *\n * @param classNameModifiers\n * @param selectedValue\n * @param disabled\n * @param options\n * @param onChange\n * @constructor\n */\nfunction SegmentedControl<T>({ classNameModifiers = [], selectedValue, disabled = false, options, onChange }: SegmentedControlProps<T>) {\n    if (!options || options.length === 0) {\n        return null;\n    }\n\n    return (\n        <div\n            className={cx(\n                'adyen-checkout__segmented-control',\n                { 'adyen-checkout__segmented-control--disabled': disabled },\n                ...classNameModifiers.map(modifier => `adyen-checkout__segmented-control--${modifier}`)\n            )}\n            role=\"group\"\n        >\n            {options.map(({ label, value, controls, htmlProps }: NewSegmentedControlOption<T>) => (\n                <button\n                    disabled={disabled}\n                    key={value}\n                    onClick={(event: MouseEvent) => onChange(value, event)}\n                    className={cx('adyen-checkout__segmented-control-segment', {\n                        'adyen-checkout__segmented-control-segment--selected': selectedValue === value\n                    })}\n                    aria-controls={controls}\n                    aria-expanded={selectedValue === value}\n                    type=\"button\"\n                    {...htmlProps}\n                >\n                    {selectedValue === value && <span className=\"adyen-checkout-checkmark\"></span>}\n                    {label}\n                </button>\n            ))}\n        </div>\n    );\n}\n\nexport default SegmentedControl;\n"],"names":["SegmentedControl","classNameModifiers","selectedValue","disabled","options","onChange","length","h","div","className","cx","map","modifier","role","label","value","controls","htmlProps","button","key","onClick","event","aria-controls","aria-expanded","type","span"],"mappings":"0OA0DA,SAASA,GAAoBC,mBAAEA,EAAqB,GAAEC,cAAEA,EAAaC,SAAEA,GAAW,EAAKC,QAAEA,EAAOC,SAAEA,IAC9F,OAAKD,GAA8B,IAAnBA,EAAQE,OAKpBC,EAACC,MAAAA,CACGC,UAAWC,EACP,oCACA,CAAE,8CAA+CP,MAC9CF,EAAmBU,KAAIC,GAAY,sCAAsCA,OAEhFC,KAAK,SAEJT,EAAQO,KAAI,EAAGG,QAAOC,QAAOC,WAAUC,eACpCV,EAACW,+UAAAA,CAAAA,CACGf,SAAUA,EACVgB,IAAKJ,EACLK,QAAUC,GAAsBhB,EAASU,EAAOM,GAChDZ,UAAWC,EAAG,4CAA6C,CACvD,sDAAuDR,IAAkBa,IAE7EO,gBAAeN,EACfO,gBAAerB,IAAkBa,EACjCS,KAAK,UACDP,GAEHf,IAAkBa,GAASR,EAACkB,OAAAA,CAAKhB,UAAU,6BAC3CK,MA1BN,IA+Bf"}