{"version":3,"file":"validate.js","sources":["../../../../../src/components/internal/IbanInput/validate.ts"],"sourcesContent":["import { iso13616Prepare, iso7064Mod97_10, electronicFormat, regex, getIbanCountrySpecification, getCountryCode } from './utils';\nimport { isEmpty } from '../../../utils/validator-utils';\n\n/**\n * Contains a validation status\n * @internal\n * @param status -\n * @param code -\n */\nfunction ValidationStatus(status, code = null) {\n    this.status = status;\n    this.code = code;\n}\n\n/**\n * Validates the format of an iban\n * @internal\n * @param iban -\n */\nconst checkIbanStructure = iban => {\n    const countryCode = iban.slice(0, 2);\n    const ibanRegex = regex(iban, countryCode);\n\n    return ((ibanRegex as RegExp).test && (ibanRegex as RegExp).test(iban.slice(4))) || false;\n};\n\n/**\n * Checks validity of an IBAN\n * @param iban -\n */\nexport const isValidIBAN = iban => {\n    const electronicFormatIban = electronicFormat(iban);\n    const preparedIban = iso13616Prepare(electronicFormatIban);\n    const isValidISO = iso7064Mod97_10(preparedIban) === 1;\n\n    return isValidISO && checkIbanStructure(electronicFormatIban);\n};\n\n/**\n * Checkss the validity status of an IBAN\n * @param iban -\n */\nexport const checkIbanStatus = iban => {\n    const electronicFormatIban = electronicFormat(iban);\n\n    if (iban.length < 2) {\n        return new ValidationStatus('no-validate', 'TOO_SHORT'); // A\n    }\n\n    const countryCode = getCountryCode(electronicFormatIban);\n    const countrySpecification = getIbanCountrySpecification(countryCode);\n\n    if (!countrySpecification) {\n        return new ValidationStatus('invalid', 'INVALID_COUNTRY'); // AA13TEST0123456789\n    }\n\n    if (electronicFormatIban.length > countrySpecification.length) {\n        return new ValidationStatus('invalid', 'TOO_LONG'); // NL13TEST01234567891\n    }\n\n    if (electronicFormatIban.length === countrySpecification.length) {\n        if (isValidIBAN(iban)) {\n            return new ValidationStatus('valid', 'VALID'); // NL13TEST0123456789\n        }\n\n        return new ValidationStatus('invalid', 'INVALID_IBAN'); // NL13TEST0123456781\n    }\n\n    return new ValidationStatus('no-validate', 'UNKNOWN'); // NL13TEST012345678\n};\n\n/**\n * Checks validity of a holder name\n */\nexport const isValidHolder = value => (isEmpty(value) ? null : true); // true, if there are chars other than spaces\n"],"names":["ValidationStatus","status","code","this","isValidIBAN","iban","electronicFormatIban","electronicFormat","preparedIban","iso13616Prepare","iso7064Mod97_10","countryCode","slice","ibanRegex","regex","test","checkIbanStructure","checkIbanStatus","length","getCountryCode","countrySpecification","getIbanCountrySpecification","isValidHolder","value","isEmpty"],"mappings":"oNASA,SAASA,EAAiBC,EAAQC,EAAO,MACrCC,KAAKF,OAASA,EACdE,KAAKD,KAAOA,CAChB,CAOA,MAWaE,EAAcC,IACvB,MAAMC,EAAuBC,EAAiBF,GACxCG,EAAeC,EAAgBH,GAGrC,OAFqD,IAAlCI,EAAgBF,IAdZH,CAAAA,IACvB,MAAMM,EAAcN,EAAKO,MAAM,EAAG,GAC5BC,EAAYC,EAAMT,EAAMM,GAE9B,OAASE,EAAqBE,MAASF,EAAqBE,KAAKV,EAAKO,MAAM,MAAQ,CAAA,EAY/DI,CAAmBV,EAAAA,EAO/BW,EAAkBZ,IAC3B,MAAMC,EAAuBC,EAAiBF,GAE9C,GAAIA,EAAKa,OAAS,EACd,OAAO,IAAIlB,EAAiB,cAAe,aAG/C,MAAMW,EAAcQ,EAAeb,GAC7Bc,EAAuBC,EAA4BV,GAEzD,OAAKS,EAIDd,EAAqBY,OAASE,EAAqBF,OAC5C,IAAIlB,EAAiB,UAAW,YAGvCM,EAAqBY,SAAWE,EAAqBF,OACjDd,EAAYC,GACL,IAAIL,EAAiB,QAAS,SAGlC,IAAIA,EAAiB,UAAW,gBAGpC,IAAIA,EAAiB,cAAe,WAfhC,IAAIA,EAAiB,UAAW,kBAeA,EAMlCsB,EAAgBC,IAAUC,EAAQD,IAAS"}