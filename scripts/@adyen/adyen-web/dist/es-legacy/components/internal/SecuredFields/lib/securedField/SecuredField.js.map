{"version":3,"file":"SecuredField.js","sources":["../../../../../../../src/components/internal/SecuredFields/lib/securedField/SecuredField.ts"],"sourcesContent":["import * as logger from '../utilities/logger';\nimport createIframe from './utils/createIframe';\nimport { removeAllChildren, selectOne } from '../utilities/dom';\nimport { off, on } from '../../../../../utils/listenerUtils';\nimport postMessageToIframe from '../CSF/utils/iframes/postMessageToIframe';\nimport { isChromeVoxPostMsg, isWebpackPostMsg, originCheckPassed } from '../CSF/utils/iframes/postMessageValidation';\nimport {\n    CVC_POLICY_HIDDEN,\n    CVC_POLICY_OPTIONAL,\n    DATE_POLICY_HIDDEN,\n    DATE_POLICY_OPTIONAL,\n    ENCRYPTED_EXPIRY_DATE,\n    ENCRYPTED_EXPIRY_MONTH,\n    ENCRYPTED_EXPIRY_YEAR,\n    ENCRYPTED_SECURITY_CODE\n} from '../constants';\nimport { generateRandomNumber } from '../utilities/commonUtils';\nimport { CVCPolicyType, DatePolicyType, RtnType_callbackFn, RtnType_noParamVoidFn, RtnType_postMessageListener, SFFeedbackObj } from '../types';\nimport AbstractSecuredField from './AbstractSecuredField';\nimport { AriaConfig, IframeConfigObject, SecuredFieldSetupObject, SecuredFieldCommonProps } from '../types';\nimport { reject } from '../../../../../utils/commonUtils';\nimport { processAriaConfig } from './utils/processAriaConfig';\nimport { processPlaceholders } from './utils/processPlaceholders';\nimport Language from '../../../../../language/Language';\nimport { hasOwnProperty } from '../../../../../utils/hasOwnProperty';\nimport { Placeholders } from '../../SFP/types';\nimport './SecuredField.scss';\n\nconst logPostMsg = false;\nconst doLog = false;\n\nclass SecuredField extends AbstractSecuredField {\n    constructor(pSetupObj: SecuredFieldSetupObject, i18n: Language) {\n        super();\n\n        /**\n         * List of props to exclude from being set on this.sfConfig.\n         * These props are only required for internal purposes. They do not get sent to the iframe\n         */\n        const deltaPropsArr: string[] = ['loadingContext', 'holderEl', 'iframeSrc', 'showContextualElement', 'placeholders'];\n\n        /**\n         * List of props from setup object that will be set on this.sfConfig\n         * These props will all end up being sent to the iframe\n         */\n        const configVarsFromSetUpObj = reject(deltaPropsArr).from(pSetupObj);\n\n        // Copy passed setup object values to this.sfConfig\n        this.sfConfig = {\n            // ...this.sfConfig, // Do we need to do this? Pretty sure we don't\n            ...configVarsFromSetUpObj,\n            // Break references on iframeUIConfig object so we can overwrite its properties in each securedField instance\n            iframeUIConfig: { ...configVarsFromSetUpObj.iframeUIConfig }\n        } as SecuredFieldCommonProps;\n\n        /**\n         * Extract values only needed for init\n         */\n        const { iframeSrc, placeholders, showContextualElement } = pSetupObj;\n\n        /**\n         * Store those passed setup object values that are needed in multiple functions\n         */\n        this.loadingContext = pSetupObj.loadingContext;\n        this.holderEl = pSetupObj.holderEl;\n\n        /**\n         * Initiate other values on 'this' through setters\n         */\n        this.isValid = false;\n        this.iframeContentWindow = null;\n        this.numKey = generateRandomNumber();\n        this.isEncrypted = false;\n        this.hasError = false;\n        this.errorType = '';\n        this.cvcPolicy = pSetupObj.cvcPolicy;\n        this.expiryDatePolicy = pSetupObj.expiryDatePolicy;\n\n        if (process.env.NODE_ENV === 'development' && doLog) {\n            logger.log(\n                '### SecuredField::constructor:: this.sfConfig.fieldType=',\n                this.sfConfig.fieldType,\n                'isValid=',\n                this._isValid,\n                'numKey=',\n                this.numKey\n            );\n            logger.log('\\n');\n        }\n\n        return this.init(i18n, iframeSrc, placeholders, showContextualElement);\n    }\n\n    init(i18n: Language, iframeSrc: string, placeholders: Placeholders, showContextualElement: boolean): SecuredField {\n        /**\n         * Ensure all fields have a related ariaConfig object containing, at minimum, an iframeTitle property and a (translated) errors object\n         */\n        const processedAriaConfig: AriaConfig = processAriaConfig(this.sfConfig.txVariant, this.sfConfig.fieldType, i18n, showContextualElement);\n        // Set result back onto config object\n        this.sfConfig.iframeUIConfig.ariaConfig = processedAriaConfig;\n\n        // Set result back onto config object\n        this.sfConfig.iframeUIConfig.placeholders = processPlaceholders(this.sfConfig.txVariant, this.sfConfig.fieldType, placeholders);\n\n        /**\n         * Configure, create & reference iframe and add load listener\n         */\n        const iframeConfig = {\n            src: iframeSrc,\n            title: processedAriaConfig[this.sfConfig.fieldType].iframeTitle,\n            policy: 'origin'\n        };\n\n        const iframeEl: HTMLIFrameElement = createIframe(iframeConfig);\n\n        // Place the iframe into the holder\n        this.holderEl.appendChild(iframeEl);\n\n        // Now examine the holder to get an actual DOM node\n        const iframe: HTMLIFrameElement = selectOne(this.holderEl, '.js-iframe');\n\n        if (iframe) {\n            this.iframeContentWindow = iframe.contentWindow;\n\n            // Create reference to bound fn (see getters/setters for binding)\n            this.iframeOnLoadListener = this.iframeOnLoadListenerFn;\n\n            on(iframe, 'load', this.iframeOnLoadListener, false);\n        }\n\n        this.iframeRef = iframe;\n\n        return this;\n    }\n\n    iframeOnLoadListenerFn(): void {\n        // Create reference to bound fn (see getters/setters for binding)\n        this.postMessageListener = this.postMessageListenerFn;\n\n        // Add general listener for 'message' EVENT - the event that 'powers' postMessage\n        on(window, 'message', this.postMessageListener, false);\n\n        // Create and send config object to iframe\n        const configObj: IframeConfigObject = {\n            ...this.sfConfig,\n            numKey: this.numKey\n        };\n\n        if (window._b$dl) console.log('### SecuredField:::: onIframeLoaded:: created configObj=', configObj);\n\n        postMessageToIframe(configObj, this.iframeContentWindow, this.loadingContext);\n        //--\n\n        // Callback to say iframe loaded\n        this.onIframeLoadedCallback();\n    }\n\n    postMessageListenerFn(event: MessageEvent): void {\n        // Check message is from expected domain\n        if (!originCheckPassed(event, this.loadingContext, this.sfConfig.showWarnings)) {\n            return;\n        }\n\n        // TODO - for debugging purposes this would always be useful to see\n        //        logger.log('\\n',this.sfConfig.fieldType,'### CSF SecuredField::postMessageListener:: event.data=',event.data);\n\n        if (process.env.NODE_ENV === 'development' && logPostMsg) {\n            logger.log(\n                '\\n###CSF SecuredField::postMessageListener:: DOMAIN & ORIGIN MATCH, NO WEBPACK WEIRDNESS fieldType=',\n                this.sfConfig.fieldType,\n                'txVariant=',\n                this.sfConfig.txVariant,\n                'this.numKey=',\n                this.numKey\n            );\n        }\n\n        // PARSE DATA OBJECT (thus testing if it is a JSON string) - OR TRY & WORK OUT WHY THE PARSING FAILED\n        let feedbackObj: SFFeedbackObj;\n\n        try {\n            feedbackObj = JSON.parse(event.data);\n        } catch (e) {\n            // Was the message generated by webpack?\n            if (isWebpackPostMsg(event)) {\n                if (this.sfConfig.showWarnings) logger.log('### SecuredField::postMessageListenerFn:: PARSE FAIL - WEBPACK');\n                return;\n            }\n\n            // Was the message generated by ChromeVox?\n            if (isChromeVoxPostMsg(event)) {\n                if (this.sfConfig.showWarnings) logger.log('### SecuredField::postMessageListenerFn:: PARSE FAIL - CHROMEVOX');\n                return;\n            }\n\n            if (this.sfConfig.showWarnings)\n                logger.log('### SecuredField::postMessageListenerFn:: PARSE FAIL - UNKNOWN REASON: event.data=', event.data);\n            return;\n        }\n\n        // CHECK FOR EXPECTED PROPS\n        const hasMainProps: boolean = hasOwnProperty(feedbackObj, 'action') && hasOwnProperty(feedbackObj, 'numKey');\n\n        if (!hasMainProps) {\n            if (this.sfConfig.showWarnings) logger.warn('WARNING SecuredField :: postMessage listener for iframe :: data mismatch!');\n            return;\n        }\n\n        if (process.env.NODE_ENV === 'development' && logPostMsg) {\n            logger.log('### SecuredField::postMessageListener:: feedbackObj.numKey=', feedbackObj.numKey);\n        }\n\n        if (this.numKey !== feedbackObj.numKey) {\n            if (this.sfConfig.showWarnings) {\n                logger.warn(\n                    'WARNING SecuredField :: postMessage listener for iframe :: data mismatch! (Probably a message from an unrelated securedField)'\n                );\n            }\n            return;\n        }\n\n        // VALIDATION CHECKS PASSED - DECIDE ON COURSE OF ACTION\n        if (process.env.NODE_ENV === 'development' && logPostMsg) {\n            logger.log(\n                '### SecuredField::postMessageListener:: numkeys match PROCEED WITH POST MESSAGE PROCESSING fieldType=',\n                this.sfConfig.fieldType,\n                'txVariant=',\n                this.sfConfig.txVariant\n            );\n        }\n\n        switch (feedbackObj.action) {\n            case 'encryption':\n                this.isValid = true;\n                this.onEncryptionCallback(feedbackObj);\n                break;\n\n            case 'config':\n                if (window._b$dl)\n                    console.log('### SecuredField::postMessageListenerFn:: configured - calling onConfigCallback', feedbackObj.fieldType);\n                this.onConfigCallback(feedbackObj);\n                break;\n\n            case 'focus':\n                this.onFocusCallback(feedbackObj);\n                break;\n\n            case 'binValue':\n                this.onBinValueCallback(feedbackObj);\n                break;\n\n            // iOS ONLY - RE. iOS BUGS AROUND BLUR AND FOCUS EVENTS\n            case 'touch':\n                this.onTouchstartCallback(feedbackObj);\n                break;\n\n            // Only happens for Firefox & IE <= 11\n            case 'shifttab':\n                this.onShiftTabCallback(feedbackObj);\n                break;\n\n            case 'autoComplete':\n                this.onAutoCompleteCallback(feedbackObj);\n                break;\n\n            case 'enterKeyPressed':\n                this.onKeyPressedCallback(feedbackObj);\n                break;\n\n            /**\n             * Validate, because action =\n             *\n             *  'brand'\n             *  'delete'\n             *  'luhnCheck'\n             *              //'incomplete field' (an error that follows from a focus (blur) event)\n             *  'incorrectly filled field' (an error that follows from a focus (blur) event) // NEW\n             *  'numberKeyPressed' (or date-, month-, year-, cvc-, pin-, or iban- KeyPressed)\n             *    - since we have no \"error\" action \"...KeyPressed\" is the action type on most error events (other than \"incomplete field\" or \"luhnCheck\")\n             *    and often these error events representing the clearing of an existing error\n             */\n            default:\n                // If we're validation handling (& not encryption handling) field must be invalid\n                this.isValid = false;\n                this.onValidationCallback(feedbackObj);\n        }\n    }\n\n    destroy(): void {\n        off(window, 'message', this.postMessageListener, false);\n        off(this.iframeRef, 'load', this.iframeOnLoadListener, false);\n        this.iframeContentWindow = null;\n        removeAllChildren(this.holderEl);\n    }\n\n    /**\n     * Returns whether the securedField is hidden OR whether it is optional and not in error\n     */\n    isOptionalOrHidden(): boolean {\n        if (\n            this.sfConfig.fieldType === ENCRYPTED_EXPIRY_DATE ||\n            this.sfConfig.fieldType === ENCRYPTED_EXPIRY_MONTH ||\n            this.sfConfig.fieldType === ENCRYPTED_EXPIRY_YEAR\n        ) {\n            switch (this.expiryDatePolicy) {\n                case DATE_POLICY_HIDDEN:\n                    return true;\n                case DATE_POLICY_OPTIONAL:\n                    return !this.hasError;\n                default:\n                    return false;\n            }\n        }\n\n        if (this.sfConfig.fieldType === ENCRYPTED_SECURITY_CODE) {\n            switch (this.cvcPolicy) {\n                case CVC_POLICY_HIDDEN:\n                    return true;\n                case CVC_POLICY_OPTIONAL:\n                    return !this.hasError;\n                default:\n                    return false;\n            }\n        }\n\n        // Any other type of securedField is not optional & can't be hidden\n        return false;\n    }\n\n    // /////// ALLOCATE CALLBACKS /////////\n    onIframeLoaded(callbackFn: RtnType_noParamVoidFn): SecuredField {\n        this.onIframeLoadedCallback = callbackFn;\n        return this;\n    }\n\n    onEncryption(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onEncryptionCallback = callbackFn;\n        return this;\n    }\n\n    onValidation(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onValidationCallback = callbackFn;\n        return this;\n    }\n\n    onConfig(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onConfigCallback = callbackFn;\n        return this;\n    }\n\n    onFocus(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onFocusCallback = callbackFn;\n        return this;\n    }\n\n    onBinValue(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onBinValueCallback = callbackFn;\n        return this;\n    }\n\n    onTouchstart(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onTouchstartCallback = callbackFn;\n        return this;\n    }\n\n    onShiftTab(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onShiftTabCallback = callbackFn;\n        return this;\n    }\n\n    onAutoComplete(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onAutoCompleteCallback = callbackFn;\n        return this;\n    }\n\n    onKeyPressed(callbackFn: RtnType_callbackFn): SecuredField {\n        this.onKeyPressedCallback = callbackFn;\n        return this;\n    }\n    //------------------------------------\n\n    // ///////////// GETTERS/SETTERS //////////////\n\n    get errorType(): string {\n        return this._errorType;\n    }\n    set errorType(value: string) {\n        this._errorType = value;\n    }\n\n    get hasError(): boolean {\n        return this._hasError;\n    }\n    set hasError(value: boolean) {\n        this._hasError = value;\n    }\n\n    get isValid(): boolean {\n        if (this.sfConfig.fieldType === ENCRYPTED_SECURITY_CODE) {\n            switch (this.cvcPolicy) {\n                case CVC_POLICY_HIDDEN:\n                    // If cvc is hidden then the field is always valid\n                    return true;\n                case CVC_POLICY_OPTIONAL:\n                    // If cvc is optional then the field is always valid UNLESS it has an error\n                    return !this.hasError;\n                default:\n                    return this._isValid;\n            }\n        }\n\n        if (\n            this.sfConfig.fieldType === ENCRYPTED_EXPIRY_DATE ||\n            this.sfConfig.fieldType === ENCRYPTED_EXPIRY_MONTH ||\n            this.sfConfig.fieldType === ENCRYPTED_EXPIRY_YEAR\n        ) {\n            switch (this.expiryDatePolicy) {\n                case DATE_POLICY_HIDDEN:\n                    // If date is hidden then the field is always valid\n                    return true;\n                case DATE_POLICY_OPTIONAL:\n                    // If date is optional then the field is always valid UNLESS it has an error\n                    return !this.hasError;\n                default:\n                    return this._isValid;\n            }\n        }\n\n        return this._isValid;\n    }\n    set isValid(value: boolean) {\n        this._isValid = value;\n    }\n\n    get cvcPolicy(): CVCPolicyType {\n        return this._cvcPolicy;\n    }\n\n    set cvcPolicy(value: CVCPolicyType) {\n        // Only set if this is a CVC field\n        if (this.sfConfig.fieldType !== ENCRYPTED_SECURITY_CODE) return;\n\n        // Only set if value has changed\n        if (value === this.cvcPolicy) return;\n\n        if (process.env.NODE_ENV === 'development' && doLog) logger.log(this.sfConfig.fieldType, '### SecuredField::cvcPolicy:: value=', value);\n\n        this._cvcPolicy = value;\n\n        // If the field has changed status (required <--> not required) AND it's error state was due to an isValidated call\n        // NOTE: fixes issue in Components where you first validate and then start typing a maestro number\n        // - w/o this and the fix in CSF the maestro PM will never register as valid\n        if (this.hasError && this.errorType === 'isValidated') {\n            this.hasError = false;\n        }\n    }\n\n    get expiryDatePolicy(): DatePolicyType {\n        return this._expiryDatePolicy;\n    }\n\n    set expiryDatePolicy(value: DatePolicyType) {\n        // Only set if this is a date field type of securedField\n        if (\n            this.sfConfig.fieldType !== ENCRYPTED_EXPIRY_DATE &&\n            this.sfConfig.fieldType !== ENCRYPTED_EXPIRY_MONTH &&\n            this.sfConfig.fieldType !== ENCRYPTED_EXPIRY_YEAR\n        )\n            return;\n\n        // Only set if value has changed\n        if (value === this.expiryDatePolicy) return;\n\n        if (process.env.NODE_ENV === 'development' && doLog) logger.log(this.sfConfig.fieldType, '### SecuredField:expiryDatePolicy:: value=', value);\n\n        this._expiryDatePolicy = value;\n\n        // If the field has changed status (required <--> not required) AND it's error state was due to an isValidated call\n        if (this.hasError && this.errorType === 'isValidated') {\n            this.hasError = false;\n        }\n    }\n\n    get iframeContentWindow(): Window {\n        return this._iframeContentWindow;\n    }\n    set iframeContentWindow(value: Window) {\n        this._iframeContentWindow = value;\n    }\n\n    get isEncrypted(): boolean {\n        return this._isEncrypted;\n    }\n    set isEncrypted(value: boolean) {\n        this._isEncrypted = value;\n    }\n\n    get numKey(): number {\n        return this._numKey;\n    }\n    set numKey(value: number) {\n        this._numKey = value;\n    }\n\n    // Internal use - way to create listener refs that we can add/remove\n    get iframeOnLoadListener(): RtnType_noParamVoidFn {\n        return this._iframeOnLoadListener;\n    }\n    set iframeOnLoadListener(value: RtnType_noParamVoidFn) {\n        this._iframeOnLoadListener = value.bind(this);\n    }\n\n    get postMessageListener(): RtnType_postMessageListener {\n        return this._postMessageListener;\n    }\n    set postMessageListener(value: RtnType_postMessageListener) {\n        this._postMessageListener = value.bind(this);\n    }\n}\n\nexport default SecuredField;\n"],"names":["SecuredField","AbstractSecuredField","init","i18n","iframeSrc","placeholders","showContextualElement","processedAriaConfig","processAriaConfig","this","sfConfig","txVariant","fieldType","iframeUIConfig","ariaConfig","processPlaceholders","iframeConfig","src","title","iframeTitle","policy","iframeEl","createIframe","holderEl","appendChild","iframe","selectOne","iframeContentWindow","contentWindow","iframeOnLoadListener","iframeOnLoadListenerFn","on","iframeRef","postMessageListener","postMessageListenerFn","window","configObj","_object_spread_props","_object_spread","numKey","_b$dl","console","log","postMessageToIframe","loadingContext","onIframeLoadedCallback","event","originCheckPassed","showWarnings","feedbackObj","JSON","parse","data","e","isWebpackPostMsg","logger","isChromeVoxPostMsg","hasOwnProperty","action","isValid","onEncryptionCallback","onConfigCallback","onFocusCallback","onBinValueCallback","onTouchstartCallback","onShiftTabCallback","onAutoCompleteCallback","onKeyPressedCallback","onValidationCallback","destroy","off","removeAllChildren","isOptionalOrHidden","ENCRYPTED_EXPIRY_DATE","ENCRYPTED_EXPIRY_MONTH","ENCRYPTED_EXPIRY_YEAR","expiryDatePolicy","DATE_POLICY_HIDDEN","DATE_POLICY_OPTIONAL","hasError","ENCRYPTED_SECURITY_CODE","cvcPolicy","CVC_POLICY_HIDDEN","CVC_POLICY_OPTIONAL","onIframeLoaded","callbackFn","onEncryption","onValidation","onConfig","onFocus","onBinValue","onTouchstart","onShiftTab","onAutoComplete","onKeyPressed","errorType","_errorType","value","_hasError","_isValid","_cvcPolicy","_expiryDatePolicy","_iframeContentWindow","isEncrypted","_isEncrypted","_numKey","_iframeOnLoadListener","bind","_postMessageListener","constructor","pSetupObj","super","configVarsFromSetUpObj","reject","from","generateRandomNumber"],"mappings":"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"}