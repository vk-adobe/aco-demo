{"version":3,"file":"triggerBinLookUp.js","sources":["../../../../../../src/components/internal/SecuredFields/binLookup/triggerBinLookUp.ts"],"sourcesContent":["import { httpPost } from '../../../../core/Services/http';\nimport { CardBinLookupData, CardBinValueData, CardErrorData } from '../lib/types';\nimport { DEFAULT_CARD_GROUP_TYPES } from '../lib/constants';\nimport { SF_ErrorCodes } from '../../../../core/Errors/constants';\nimport { BinLookupResponse, BinLookupResponseRaw } from '../../../Card/types';\n\nif (process.env.NODE_ENV === 'development') {\n    window.mockBinCount = 0; // Set to 0 to turn off mocking, 1 to turn it on\n}\n\nexport default parent => {\n    let currentRequestId = null;\n\n    return (callbackObj: CardBinValueData) => {\n        // Allow way for merchant to disallow binLookup by specifically setting the prop to false\n        if (parent.props.doBinLookup === false) {\n            if (parent.props.onBinValue) parent.props.onBinValue(callbackObj);\n            return;\n        }\n\n        // Do binLookup when encryptedBin property is present (and only if the merchant is using a clientKey)\n        if (callbackObj.encryptedBin && parent.props.clientKey) {\n            // Store id of request we're about to make\n            currentRequestId = callbackObj.uuid;\n\n            void httpPost(\n                {\n                    loadingContext: parent.props.loadingContext,\n                    path: `v3/bin/binLookup?token=${parent.props.clientKey}`\n                },\n                {\n                    type: parent.props.brand,\n                    supportedBrands: parent.props.brands || DEFAULT_CARD_GROUP_TYPES,\n                    encryptedBin: callbackObj.encryptedBin,\n                    requestId: callbackObj.uuid // Pass id of request\n                }\n            ).then((data: BinLookupResponseRaw) => {\n                // If response is the one we were waiting for...\n                if (data?.requestId === currentRequestId) {\n                    if (process.env.NODE_ENV === 'development') {\n                        // TODO mocking\n                        if (window.mockBinCount >= 1) {\n                            switch (window.mockBinCount) {\n                                case 1:\n                                    console.log('\\n### triggerBinLookUp::mock first response:: ');\n                                    data.brands = [\n                                        {\n                                            brand: 'mc',\n                                            cvcPolicy: 'optional',\n                                            enableLuhnCheck: true,\n                                            // showExpiryDate: true, // deprecated in /binLookup v3\n                                            expiryDatePolicy: 'optional',\n                                            // panLength: 16,\n                                            supported: true\n                                        }\n                                    ];\n                                    // data.issuingCountryCode = 'KR'; // needed to mock korean_local_card\n                                    // increment to alter second response\n                                    window.mockBinCount++;\n\n                                    break;\n                                case 2:\n                                    console.log('\\n### triggerBinLookUp::mock second response:: ');\n                                    // data.brands = null;\n                                    data.brands = [\n                                        {\n                                            brand: 'maestro',\n                                            cvcPolicy: 'required',\n                                            enableLuhnCheck: true,\n                                            showExpiryDate: true,\n                                            supported: true,\n                                            showSocialSecurityNumber: false\n                                            // panLength: 16\n                                        }\n                                    ];\n                                    break;\n                                default:\n                            }\n                        }\n                        // TODO end\n                    }\n\n                    if (data.brands?.length) {\n                        const mappedResponse = data.brands.reduce(\n                            (acc, item) => {\n                                // All brand strings end up in the detectedBrands array\n                                acc.detectedBrands.push(item.brand);\n                                // Also add the paymentMethodVariants (more granular description of the txvariant)\n                                acc.paymentMethodVariants.push(item.paymentMethodVariant);\n\n                                // Add supported brand objects to the supportedBrands array\n                                if (item.supported === true) {\n                                    acc.supportedBrands.push(item);\n                                    return acc;\n                                }\n\n                                return acc;\n                            },\n                            { supportedBrands: [], detectedBrands: [], paymentMethodVariants: [] }\n                        );\n\n                        /**\n                         * supportedBrands = merchant supports this brand(s); we have detected the card number to be of this brand(s); carry on!\n                         */\n                        if (mappedResponse.supportedBrands.length) {\n                            // ...call processBinLookupResponse with, a simplified, response object if it contains at least one supported brand\n                            parent.processBinLookupResponse({\n                                issuingCountryCode: data.issuingCountryCode,\n                                supportedBrands: mappedResponse.supportedBrands,\n                                ...(data.showSocialSecurityNumber ? { showSocialSecurityNumber: data.showSocialSecurityNumber } : {})\n                            } as BinLookupResponse);\n\n                            // Inform merchant of the result\n                            parent.onBinLookup({\n                                type: callbackObj.type,\n                                detectedBrands: mappedResponse.detectedBrands,\n                                // supportedBrands contains the subset of this.props.brands that matches the card number that the shopper has typed\n                                supportedBrands: mappedResponse.supportedBrands.map(item => item.brand),\n                                paymentMethodVariants: mappedResponse.paymentMethodVariants,\n                                supportedBrandsRaw: mappedResponse.supportedBrands, // full supportedBrands data (for customCard comp)\n                                brands: parent.props.brands || DEFAULT_CARD_GROUP_TYPES,\n                                issuingCountryCode: data.issuingCountryCode\n                            } as CardBinLookupData);\n\n                            return;\n                        }\n\n                        /**\n                         * detectedBrands = no brands the merchant supports were found; what we did detect the shopper to be entering was this brand;\n                         * error!\n                         */\n                        if (mappedResponse.detectedBrands.length) {\n                            const errObj: CardErrorData = {\n                                type: 'card',\n                                fieldType: 'encryptedCardNumber',\n                                error: SF_ErrorCodes.ERROR_MSG_UNSUPPORTED_CARD_ENTERED,\n                                detectedBrands: mappedResponse.detectedBrands\n                            };\n                            parent.handleUnsupportedCard(errObj);\n\n                            // Inform merchant of the result\n                            parent.onBinLookup({\n                                type: callbackObj.type,\n                                detectedBrands: mappedResponse.detectedBrands,\n                                supportedBrands: null,\n                                paymentMethodVariants: mappedResponse.paymentMethodVariants,\n                                brands: parent.props.brands || DEFAULT_CARD_GROUP_TYPES\n                            } as CardBinLookupData);\n\n                            return;\n                        }\n                    } else {\n                        /**\n                         *  BIN not in DB (a failed lookup will just contain a requestId)\n                         */\n                        parent.onBinLookup({\n                            type: callbackObj.type,\n                            detectedBrands: null,\n                            supportedBrands: null,\n                            paymentMethodVariants: null,\n                            brands: parent.props.brands || DEFAULT_CARD_GROUP_TYPES\n                        } as CardBinLookupData);\n\n                        // Reset the UI and let the native, regex branding happen (for the generic card)\n                        // For a single-branded card we need to pass a boolean to prompt resetting the brand logo to the 'base' type\n                        parent.processBinLookupResponse({}, true);\n                    }\n                } else {\n                    if (!data?.requestId) {\n                        // Some other kind of error on the backend\n                        parent.props.onError(data || { errorType: 'binLookup', message: 'unknownError' });\n                    }\n                    // Else - response with wrong requestId\n                }\n            });\n        } else if (currentRequestId) {\n            /**\n             * If onBinValue callback is called AND we have been doing binLookup BUT passed object doesn't have an encryptedBin property\n             * - then THE NUMBER OF DIGITS IN NUMBER FIELD HAS DROPPED BELOW THRESHOLD for BIN lookup - so reset the UI\n             */\n            parent.processBinLookupResponse(null, true);\n\n            currentRequestId = null; // Ignore any pending responses\n\n            // Reset any errors\n            const errObj: CardErrorData = {\n                type: 'card',\n                fieldType: 'encryptedCardNumber',\n                error: ''\n            };\n            parent.handleUnsupportedCard(errObj);\n\n            // CustomCard needs this to reset the UI\n            parent.onBinLookup({\n                isReset: true\n            } as CardBinLookupData);\n        }\n\n        if (parent.props.onBinValue) parent.props.onBinValue(callbackObj);\n    };\n};\n"],"names":["parent","currentRequestId","callbackObj","props","doBinLookup","encryptedBin","clientKey","uuid","httpPost","loadingContext","path","type","brand","supportedBrands","brands","DEFAULT_CARD_GROUP_TYPES","requestId","then","data","length","mappedResponse","reduce","acc","item","detectedBrands","push","paymentMethodVariants","paymentMethodVariant","supported","processBinLookupResponse","_object_spread","issuingCountryCode","showSocialSecurityNumber","onBinLookup","map","supportedBrandsRaw","errObj","fieldType","error","SF_ErrorCodes","ERROR_MSG_UNSUPPORTED_CARD_ENTERED","handleUnsupportedCard","onError","errorType","message","isReset","onBinValue"],"mappings":"yTAUA,IAAeA,EAAAA,IACX,IAAIC,EAAmB,KAEvB,OAAQC,IAEJ,IAAiC,IAA7BF,EAAOG,MAAMC,YAAjB,CAMA,GAAIF,EAAYG,cAAgBL,EAAOG,MAAMG,UAEzCL,EAAmBC,EAAYK,KAE1BC,EACD,CACIC,eAAgBT,EAAOG,MAAMM,eAC7BC,KAAM,0BAA0BV,EAAOG,MAAMG,aAEjD,CACIK,KAAMX,EAAOG,MAAMS,MACnBC,gBAAiBb,EAAOG,MAAMW,QAAUC,EACxCV,aAAcH,EAAYG,aAC1BW,UAAWd,EAAYK,OAE7BU,MAAMC,IA8CIA,IAAAA,EA5CR,IAAIA,aAAAA,EAAAA,EAAMF,aAAcf,EA4CpB,WAAIiB,EAAAA,EAAKJ,cAALI,IAAAA,OAAAA,EAAAA,EAAaC,OAAQ,CACrB,MAAMC,EAAiBF,EAAKJ,OAAOO,QAC/B,CAACC,EAAKC,KAEFD,EAAIE,eAAeC,KAAKF,EAAKX,OAE7BU,EAAII,sBAAsBD,KAAKF,EAAKI,uBAGb,IAAnBJ,EAAKK,WACLN,EAAIT,gBAAgBY,KAAKF,GAClBD,GAGJA,IAEX,CAAET,gBAAiB,GAAIW,eAAgB,GAAIE,sBAAuB,KAMtE,GAAIN,EAAeP,gBAAgBM,OAoB/B,OAlBAnB,EAAO6B,+VAAyBC,CAAA,CAC5BC,mBAAoBb,EAAKa,mBACzBlB,gBAAiBO,EAAeP,iBAC5BK,EAAKc,yBAA2B,CAAEA,yBAA0Bd,EAAKc,0BAA6B,CAAC,SAIvGhC,EAAOiC,YAAY,CACftB,KAAMT,EAAYS,KAClBa,eAAgBJ,EAAeI,eAE/BX,gBAAiBO,EAAeP,gBAAgBqB,KAAIX,GAAQA,EAAKX,QACjEc,sBAAuBN,EAAeM,sBACtCS,mBAAoBf,EAAeP,gBACnCC,OAAQd,EAAOG,MAAMW,QAAUC,EAC/BgB,mBAAoBb,EAAKa,qBAUjC,GAAIX,EAAeI,eAAeL,OAAQ,CACtC,MAAMiB,EAAwB,CAC1BzB,KAAM,OACN0B,UAAW,sBACXC,MAAOC,EAAcC,mCACrBhB,eAAgBJ,EAAeI,gBAanC,OAXAxB,EAAOyC,sBAAsBL,QAG7BpC,EAAOiC,YAAY,CACftB,KAAMT,EAAYS,KAClBa,eAAgBJ,EAAeI,eAC/BX,gBAAiB,KACjBa,sBAAuBN,EAAeM,sBACtCZ,OAAQd,EAAOG,MAAMW,QAAUC,GAIvC,OAKAf,EAAOiC,YAAY,CACftB,KAAMT,EAAYS,KAClBa,eAAgB,KAChBX,gBAAiB,KACjBa,sBAAuB,KACvBZ,OAAQd,EAAOG,MAAMW,QAAUC,IAKnCf,EAAO6B,yBAAyB,CAAI,GAAA,QAGnCX,aAAAA,EAAAA,EAAMF,YAEPhB,EAAOG,MAAMuC,QAAQxB,GAAQ,CAAEyB,UAAW,YAAaC,QAAS,gBAGxE,SAED,GAAI3C,EAAkB,CAKzBD,EAAO6B,yBAAyB,MAAM,GAEtC5B,EAAmB,KAGnB,MAAMmC,EAAwB,CAC1BzB,KAAM,OACN0B,UAAW,sBACXC,MAAO,IAEXtC,EAAOyC,sBAAsBL,GAG7BpC,EAAOiC,YAAY,CACfY,SAAS,GAEjB,CAEI7C,EAAOG,MAAM2C,YAAY9C,EAAOG,MAAM2C,WAAW5C,EApLrD,MAFQF,EAAOG,MAAM2C,YAAY9C,EAAOG,MAAM2C,WAAW5C,EAsLJA,CAE7D"}