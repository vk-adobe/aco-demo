{"version":3,"file":"handleBrandFromBinLookup.js","sources":["../../../../../../../../src/components/internal/SecuredFields/lib/CSF/extensions/handleBrandFromBinLookup.ts"],"sourcesContent":["import {\n    ENCRYPTED_SECURITY_CODE,\n    ENCRYPTED_CARD_NUMBER,\n    DATE_POLICY_REQUIRED,\n    DATE_POLICY_HIDDEN,\n    ENCRYPTED_EXPIRY_DATE,\n    ENCRYPTED_EXPIRY_MONTH,\n    ENCRYPTED_EXPIRY_YEAR\n} from '../../constants';\nimport postMessageToIframe from '../utils/iframes/postMessageToIframe';\nimport { SFFeedbackObj, SendBrandObject, SendExpiryDateObject } from '../../types';\nimport { BinLookupResponse, BrandObject } from '../../../../../Card/types';\nimport { hasOwnProperty } from '../../../../../../utils/hasOwnProperty';\nimport getIframeContentWin from '../utils/iframes/getIframeContentWin';\nimport { SingleBrandResetObject } from '../../../SFP/types';\n\nexport function sendBrandToCardSF(brandObj: SendBrandObject): void {\n    if (hasOwnProperty(this.state.securedFields, ENCRYPTED_CARD_NUMBER)) {\n        const dataObj: object = {\n            txVariant: this.state.type,\n            ...brandObj,\n            fieldType: ENCRYPTED_CARD_NUMBER,\n            numKey: this.state.securedFields[ENCRYPTED_CARD_NUMBER].numKey\n        };\n        postMessageToIframe(dataObj, getIframeContentWin(this.state, ENCRYPTED_CARD_NUMBER), this.config.loadingContext);\n    }\n}\n\nexport function sendExpiryDatePolicyToSF(expiryDateObj: SendExpiryDateObject): void {\n    const separateDateFields =\n        hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_MONTH) && hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_YEAR);\n\n    const dateIframesArr = separateDateFields ? [ENCRYPTED_EXPIRY_MONTH, ENCRYPTED_EXPIRY_YEAR] : [ENCRYPTED_EXPIRY_DATE];\n\n    dateIframesArr.forEach((key: string) => {\n        const dataObj: object = {\n            txVariant: this.state.type,\n            ...expiryDateObj,\n            fieldType: key,\n            numKey: this.state.securedFields[key].numKey\n        };\n        postMessageToIframe(dataObj, getIframeContentWin(this.state, key), this.config.loadingContext);\n    });\n}\n\nexport default function handleBrandFromBinLookup(binLookupResponse: BinLookupResponse, resetObj: SingleBrandResetObject): void {\n    const isGenericCard: boolean = this.state.type === 'card';\n\n    /**\n     * The number of digits in number field has dropped below threshold for BIN lookup (or the bin wasn't found in the DB)\n     * - so tell SF to reset & republish the brand it detects\n     */\n    if (!binLookupResponse || !Object.keys(binLookupResponse).length) {\n        if (isGenericCard) {\n            // This will be sent to CardNumber SF which will trigger the brand to be re-evaluated and broadcast\n            // (which will reset cvcPolicy & expiryDatePolicy in state, here in Checkout)\n            this.sendBrandToCardSF({ brand: 'reset' });\n            // Also pass the reset expiryDatePolicy to the date related SFs so they can reset visibility & aria-required attrs\n            this.sendExpiryDatePolicyToSF({ expiryDatePolicy: DATE_POLICY_REQUIRED });\n        } else {\n            /**\n             * For \"dedicated\" card components, i.e a card component created as: checkout.create('bcmc') but which can accept multiple brands,\n             * there will be no to-and-fro with the securedField iframe to reset brand.\n             * The presence of a resetObj indicates we are in this \"dedicated\"\" scenario, so we need to use the information contained within this object\n             * to internally reset the brand\n             */\n            if (resetObj) {\n                this.processBrand({ ...resetObj, fieldType: ENCRYPTED_CARD_NUMBER } as SFFeedbackObj);\n            }\n        }\n\n        // Reset expiryDatePolicy - which never comes from SF // TODO find out under which circumstances this clause is still required\n        if (this.state.type === 'card' && hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_DATE)) {\n            this.state.securedFields[ENCRYPTED_EXPIRY_DATE].expiryDatePolicy = DATE_POLICY_REQUIRED;\n        }\n\n        return;\n    }\n\n    const binBrandObj: BrandObject = binLookupResponse.supportedBrands[0];\n\n    const passedBrand: string = binBrandObj.brand;\n\n    // Look first for expiryDatePolicy string otherwise use showExpiryDate boolean\n    const expiryDatePolicy = binBrandObj.expiryDatePolicy ?? (binBrandObj.showExpiryDate === true ? DATE_POLICY_REQUIRED : DATE_POLICY_HIDDEN);\n\n    const brandObj: object = {\n        brand: passedBrand,\n        cvcPolicy: binBrandObj.cvcPolicy,\n        expiryDatePolicy,\n        cvcText: 'Security code',\n        showSocialSecurityNumber: binBrandObj.showSocialSecurityNumber ?? false,\n        fieldType: ENCRYPTED_CARD_NUMBER\n    };\n\n    // Take advantage of function used to handle brand messages from SF in order to process this new brand information\n    this.processBrand(brandObj as SFFeedbackObj);\n\n    if (isGenericCard) {\n        // Pass brand to CardNumber SF\n        const cardObj: SendBrandObject = {\n            brand: passedBrand,\n            enableLuhnCheck: binLookupResponse.supportedBrands[0].enableLuhnCheck !== false,\n            // Only pass the panLength if a) we have one & b) we're not in a switching-between-dual-brands scenario\n            // (because it causes unnecessary callbacks from SF which uses panLength to trigger moving focus to the expiryDate field)\n            ...(binBrandObj?.panLength && !binLookupResponse.isDualBrandSelection && { panLength: binBrandObj?.panLength })\n        };\n        this.sendBrandToCardSF(cardObj);\n\n        // Inform the date related securedFields\n        // - if expiryDatePolicy is 'optional' or 'hidden' they need to set the aria-required attribute / hide themselves\n        this.sendExpiryDatePolicyToSF({ expiryDatePolicy });\n    }\n\n    /**\n     * CHECK IF BRAND CHANGE MEANS FORM IS NOW VALID e.g maestro/bcmc (which don't require cvc) OR bcmc/visa (one of which doesn't require cvc, one of which does)\n     */\n\n    /**\n     * First set the cvcPolicy value on the relevant SecuredFields instance (which will reflect in the cvc field being considered valid,\n     *  as long as it is not in error)...\n     */\n    if (hasOwnProperty(this.state.securedFields, ENCRYPTED_SECURITY_CODE)) {\n        this.state.securedFields[ENCRYPTED_SECURITY_CODE].cvcPolicy = binBrandObj.cvcPolicy;\n    }\n\n    /**\n     * ...then set the expiryDatePolicy...\n     */\n    if (hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_DATE)) {\n        this.state.securedFields[ENCRYPTED_EXPIRY_DATE].expiryDatePolicy = expiryDatePolicy;\n    } else if (hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_MONTH) && hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_YEAR)) {\n        this.state.securedFields[ENCRYPTED_EXPIRY_MONTH].expiryDatePolicy = expiryDatePolicy;\n        this.state.securedFields[ENCRYPTED_EXPIRY_YEAR].expiryDatePolicy = expiryDatePolicy;\n    }\n\n    /**\n     * ...and now re-check if form i.e all the SecuredFields, are valid\n     */\n    this.validateForm();\n}\n"],"names":["sendBrandToCardSF","brandObj","hasOwnProperty","this","state","securedFields","ENCRYPTED_CARD_NUMBER","dataObj","_object_spread_props","_object_spread","txVariant","type","fieldType","numKey","postMessageToIframe","getIframeContentWin","config","loadingContext","sendExpiryDatePolicyToSF","expiryDateObj","ENCRYPTED_EXPIRY_MONTH","ENCRYPTED_EXPIRY_YEAR","ENCRYPTED_EXPIRY_DATE","forEach","key","handleBrandFromBinLookup","binLookupResponse","resetObj","isGenericCard","Object","keys","length","brand","expiryDatePolicy","DATE_POLICY_REQUIRED","processBrand","binBrandObj","supportedBrands","passedBrand","showExpiryDate","DATE_POLICY_HIDDEN","cvcPolicy","cvcText","showSocialSecurityNumber","cardObj","enableLuhnCheck","panLength","isDualBrandSelection","ENCRYPTED_SECURITY_CODE","validateForm"],"mappings":"osCAgBO,SAASA,EAAkBC,GAC9B,GAAIC,EAAeC,KAAKC,MAAMC,cAAeC,GAAwB,CACjE,MAAMC,EAAkBC,EAAAC,EAAA,CACpBC,UAAWP,KAAKC,MAAMO,MACnBV,GAAAA,CACHW,UAAWN,EACXO,OAAQV,KAAKC,MAAMC,cAAcC,GAAuBO,SAE5DC,EAAoBP,EAASQ,EAAoBZ,KAAKC,MAAOE,GAAwBH,KAAKa,OAAOC,eACrG,CACJ,CAEO,SAASC,EAAyBC,IAEjCjB,EAAeC,KAAKC,MAAMC,cAAee,IAA2BlB,EAAeC,KAAKC,MAAMC,cAAegB,GAErE,CAACD,EAAwBC,GAAyB,CAACC,IAEhFC,SAASC,IACpB,MAAMjB,EAAkBC,EAAAC,EAAA,CACpBC,UAAWP,KAAKC,MAAMO,MACnBQ,GAAAA,CACHP,UAAWY,EACXX,OAAQV,KAAKC,MAAMC,cAAcmB,GAAKX,SAE1CC,EAAoBP,EAASQ,EAAoBZ,KAAKC,MAAOoB,GAAMrB,KAAKa,OAAOC,eAAc,GAErG,CAEe,SAASQ,EAAyBC,EAAsCC,GACnF,MAAMC,EAA6C,SAApBzB,KAAKC,MAAMO,KAM1C,IAAKe,IAAsBG,OAAOC,KAAKJ,GAAmBK,OAwBtD,OAvBIH,GAGAzB,KAAKH,kBAAkB,CAAEgC,MAAO,UAEhC7B,KAAKe,yBAAyB,CAAEe,iBAAkBC,KAQ9CP,GACAxB,KAAKgC,aAAa3B,EAAKmB,EAAAA,CAAAA,EAAAA,GAAAA,CAAUf,UAAWN,UAK5B,SAApBH,KAAKC,MAAMO,MAAmBT,EAAeC,KAAKC,MAAMC,cAAeiB,KACvEnB,KAAKC,MAAMC,cAAciB,GAAuBW,iBAAmBC,IAM3E,MAAME,EAA2BV,EAAkBW,gBAAgB,GAE7DC,EAAsBF,EAAYJ,MAGfI,IAAAA,EAAzB,MAAMH,EAA+C,QAA5BG,EAAAA,EAAYH,wBAAZG,IAAAA,EAAAA,GAAgE,IAA/BA,EAAYG,eAA0BL,EAAuBM,EAOzFJ,IAAAA,EAL9B,MAAMnC,EAAmB,CACrB+B,MAAOM,EACPG,UAAWL,EAAYK,UACvBR,mBACAS,QAAS,gBACTC,yBAA8D,QAApCP,EAAAA,EAAYO,oCAAZP,GAAAA,EAC1BxB,UAAWN,GAMf,GAFAH,KAAKgC,aAAalC,GAEd2B,EAAe,CAEf,MAAMgB,EAA2BnC,EAAA,CAC7BuB,MAAOM,EACPO,iBAA0E,IAAzDnB,EAAkBW,gBAAgB,GAAGQ,kBAGlDT,eAAAA,EAAaU,aAAcpB,EAAkBqB,sBAAwB,CAAED,UAAWV,aAAAA,EAAAA,EAAaU,YAEvG3C,KAAKH,kBAAkB4C,GAIvBzC,KAAKe,yBAAyB,CAAEe,oBACpC,CAUI/B,EAAeC,KAAKC,MAAMC,cAAe2C,KACzC7C,KAAKC,MAAMC,cAAc2C,GAAyBP,UAAYL,EAAYK,WAM1EvC,EAAeC,KAAKC,MAAMC,cAAeiB,GACzCnB,KAAKC,MAAMC,cAAciB,GAAuBW,iBAAmBA,EAC5D/B,EAAeC,KAAKC,MAAMC,cAAee,IAA2BlB,EAAeC,KAAKC,MAAMC,cAAegB,KACpHlB,KAAKC,MAAMC,cAAce,GAAwBa,iBAAmBA,EACpE9B,KAAKC,MAAMC,cAAcgB,GAAuBY,iBAAmBA,GAMvE9B,KAAK8C,cACT"}