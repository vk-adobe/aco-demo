{"version":3,"file":"CSF.js","sources":["../../../../../../../src/components/internal/SecuredFields/lib/CSF/CSF.ts"],"sourcesContent":["import AbstractCSF from './AbstractCSF';\nimport { CSFReturnObject, CSFSetupObject, CSFStateObject, CSFThisObject } from './types';\nimport { StylesObject, CardAdditionalSFData, SFFieldType } from '../types';\nimport { BinLookupResponse } from '../../../../Card/types';\nimport { handleConfig } from './extensions/handleConfig';\nimport { configureCallbacks } from './extensions/configureCallbacks';\nimport { handleValidation } from './extensions/handleValidation';\nimport { handleEncryption } from './extensions/handleEncryption';\nimport { createSecuredFields, createNonCardSecuredFields, createCardSecuredFields, setupSecuredField } from './extensions/createSecuredFields';\nimport handleIOSTouchEvents from './extensions/handleIOSTouchEvents';\nimport handleTab from './extensions/handleTab';\nimport handleBrandFromBinLookup, { sendBrandToCardSF, sendExpiryDatePolicyToSF } from './extensions/handleBrandFromBinLookup';\nimport { setFocusOnFrame } from './partials/setFocusOnFrame';\nimport { postMessageToAllIframes } from './partials/postMessageToAllIframes';\nimport processBrand from './partials/processBrand';\nimport { processAutoComplete } from './partials/processAutoComplete';\nimport { handleFocus } from './partials/handleFocus';\nimport { handleIframeConfigFeedback } from './partials/handleIframeConfigFeedback';\nimport { isConfigured } from './partials/isConfigured';\nimport validateForm from './partials/validateForm';\nimport { handleBinValue } from './partials/handleBinValue';\nimport { destroySecuredFields } from './utils/destroySecuredFields';\nimport postMessageToIframe from './utils/iframes/postMessageToIframe';\nimport getIframeContentWin from './utils/iframes/getIframeContentWin';\nimport * as logger from '../utilities/logger';\nimport { selectOne } from '../utilities/dom';\nimport { on } from '../../../../../utils/listenerUtils';\nimport { partial } from '../utilities/commonUtils';\nimport { hasOwnProperty } from '../../../../../utils/hasOwnProperty';\nimport ua from './utils/userAgent';\nimport { SingleBrandResetObject } from '../../SFP/types';\n\nconst notConfiguredWarning = (str = 'You cannot use secured fields') => {\n    logger.warn(`${str} - they are not yet configured. Use the 'onConfigSuccess' callback to know when this has happened.`);\n};\n\nclass CSF extends AbstractCSF {\n    // --\n    constructor(setupObj: CSFSetupObject) {\n        /**\n         * Initialises:\n         *  - this.props = setupObj: CSFSetupObject\n         *\n         * and empty objects for:\n         *  - this.config: CSFConfigObject (populated in handleConfig.ts)\n         *  - this.callbacks: CSFCallbacksConfig (populated in configureCallbacks.ts\n         *  - this.state: CSFStateObject (populated below)\n         */\n        super(setupObj);\n\n        this.state = {\n            /**\n             *  For generic card will always be 'card'.\n             *  For non-generic card will be hardcoded to a particular txVariant e.g. 'mc' or 'visa'\n             *  For other types of SecuredField will be the passed type e.g. 'ach' or 'giftcard'\n             */\n            type: this.props.type,\n            /**\n             *  For generic card will change as shopper types\n             *  For non-generic card will be fixed\n             */\n            brand: this.props.type !== 'card' ? { brand: this.props.type, cvcPolicy: 'required' } : { brand: null, cvcPolicy: 'required' },\n            allValid: undefined,\n            numIframes: 0,\n            originalNumIframes: 0,\n            iframeCount: 0,\n            iframeConfigCount: 0,\n            isConfigured: false,\n            hasSeparateDateFields: false,\n            currentFocusObject: null,\n            registerFieldForIos: false,\n            securedFields: {},\n            isKCP: false\n        } as CSFStateObject;\n\n        // Create object of references to properties on 'this', that can be used to set up the partials\n        const thisObj: CSFThisObject = { csfState: this.state, csfConfig: this.config, csfProps: this.props, csfCallbacks: this.callbacks };\n\n        // Setup 'this' references\n        this.configHandler = handleConfig;\n\n        this.callbacksHandler = configureCallbacks;\n\n        this.validateForm = partial(validateForm, thisObj);\n\n        this.isConfigured = partial(isConfigured, thisObj, this.validateForm);\n        this.handleIframeConfigFeedback = partial(handleIframeConfigFeedback, thisObj, this.isConfigured);\n\n        this.processBrand = partial(processBrand, thisObj);\n\n        this.handleValidation = handleValidation;\n        this.handleEncryption = handleEncryption;\n\n        this.createSecuredFields = createSecuredFields;\n        this.createNonCardSecuredFields = createNonCardSecuredFields;\n        this.createCardSecuredFields = createCardSecuredFields;\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        this.setupSecuredField = setupSecuredField;\n\n        this.postMessageToAllIframes = partial(postMessageToAllIframes, thisObj);\n\n        this.handleIOSTouchEvents = handleIOSTouchEvents.handleTouchend.bind(this);\n        this.touchendListener = handleIOSTouchEvents.touchendListener.bind(this);\n        this.destroyTouchendListener = handleIOSTouchEvents.destroyTouchendListener.bind(this);\n        this.touchstartListener = handleIOSTouchEvents.touchstartListener.bind(this);\n        this.destroyTouchstartListener = handleIOSTouchEvents.destroyTouchstartListener.bind(this);\n\n        this.setFocusOnFrame = partial(setFocusOnFrame, thisObj);\n        this.handleFocus = partial(handleFocus, thisObj, this.handleIOSTouchEvents);\n\n        this.handleSFShiftTab = handleTab.handleSFShiftTab;\n        this.handleShiftTab = handleTab.handleShiftTab;\n\n        this.destroySecuredFields = destroySecuredFields;\n\n        this.processAutoComplete = partial(processAutoComplete, thisObj);\n\n        this.handleBinValue = partial(handleBinValue, thisObj);\n\n        this.handleBrandFromBinLookup = handleBrandFromBinLookup;\n        this.sendBrandToCardSF = sendBrandToCardSF;\n        this.sendExpiryDatePolicyToSF = sendExpiryDatePolicyToSF;\n\n        // Populate config & callbacks objects & create securedFields\n        this.init();\n    }\n\n    private init(): void {\n        this.configHandler(this.props);\n        this.callbacksHandler(this.props.callbacks);\n\n        /**\n         * Create all the securedFields\n         */\n        const numIframes: number = this.createSecuredFields();\n\n        this.state.numIframes = this.state.originalNumIframes = numIframes;\n\n        this.state.isKCP = !!this.props.isKCP;\n\n        /**\n         * Add touchstart listener\n         * re. Disabling arrow keys in iOS\n         */\n        if (ua.__IS_IOS && this.props.shouldDisableIOSArrowKeys) {\n            this.hasGenuineTouchEvents = false;\n            on(document, 'touchstart', this.touchstartListener);\n        }\n    }\n\n    // Expose functions that can be called on the CSF instance\n    public createReturnObject(): CSFReturnObject {\n        // --\n        const returnObj: CSFReturnObject = {\n            // --\n            updateStyles: (pStyleObject: StylesObject): void => {\n                if (this.state.isConfigured) {\n                    this.postMessageToAllIframes({ styleObject: pStyleObject });\n                } else {\n                    logger.warn(\n                        'You cannot update the secured fields styling ' +\n                            \"- they are not yet configured. Use the 'onConfigSuccess' callback to know when this has happened.\"\n                    );\n                }\n            },\n            setFocusOnFrame: (pFieldType: SFFieldType): void => {\n                if (this.state.isConfigured) {\n                    this.setFocusOnFrame(pFieldType);\n                    // Comment in a quick way to test destroying secured fields (also see comment in destroySecuredFields)\n                    // this.destroySecuredFields();\n                } else {\n                    notConfiguredWarning('You cannot set focus on any secured field');\n                }\n            },\n            // For component based implementation - if showValidation function is called on the component use this\n            // function as a way to notify the CSF that a field is in error\n            isValidated: (pFieldType: SFFieldType, code: string): void => {\n                if (this.state.isConfigured) {\n                    if (hasOwnProperty(this.state.securedFields, pFieldType)) {\n                        this.state.securedFields[pFieldType].hasError = true;\n\n                        // If there's not already an errorType, set one\n                        // NOTE: fixes issue in Components where you first validate and then start typing a maestro number\n                        // - w/o this and the corresponding fix in the SecuredField class the maestro PM will never register as valid\n                        if (this.state.securedFields[pFieldType].errorType === '') {\n                            this.state.securedFields[pFieldType].errorType = 'isValidated';\n                        }\n\n                        // Inform iframe\n                        const dataObj: object = {\n                            txVariant: this.state.type,\n                            fieldType: pFieldType,\n                            externalValidation: true,\n                            code,\n                            numKey: this.state.securedFields[pFieldType].numKey\n                        };\n                        postMessageToIframe(dataObj, getIframeContentWin(this.state, pFieldType), this.config.loadingContext);\n                    }\n                } else {\n                    notConfiguredWarning('You cannot set validated on any secured field');\n                }\n            },\n            hasUnsupportedCard: (pFieldType: SFFieldType, code: string): void => {\n                if (this.state.isConfigured) {\n                    if (hasOwnProperty(this.state.securedFields, pFieldType)) {\n                        //\n                        this.state.securedFields[pFieldType].hasError = !!code;\n                        this.state.securedFields[pFieldType].errorType = code;\n\n                        // Inform iframe\n                        const dataObj: object = {\n                            txVariant: this.state.type,\n                            fieldType: pFieldType,\n                            unsupportedCard: !!code,\n                            code,\n                            numKey: this.state.securedFields[pFieldType].numKey\n                        };\n                        postMessageToIframe(dataObj, getIframeContentWin(this.state, pFieldType), this.config.loadingContext);\n                    }\n                } else {\n                    notConfiguredWarning('You cannot set hasUnsupportedCard on any secured field');\n                }\n            },\n            destroy: (): void => {\n                if (this.state.isConfigured) {\n                    this.destroySecuredFields();\n                } else {\n                    notConfiguredWarning('You cannot destroy secured fields');\n                }\n            },\n            brandsFromBinLookup: (binLookupResponse: BinLookupResponse, resetObj: SingleBrandResetObject): void => {\n                if (!this.config.isCreditCardType) return null;\n\n                if (this.state.isConfigured) {\n                    this.handleBrandFromBinLookup(binLookupResponse, resetObj);\n                } else {\n                    notConfiguredWarning('You cannot set pass brands to secured fields');\n                }\n            },\n            addSecuredField: (pFieldType: SFFieldType): void => {\n                const securedField: HTMLElement = selectOne(this.props.rootNode, `[data-cse=\"${pFieldType}\"]`);\n                if (securedField) {\n                    this.state.numIframes += 1;\n                    this.setupSecuredField(securedField);\n                }\n            },\n            removeSecuredField: (pFieldType: SFFieldType): void => {\n                if (this.state.securedFields[pFieldType]) {\n                    this.state.securedFields[pFieldType].destroy();\n                    delete this.state.securedFields[pFieldType];\n                    this.state.numIframes -= 1;\n                    this.state.iframeCount -= 1;\n\n                    const callbackObj: CardAdditionalSFData = { additionalIframeRemoved: true, fieldType: pFieldType, type: this.state.type };\n                    this.callbacks.onAdditionalSFRemoved(callbackObj);\n                }\n            },\n            setKCPStatus: (isKCP: boolean): void => {\n                this.state.isKCP = isKCP;\n            },\n            sfIsOptionalOrHidden: (fieldType: string): boolean => {\n                return this.state.securedFields[fieldType].isOptionalOrHidden();\n            }\n        };\n\n        return returnObj;\n    }\n}\n\nexport default CSF;\n"],"names":["notConfiguredWarning","str","logger","CSF","AbstractCSF","init","this","configHandler","props","callbacksHandler","callbacks","numIframes","createSecuredFields","state","originalNumIframes","isKCP","ua","__IS_IOS","shouldDisableIOSArrowKeys","hasGenuineTouchEvents","on","document","touchstartListener","createReturnObject","updateStyles","pStyleObject","isConfigured","postMessageToAllIframes","styleObject","setFocusOnFrame","pFieldType","isValidated","code","hasOwnProperty","securedFields","hasError","errorType","dataObj","txVariant","type","fieldType","externalValidation","numKey","postMessageToIframe","getIframeContentWin","config","loadingContext","hasUnsupportedCard","unsupportedCard","destroy","destroySecuredFields","brandsFromBinLookup","binLookupResponse","resetObj","isCreditCardType","handleBrandFromBinLookup","addSecuredField","securedField","selectOne","rootNode","setupSecuredField","removeSecuredField","iframeCount","callbackObj","additionalIframeRemoved","onAdditionalSFRemoved","setKCPStatus","sfIsOptionalOrHidden","isOptionalOrHidden","constructor","setupObj","super","brand","cvcPolicy","allValid","undefined","iframeConfigCount","hasSeparateDateFields","currentFocusObject","registerFieldForIos","thisObj","csfState","csfConfig","csfProps","csfCallbacks","handleConfig","configureCallbacks","validateForm","partial","handleIframeConfigFeedback","processBrand","handleValidation","handleEncryption","createNonCardSecuredFields","createCardSecuredFields","handleIOSTouchEvents","handleTouchend","bind","touchendListener","destroyTouchendListener","destroyTouchstartListener","handleFocus","handleSFShiftTab","handleTab","handleShiftTab","processAutoComplete","handleBinValue","sendBrandToCardSF","sendExpiryDatePolicyToSF"],"mappings":"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"}