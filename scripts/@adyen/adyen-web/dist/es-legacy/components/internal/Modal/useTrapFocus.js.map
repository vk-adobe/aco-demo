{"version":3,"file":"useTrapFocus.js","sources":["../../../../../src/components/internal/Modal/useTrapFocus.ts"],"sourcesContent":["import { useEffect, useState } from 'preact/hooks';\n\ntype UseTrapFocusProps = {\n    rootElement?: HTMLElement;\n    /**\n     * Element that must be focused when the hook is executed. If no element is passed, the first focusable child\n     * element of the root element will be focused\n     */\n    focusFirst?: HTMLElement;\n    /**\n     * Can be used to conditionally disable the trap mechanism\n     */\n    shouldTrap?: boolean;\n};\n\nconst KEYCODE_TAB = 9;\nconst FOCUSABLE_ELEMENTS =\n    'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])';\n\n/**\n * Hook used to trap the focus within the specific element and its child nodes.\n */\nconst useTrapFocus = ({ rootElement, focusFirst, shouldTrap = true }: UseTrapFocusProps): void => {\n    const [firstFocusableEl, setFirstFocusableEl] = useState<HTMLElement>(focusFirst);\n\n    useEffect(() => {\n        if (!shouldTrap) return;\n        firstFocusableEl?.focus();\n    }, [firstFocusableEl, shouldTrap]);\n\n    useEffect(() => {\n        if (!shouldTrap) return;\n\n        const focusableEl: NodeListOf<HTMLElement> = rootElement.querySelectorAll<HTMLElement>(FOCUSABLE_ELEMENTS);\n\n        const firstFocusableEl: HTMLElement = focusableEl[0];\n        const lastFocusableEl: HTMLElement = focusableEl[focusableEl.length - 1];\n\n        setFirstFocusableEl(focusFirst || firstFocusableEl);\n\n        const trapFocus = (event: KeyboardEvent): void => {\n            const isTabPressed = event.key === 'Tab' || event.keyCode === KEYCODE_TAB;\n\n            if (!isTabPressed) return;\n\n            if (event.shiftKey && document.activeElement === firstFocusableEl) {\n                lastFocusableEl.focus();\n                event.preventDefault();\n                return;\n            }\n            if (document.activeElement === lastFocusableEl) {\n                firstFocusableEl.focus();\n                event.preventDefault();\n                return;\n            }\n        };\n\n        rootElement.addEventListener('keydown', trapFocus);\n\n        return () => {\n            setFirstFocusableEl(null);\n            rootElement.removeEventListener('keydown', trapFocus);\n        };\n    }, [rootElement, focusFirst, shouldTrap]);\n};\n\nexport { useTrapFocus };\n"],"names":["useTrapFocus","rootElement","focusFirst","shouldTrap","firstFocusableEl","setFirstFocusableEl","useState","useEffect","focus","focusableEl","querySelectorAll","lastFocusableEl","length","trapFocus","event","key","keyCode","shiftKey","document","activeElement","preventDefault","addEventListener","removeEventListener"],"mappings":"uFAeA,MAOMA,EAAe,EAAGC,cAAaC,aAAYC,cAAa,MAC1D,MAAOC,EAAkBC,GAAuBC,EAAsBJ,GAEtEK,GAAU,KACDJ,IACLC,SAAAA,EAAkBI,QAAK,GACxB,CAACJ,EAAkBD,IAEtBI,GAAU,KACN,IAAKJ,EAAY,OAEjB,MAAMM,EAAuCR,EAAYS,iBAhB7D,sNAkBUN,EAAgCK,EAAY,GAC5CE,EAA+BF,EAAYA,EAAYG,OAAS,GAEtEP,EAAoBH,GAAcE,GAElC,MAAMS,EAAaC,IAGf,GAFmC,QAAdA,EAAMC,KA1BnB,IA0BoCD,EAAME,QAIlD,OAAIF,EAAMG,UAAYC,SAASC,gBAAkBf,GAC7CO,EAAgBH,aAChBM,EAAMM,kBAGNF,SAASC,gBAAkBR,GAC3BP,EAAiBI,aACjBM,EAAMM,uBAFV,CAIA,EAKJ,OAFAnB,EAAYoB,iBAAiB,UAAWR,GAEjC,KACHR,EAAoB,MACpBJ,EAAYqB,oBAAoB,UAAWT,EAAAA,CAC/C,GACD,CAACZ,EAAaC,EAAYC,GAAW"}