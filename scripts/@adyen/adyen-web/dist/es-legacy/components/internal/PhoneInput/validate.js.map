{"version":3,"file":"validate.js","sources":["../../../../../src/components/internal/PhoneInput/validate.ts"],"sourcesContent":["import { FormatRules, ValidatorRules } from '../../../utils/Validator/types';\nimport { isEmpty, getFormattingRegEx } from '../../../utils/validator-utils';\n\n// ((+351|00351|351)?)(2\\d{1}|(9(3|6|2|1)))\\d{7} full portuguese phone num regex\n\nconst portugueseRegex = /\\b(2\\d{1}|(9(3|6|2|1)))\\d{7}\\b/; // match 2 + any digit + 7 digits OR 9 + 3|6|2|1 + 7 digits\nconst defaultRegex = /^(\\d){4,}$/; // match >= 4 digits\n\nexport const phoneValidationRules: ValidatorRules = {\n    phoneNumber: {\n        modes: ['blur'],\n        validate: (value, context) => {\n            // TODO improve this switching mechanism *if* we get any more country based regexs\n            const testRegex = context.state.data.phonePrefix === '+351' ? portugueseRegex : defaultRegex;\n\n            return isEmpty(value) ? null : testRegex.test(value);\n        },\n        errorMessage: 'invalidPhoneNumber'\n    },\n    phonePrefix: {\n        modes: ['blur'],\n        validate: phonePrefix => !!phonePrefix,\n        errorMessage: 'invalidCountryCode'\n    }\n};\n\nexport const phoneFormatters: FormatRules = {\n    phoneNumber: {\n        formatterFn: val => val.replace(getFormattingRegEx('^\\\\d', 'g'), '')\n    }\n};\n"],"names":["portugueseRegex","defaultRegex","phoneValidationRules","phoneNumber","modes","validate","value","context","testRegex","state","data","phonePrefix","isEmpty","test","errorMessage","phoneFormatters","formatterFn","val","replace","getFormattingRegEx"],"mappings":"oFAKA,MAAMA,EAAkB,iCAClBC,EAAe,aAERC,EAAuC,CAChDC,YAAa,CACTC,MAAO,CAAC,QACRC,SAAU,CAACC,EAAOC,KAEd,MAAMC,EAA+C,SAAnCD,EAAQE,MAAMC,KAAKC,YAAyBX,EAAkBC,EAEhF,OAAOW,EAAQN,GAAS,KAAOE,EAAUK,KAAKP,EAAAA,EAElDQ,aAAc,sBAElBH,YAAa,CACTP,MAAO,CAAC,QACRC,SAAUM,KAAiBA,EAC3BG,aAAc,uBAITC,EAA+B,CACxCZ,YAAa,CACTa,YAAaC,GAAOA,EAAIC,QAAQC,EAAmB,OAAQ,KAAM"}