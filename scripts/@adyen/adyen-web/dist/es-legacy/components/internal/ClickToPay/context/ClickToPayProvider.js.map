{"version":3,"file":"ClickToPayProvider.js","sources":["../../../../../../src/components/internal/ClickToPay/context/ClickToPayProvider.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { CtpState } from '../services/ClickToPayService';\nimport { ClickToPayContext } from './ClickToPayContext';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { ClickToPayCheckoutPayload, IClickToPayService, IdentityLookupParams } from '../services/types';\nimport ShopperCard from '../models/ShopperCard';\nimport { ClickToPayProps } from '../types';\nimport AdyenCheckoutError from '../../../../core/Errors/AdyenCheckoutError';\nimport { PaymentAmount } from '../../../../types/global-types';\nimport { UIElementStatus } from '../../UIElement/types';\n\ntype ClickToPayProviderRef = {\n    setStatus?(status: UIElementStatus): void;\n};\n\nexport type ClickToPayProviderProps = {\n    isStandaloneComponent: boolean;\n    clickToPayService: IClickToPayService | null;\n    configuration: ClickToPayProps;\n    amount: PaymentAmount;\n    children: any;\n    setClickToPayRef(ref): void;\n    onSubmit(payload: ClickToPayCheckoutPayload): void;\n    onSetStatus(status: UIElementStatus): void;\n    onError(error: AdyenCheckoutError): void;\n};\n\nconst ClickToPayProvider = ({\n    isStandaloneComponent = false,\n    clickToPayService,\n    amount,\n    configuration,\n    children,\n    setClickToPayRef,\n    onSubmit,\n    onSetStatus,\n    onError\n}: ClickToPayProviderProps) => {\n    const [ctpService] = useState<IClickToPayService | null>(clickToPayService);\n    const [ctpState, setCtpState] = useState<CtpState>(clickToPayService?.state || CtpState.NotAvailable);\n    const [isCtpPrimaryPaymentMethod, setIsCtpPrimaryPaymentMethod] = useState<boolean>(true);\n    const [status, setStatus] = useState<UIElementStatus>('ready');\n    const clickToPayRef = useRef<ClickToPayProviderRef>({});\n    const isOnReadyInvoked = useRef<boolean>(false);\n\n    useEffect(() => {\n        setClickToPayRef(clickToPayRef.current);\n        clickToPayRef.current.setStatus = setStatus;\n    }, []);\n\n    useEffect(() => {\n        ctpService?.subscribeOnStateChange(status => setCtpState(status));\n    }, [ctpService]);\n\n    const onReady = useCallback(() => {\n        if (isOnReadyInvoked.current) {\n            return;\n        }\n        configuration.onReady?.();\n        isOnReadyInvoked.current = true;\n    }, [configuration?.onReady]);\n\n    const finishIdentityValidation = useCallback(\n        async (otpValue: string) => {\n            await ctpService?.finishIdentityValidation(otpValue);\n        },\n        [ctpService]\n    );\n\n    const startIdentityValidation = useCallback(async () => {\n        const data = await ctpService?.startIdentityValidation();\n        return data;\n    }, [ctpService]);\n\n    const checkout = useCallback(\n        async (card: ShopperCard) => {\n            return await ctpService?.checkout(card);\n        },\n        [ctpService]\n    );\n\n    const verifyIfShopperIsEnrolled = useCallback(\n        async (shopperIdentity: IdentityLookupParams) => {\n            return await ctpService?.verifyIfShopperIsEnrolled(shopperIdentity);\n        },\n        [ctpService]\n    );\n\n    const logoutShopper = useCallback(async () => {\n        await ctpService?.logout();\n    }, [ctpService]);\n\n    const updateStoreCookiesConsent = useCallback(\n        (shouldStore: boolean) => {\n            ctpService.updateStoreCookiesConsent(shouldStore);\n        },\n        [ctpService]\n    );\n\n    return (\n        <ClickToPayContext.Provider\n            value={{\n                status,\n                onSubmit,\n                onError,\n                onSetStatus,\n                amount,\n                configuration,\n                isStoringCookies: ctpService?.storeCookies,\n                isStandaloneComponent,\n                isCtpPrimaryPaymentMethod,\n                setIsCtpPrimaryPaymentMethod,\n                ctpState,\n                verifyIfShopperIsEnrolled,\n                cards: ctpService?.shopperCards,\n                schemes: ctpService?.schemes,\n                otpMaskedContact: ctpService?.identityValidationData?.maskedShopperContact,\n                otpNetwork: ctpService?.identityValidationData?.selectedNetwork,\n                checkout,\n                logoutShopper,\n                startIdentityValidation,\n                finishIdentityValidation,\n                updateStoreCookiesConsent,\n                onReady\n            }}\n        >\n            {children}\n        </ClickToPayContext.Provider>\n    );\n};\n\nexport default ClickToPayProvider;\n"],"names":["ClickToPayProvider","isStandaloneComponent","clickToPayService","amount","configuration","children","setClickToPayRef","onSubmit","onSetStatus","onError","ctpService","useState","ctpState","setCtpState","state","CtpState","NotAvailable","isCtpPrimaryPaymentMethod","setIsCtpPrimaryPaymentMethod","status","setStatus","clickToPayRef","useRef","isOnReadyInvoked","useEffect","current","subscribeOnStateChange","onReady","useCallback","finishIdentityValidation","async","otpValue","startIdentityValidation","checkout","card","verifyIfShopperIsEnrolled","shopperIdentity","logoutShopper","logout","updateStoreCookiesConsent","shouldStore","h","ClickToPayContext","Provider","value","isStoringCookies","storeCookies","cards","shopperCards","schemes","otpMaskedContact","identityValidationData","maskedShopperContact","otpNetwork","selectedNetwork"],"mappings":"yTA2BMA,MAAAA,EAAqB,EACvBC,yBAAwB,EACxBC,oBACAC,SACAC,gBACAC,WACAC,mBACAC,WACAC,cACAC,kBAgF8BC,EACNA,EA/ExB,MAAOA,GAAcC,EAAoCT,IAClDU,EAAUC,GAAeF,GAAmBT,aAAAA,EAAAA,EAAmBY,QAASC,EAASC,eACjFC,EAA2BC,GAAgCP,GAAkB,IAC7EQ,EAAQC,GAAaT,EAA0B,SAChDU,EAAgBC,EAA8B,IAC9CC,EAAmBD,GAAgB,GAEzCE,GAAU,KACNlB,EAAiBe,EAAcI,SAC/BJ,EAAcI,QAAQL,UAAYA,CAAAA,GACnC,IAEHI,GAAU,KACNd,SAAAA,EAAYgB,wBAAuBP,GAAUN,EAAYM,IAAAA,GAC1D,CAACT,IAEJ,MAAMiB,EAAUC,GAAY,KAIxBxB,IAAAA,EAHImB,EAAiBE,UAGrBrB,QAAAA,EAAAA,EAAcuB,eAAdvB,IAAAA,GAAAA,EAAAA,KAAAA,GACAmB,EAAiBE,SAAU,EAAA,GAC5B,CAACrB,aAAAA,EAAAA,EAAeuB,UAEbE,EAA2BD,GAC7BE,MAAOC,UACGrB,aAAAA,EAAAA,EAAYmB,yBAAyBE,GAAAA,GAE/C,CAACrB,IAGCsB,EAA0BJ,GAAYE,eACrBpB,aAAAA,EAAAA,EAAYsB,4BAEhC,CAACtB,IAEEuB,EAAWL,GACbE,MAAOI,SACUxB,aAAAA,EAAAA,EAAYuB,SAASC,KAEtC,CAACxB,IAGCyB,EAA4BP,GAC9BE,MAAOM,SACU1B,aAAAA,EAAAA,EAAYyB,0BAA0BC,KAEvD,CAAC1B,IAGC2B,EAAgBT,GAAYE,gBACxBpB,aAAAA,EAAAA,EAAY4B,SAAM,GACzB,CAAC5B,IAEE6B,EAA4BX,GAC7BY,IACG9B,EAAW6B,0BAA0BC,EAAAA,GAEzC,CAAC9B,IAGL,OACI+B,EAACC,EAAkBC,SAAQ,CACvBC,MAAO,CACHzB,SACAZ,WACAE,UACAD,cACAL,SACAC,gBACAyC,iBAAkBnC,aAAAA,EAAAA,EAAYoC,aAC9B7C,wBACAgB,4BACAC,+BACAN,WACAuB,4BACAY,MAAOrC,aAAAA,EAAAA,EAAYsC,aACnBC,QAASvC,aAAAA,EAAAA,EAAYuC,QACrBC,iBAAkBxC,SAAkC,QAAlCA,EAAAA,EAAYyC,8BAAZzC,IAAAA,OAAAA,EAAAA,EAAoC0C,qBACtDC,WAAY3C,SAAkC,QAAlCA,EAAAA,EAAYyC,8BAAZzC,IAAAA,OAAAA,EAAAA,EAAoC4C,gBAChDrB,WACAI,gBACAL,0BACAH,2BACAU,4BACAZ,YAGHtB,EAAAA"}