{"version":3,"file":"ClickToPayService.js","sources":["../../../../../../src/components/internal/ClickToPay/services/ClickToPayService.ts"],"sourcesContent":["import { ISrcInitiator } from './sdks/AbstractSrcInitiator';\nimport {\n    CallbackStateSubscriber,\n    IClickToPayService,\n    IdentityLookupParams,\n    ClickToPayCheckoutPayload,\n    SrcProfileWithScheme,\n    SchemesConfiguration,\n    IdentityValidationData\n} from './types';\nimport { ISrcSdkLoader } from './sdks/SrcSdkLoader';\nimport { createCheckoutPayloadBasedOnScheme, createShopperCardsList, CTP_IFRAME_NAME } from './utils';\nimport { SrciIdentityLookupResponse, SrciIsRecognizedResponse, SrcProfile } from './sdks/types';\nimport SrciError from './sdks/SrciError';\nimport { SchemeNames } from './sdks/utils';\nimport ShopperCard from '../models/ShopperCard';\nimport uuidv4 from '../../../../utils/uuid';\nimport AdyenCheckoutError from '../../../../core/Errors/AdyenCheckoutError';\nimport { isFulfilled, isRejected } from '../../../../utils/promise-util';\nimport TimeoutError from '../errors/TimeoutError';\nimport { executeWithTimeout } from './execute-with-timeout';\n\nexport enum CtpState {\n    Idle = 'Idle',\n    Loading = 'Loading',\n    ShopperIdentified = 'ShopperIdentified',\n    OneTimePassword = 'OneTimePassword',\n    Ready = 'Ready',\n    Login = 'Login',\n    NotAvailable = 'NotAvailable'\n}\n\nclass ClickToPayService implements IClickToPayService {\n    private readonly sdkLoader: ISrcSdkLoader;\n    private readonly schemesConfig: SchemesConfiguration;\n    private readonly shopperIdentity?: IdentityLookupParams;\n    private readonly environment: string;\n\n    private readonly onTimeout?: (error: TimeoutError) => void;\n\n    /**\n     * Mandatory unique ID passed to all the networks (Click to Pay systems), used to track user journey\n     */\n    private readonly srciTransactionId: string = uuidv4();\n\n    private sdks: ISrcInitiator[];\n    private validationSchemeSdk: ISrcInitiator = null;\n    private stateSubscriber: CallbackStateSubscriber;\n\n    public state: CtpState = CtpState.Idle;\n    public shopperCards: ShopperCard[] = null;\n    public identityValidationData: IdentityValidationData = null;\n\n    /**\n     * Indicates if the shopper opted for saving cookies during the transaction\n     */\n    public storeCookies = false;\n\n    constructor(\n        schemesConfig: SchemesConfiguration,\n        sdkLoader: ISrcSdkLoader,\n        environment: string,\n        shopperIdentity?: IdentityLookupParams,\n        onTimeout?: (error: TimeoutError) => void\n    ) {\n        this.sdkLoader = sdkLoader;\n        this.schemesConfig = schemesConfig;\n        this.shopperIdentity = shopperIdentity;\n        this.environment = environment;\n        this.onTimeout = onTimeout;\n    }\n\n    public get shopperAccountFound(): boolean {\n        return [CtpState.Ready, CtpState.ShopperIdentified].includes(this.state);\n    }\n\n    public get schemes(): string[] {\n        return this.sdkLoader.schemes;\n    }\n\n    public updateStoreCookiesConsent(shouldStore: boolean) {\n        this.storeCookies = shouldStore;\n    }\n\n    public async initialize(): Promise<void> {\n        this.setState(CtpState.Loading);\n\n        try {\n            this.sdks = await this.sdkLoader.load(this.environment);\n            await this.initiateSdks();\n\n            const { recognized = false, idTokens = null } = await this.verifyIfShopperIsRecognized();\n\n            if (recognized) {\n                await this.getShopperProfile(idTokens);\n                this.setState(CtpState.Ready);\n                return;\n            }\n\n            if (!this.shopperIdentity) {\n                this.setState(CtpState.NotAvailable);\n                return;\n            }\n\n            const { isEnrolled } = await this.verifyIfShopperIsEnrolled(this.shopperIdentity);\n            if (isEnrolled) {\n                this.setState(CtpState.ShopperIdentified);\n                return;\n            }\n\n            this.setState(CtpState.NotAvailable);\n        } catch (error) {\n            if ((error instanceof SrciError && error?.reason === 'REQUEST_TIMEOUT') || error instanceof TimeoutError) {\n                this.handleTimeout(error);\n            } else if (error instanceof SrciError) {\n                console.warn(`Error at ClickToPayService # init: ${error.toString()}`);\n            } else {\n                console.warn(error);\n            }\n\n            this.setState(CtpState.NotAvailable);\n        }\n    }\n\n    /**\n     * Set the callback for notifying when the CtPState changes\n     */\n    public subscribeOnStateChange(callback: CallbackStateSubscriber): void {\n        this.stateSubscriber = callback;\n    }\n\n    /**\n     * Initiates Consumer Identity validation with one Click to Pay System.\n     * The Click to Pay System sends a one-time-password (OTP) to the registered email address or mobile number.\n     **/\n    public async startIdentityValidation(): Promise<void> {\n        if (!this.validationSchemeSdk) {\n            throw Error('startIdentityValidation: No ValidationSDK set for the validation process');\n        }\n        try {\n            const { maskedValidationChannel } = await this.validationSchemeSdk.initiateIdentityValidation();\n\n            this.identityValidationData = {\n                maskedShopperContact: maskedValidationChannel.replace(/\\*/g, 'â€¢'),\n                selectedNetwork: SchemeNames[this.validationSchemeSdk.schemeName]\n            };\n\n            this.setState(CtpState.OneTimePassword);\n        } catch (error: unknown) {\n            // If there is an error when 'startIdentityValidation' (Ex: account is blocked), we reset the scheme chosen to perform this step\n            this.validationSchemeSdk = null;\n            throw error;\n        }\n    }\n\n    /**\n     * Completes the  validation of the Shopper by evaluating the supplied OTP.\n     */\n    public async finishIdentityValidation(otpCode: string): Promise<void> {\n        if (!this.validationSchemeSdk) {\n            throw Error('finishIdentityValidation: No ValidationSDK set for the validation process');\n        }\n\n        const validationToken = await this.validationSchemeSdk.completeIdentityValidation(otpCode);\n        await this.getShopperProfile([validationToken.idToken]);\n        this.setState(CtpState.Ready);\n        this.validationSchemeSdk = null;\n    }\n\n    /**\n     * This method performs checkout using the selected card\n     */\n    public async checkout(card: ShopperCard): Promise<ClickToPayCheckoutPayload> {\n        if (!card) {\n            throw Error('ClickToPayService # checkout: Missing card data');\n        }\n\n        const checkoutSdk = this.sdks.find(sdk => sdk.schemeName === card.scheme);\n\n        const checkoutResponse = await checkoutSdk.checkout({\n            srcDigitalCardId: card.srcDigitalCardId,\n            srcCorrelationId: card.srcCorrelationId,\n            ...(card.isDcfPopupEmbedded && { windowRef: window.frames[CTP_IFRAME_NAME] }),\n            ...(this.storeCookies && { complianceSettings: { complianceResources: [{ complianceType: 'REMEMBER_ME', uri: '' }] } })\n        });\n\n        if (checkoutResponse.dcfActionCode !== 'COMPLETE') {\n            throw new AdyenCheckoutError(\n                'ERROR',\n                `Checkout through Scheme DCF did not complete. DCF Action code received: ${checkoutResponse.dcfActionCode}`\n            );\n        }\n\n        return createCheckoutPayloadBasedOnScheme(card, checkoutResponse, this.environment);\n    }\n\n    /**\n     * Call the 'unbindAppInstance()' method of each SRC SDK in order to remove the shopper cookies.\n     * Besides, it deletes all information stored about the shopper.\n     */\n    public async logout(): Promise<void> {\n        if (!this.sdks) {\n            throw new AdyenCheckoutError('ERROR', 'ClickToPayService is not initialized');\n        }\n\n        try {\n            const logoutPromises = this.sdks.map(sdk => sdk.unbindAppInstance());\n            await Promise.all(logoutPromises);\n        } catch (error) {\n            if (error instanceof SrciError) console.warn(`Error at ClickToPayService # logout: ${error.toString()}`);\n            else console.warn(error);\n        }\n\n        this.shopperCards = null;\n        this.identityValidationData = null;\n        this.validationSchemeSdk = null;\n\n        this.setState(CtpState.Login);\n    }\n\n    /**\n     * Call the 'identityLookup()' method of each SRC SDK in order to verify if the shopper has an account.\n     *\n     * Based on the responses from the Click to Pay Systems, we should do the validation process using the SDK that\n     * that responds faster with 'consumerPresent=true'\n     */\n    public verifyIfShopperIsEnrolled(shopperIdentity: IdentityLookupParams): Promise<{ isEnrolled: boolean }> {\n        const { shopperEmail } = shopperIdentity;\n\n        return new Promise((resolve, reject) => {\n            const lookupPromises = this.sdks.map(sdk => {\n                const identityLookupPromise = executeWithTimeout<SrciIdentityLookupResponse>(\n                    () => sdk.identityLookup({ identityValue: shopperEmail, type: 'email' }),\n                    5000,\n                    new TimeoutError({\n                        source: 'identityLookup',\n                        scheme: sdk.schemeName,\n                        isTimeoutTriggeredBySchemeSdk: false\n                    })\n                );\n\n                return identityLookupPromise\n                    .then(response => {\n                        if (response.consumerPresent && !this.validationSchemeSdk) {\n                            this.setSdkForPerformingShopperIdentityValidation(sdk);\n                            resolve({ isEnrolled: true });\n                        }\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            });\n\n            void Promise.allSettled(lookupPromises).then(() => {\n                resolve({ isEnrolled: false });\n            });\n        });\n    }\n\n    private setState(state: CtpState): void {\n        this.state = state;\n        this.stateSubscriber?.(this.state);\n    }\n\n    private setSdkForPerformingShopperIdentityValidation(sdk: ISrcInitiator) {\n        this.validationSchemeSdk = sdk;\n    }\n\n    private handleTimeout(error: SrciError | TimeoutError) {\n        // If the timeout error was thrown directly by the scheme SDK, we convert it to TimeoutError\n        // If the timeout error was thrown by our internal timeout mechanism, we don't do anything\n        const timeoutError =\n            error instanceof SrciError\n                ? new TimeoutError({ source: error.source, scheme: error.scheme, isTimeoutTriggeredBySchemeSdk: true })\n                : error;\n\n        if (timeoutError.scheme === 'visa') {\n            timeoutError.setCorrelationId(window.VISA_SDK?.correlationId);\n\n            // Visa srciDpaId must be passed when there is no correlation ID available\n            if (window.VISA_SDK?.correlationId) window.VISA_SDK?.buildClientProfile?.();\n            else window.VISA_SDK?.buildClientProfile?.(this.schemesConfig.visa.srciDpaId);\n        }\n        this.onTimeout?.(timeoutError);\n    }\n\n    /**\n     * Based on the given 'idToken', this method goes through each SRCi SDK and fetches the shopper\n     * profile with his cards.\n     */\n    private async getShopperProfile(idTokens: string[]): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const srcProfilesPromises = this.sdks.map(sdk => sdk.getSrcProfile(idTokens));\n\n            void Promise.allSettled(srcProfilesPromises).then(srcProfilesResponses => {\n                if (srcProfilesResponses.every(isRejected)) {\n                    reject(srcProfilesResponses[0].reason);\n                }\n\n                const createProfileWithScheme = (promiseResult: PromiseSettledResult<SrcProfile>, index) =>\n                    isFulfilled(promiseResult) && { ...promiseResult.value, scheme: this.sdks[index].schemeName };\n\n                const profilesWithScheme: SrcProfileWithScheme[] = srcProfilesResponses.map(createProfileWithScheme).filter(profile => !!profile);\n\n                this.shopperCards = createShopperCardsList(profilesWithScheme);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Calls the 'isRecognized()' method of each SRC SDK in order to verify if the shopper is\n     * recognized on the device. The shopper is recognized if he/she has the Cookies stored\n     * on their browser\n     */\n    private verifyIfShopperIsRecognized(): Promise<SrciIsRecognizedResponse> {\n        return new Promise((resolve, reject) => {\n            const promises = this.sdks.map(sdk => {\n                const isRecognizedPromise = executeWithTimeout<SrciIsRecognizedResponse>(\n                    () => sdk.isRecognized(),\n                    5000,\n                    new TimeoutError({\n                        source: 'isRecognized',\n                        scheme: sdk.schemeName,\n                        isTimeoutTriggeredBySchemeSdk: false\n                    })\n                );\n\n                return isRecognizedPromise\n                    .then(response => {\n                        if (response.recognized) resolve(response);\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            });\n\n            // If the 'resolve' didn't happen until this point, then shopper is not recognized\n            void Promise.allSettled(promises).then(() => {\n                resolve({ recognized: false });\n            });\n        });\n    }\n\n    private initiateSdks(): Promise<void[]> {\n        const initPromises = this.sdks.map(sdk => {\n            const cfg = this.schemesConfig[sdk.schemeName];\n\n            return executeWithTimeout<void>(\n                () => sdk.init(cfg, this.srciTransactionId),\n                5000,\n                new TimeoutError({\n                    source: 'init',\n                    scheme: sdk.schemeName,\n                    isTimeoutTriggeredBySchemeSdk: false\n                })\n            );\n        });\n\n        return Promise.all(initPromises);\n    }\n}\n\nexport default ClickToPayService;\n"],"names":["CtpState","ClickToPayService","shopperAccountFound","includes","this","state","schemes","sdkLoader","updateStoreCookiesConsent","shouldStore","storeCookies","initialize","setState","sdks","load","environment","initiateSdks","recognized","idTokens","verifyIfShopperIsRecognized","getShopperProfile","shopperIdentity","isEnrolled","verifyIfShopperIsEnrolled","error","SrciError","reason","TimeoutError","handleTimeout","console","warn","toString","subscribeOnStateChange","callback","stateSubscriber","startIdentityValidation","validationSchemeSdk","Error","maskedValidationChannel","initiateIdentityValidation","identityValidationData","maskedShopperContact","replace","selectedNetwork","SchemeNames","schemeName","finishIdentityValidation","otpCode","validationToken","completeIdentityValidation","idToken","checkout","card","checkoutSdk","find","sdk","scheme","checkoutResponse","_object_spread","srcDigitalCardId","srcCorrelationId","isDcfPopupEmbedded","windowRef","window","frames","CTP_IFRAME_NAME","complianceSettings","complianceResources","complianceType","uri","dcfActionCode","AdyenCheckoutError","createCheckoutPayloadBasedOnScheme","logout","logoutPromises","map","unbindAppInstance","Promise","all","shopperCards","shopperEmail","resolve","reject","lookupPromises","executeWithTimeout","identityLookup","identityValue","type","source","isTimeoutTriggeredBySchemeSdk","then","response","consumerPresent","setSdkForPerformingShopperIdentityValidation","catch","allSettled","_this_stateSubscriber","call","_this_onTimeout","timeoutError","setCorrelationId","VISA_SDK","correlationId","buildClientProfile","schemesConfig","visa","srciDpaId","onTimeout","srcProfilesPromises","getSrcProfile","srcProfilesResponses","every","isRejected","profilesWithScheme","promiseResult","index","isFulfilled","_object_spread_props","value","filter","profile","createShopperCardsList","promises","isRecognized","initPromises","cfg","init","srciTransactionId","constructor","_define_property","uuidv4"],"mappings":"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"}