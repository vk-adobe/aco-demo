{"version":3,"file":"utils.js","sources":["../../../../../../src/components/internal/ClickToPay/services/utils.ts"],"sourcesContent":["import { CardTypes, ClickToPayCheckoutPayload, SrcProfileWithScheme } from './types';\nimport { SrciCheckoutResponse } from './sdks/types';\nimport ShopperCard from '../models/ShopperCard';\nimport SrciError from './sdks/SrciError';\n\nexport const CTP_IFRAME_NAME = 'ctpIframe';\n\n/**\n * Creates the payload for the /payments call\n */\nfunction createCheckoutPayloadBasedOnScheme(\n    card: ShopperCard,\n    srciCheckoutResponse: SrciCheckoutResponse,\n    environment: string\n): ClickToPayCheckoutPayload {\n    const { scheme, tokenId, srcDigitalCardId, srcCorrelationId } = card;\n\n    switch (scheme) {\n        case 'visa':\n            /**\n             * For test environment, we are using hardcoded tokenId\n             */\n            return tokenId\n                ? {\n                      srcScheme: scheme,\n                      srcCorrelationId,\n                      srcTokenReference: environment.toLowerCase().includes('live') ? tokenId : '987654321'\n                  }\n                : { srcScheme: scheme, srcCheckoutPayload: srciCheckoutResponse.checkoutResponse, srcCorrelationId };\n        case 'mc':\n        default:\n            return { srcScheme: scheme, srcDigitalCardId, srcCorrelationId };\n    }\n}\n\nfunction createShopperMaskedCardsData(memo: ShopperCard[], srcProfile: SrcProfileWithScheme): ShopperCard[] {\n    const { profiles, srcCorrelationId } = srcProfile;\n\n    const cards: ShopperCard[] = profiles.reduce((memo: ShopperCard[], profile) => {\n        const profileCards: ShopperCard[] = profile.maskedCards.map(maskedCard => new ShopperCard(maskedCard, srcProfile.scheme, srcCorrelationId));\n        return [...memo, ...profileCards];\n    }, []);\n\n    return [...memo, ...cards];\n}\n\nfunction sortCardByLastTimeUsed(card1: ShopperCard, card2: ShopperCard) {\n    return new Date(card2.dateOfCardLastUsed).getTime() - new Date(card1.dateOfCardLastUsed).getTime();\n}\n\nfunction sortCardByLastTimeCreated(card1: ShopperCard, card2: ShopperCard) {\n    return new Date(card2.dateOfCardCreated).getTime() - new Date(card1.dateOfCardCreated).getTime();\n}\n\nfunction splitAvailableAndExpiredCards(memo: CardTypes, card: ShopperCard): CardTypes {\n    if (card.isExpired) memo.expiredCards.push(card);\n    else memo.availableCards.push(card);\n    return memo;\n}\n\nfunction splitUnusedAndUsedCards(memo: { unusedCards: ShopperCard[]; usedCards: ShopperCard[] }, card: ShopperCard) {\n    if (card.dateOfCardLastUsed) memo.usedCards.push(card);\n    else memo.unusedCards.push(card);\n    return memo;\n}\n\n/**\n * Creates the Shopper card list. The available cards are placed before the expired cards\n */\nfunction createShopperCardsList(srcProfiles: SrcProfileWithScheme[]): ShopperCard[] {\n    const cards: ShopperCard[] = srcProfiles.reduce(createShopperMaskedCardsData, []);\n    const { availableCards, expiredCards } = cards.reduce(splitAvailableAndExpiredCards, { availableCards: [], expiredCards: [] });\n    const { unusedCards, usedCards } = availableCards.reduce(splitUnusedAndUsedCards, { unusedCards: [], usedCards: [] });\n\n    return [...usedCards.sort(sortCardByLastTimeUsed), ...unusedCards.sort(sortCardByLastTimeCreated), ...expiredCards.sort(sortCardByLastTimeUsed)];\n}\n\nfunction isSrciError(error: unknown): error is SrciError {\n    if ((error as SrciError).reason) return true;\n    return false;\n}\n\nexport { createShopperCardsList, createCheckoutPayloadBasedOnScheme, isSrciError };\n"],"names":["CTP_IFRAME_NAME","createCheckoutPayloadBasedOnScheme","card","srciCheckoutResponse","environment","scheme","tokenId","srcDigitalCardId","srcCorrelationId","srcScheme","srcTokenReference","toLowerCase","includes","srcCheckoutPayload","checkoutResponse","createShopperMaskedCardsData","memo","srcProfile","profiles","cards","reduce","profile","maskedCards","map","maskedCard","ShopperCard","sortCardByLastTimeUsed","card1","card2","Date","dateOfCardLastUsed","getTime","sortCardByLastTimeCreated","dateOfCardCreated","splitAvailableAndExpiredCards","isExpired","expiredCards","push","availableCards","splitUnusedAndUsedCards","usedCards","unusedCards","createShopperCardsList","srcProfiles","sort","isSrciError","error","reason"],"mappings":"wCAKO,MAAMA,EAAkB,YAK/B,SAASC,EACLC,EACAC,EACAC,GAEA,MAAMC,OAAEA,EAAMC,QAAEA,EAAOC,iBAAEA,EAAgBC,iBAAEA,GAAqBN,EAEhE,MACS,SADDG,EAKOC,EACD,CACIG,UAAWJ,EACXG,mBACAE,kBAAmBN,EAAYO,cAAcC,SAAS,QAAUN,EAAU,aAE9E,CAAEG,UAAWJ,EAAQQ,mBAAoBV,EAAqBW,iBAAkBN,oBAG/E,CAAEC,UAAWJ,EAAQE,mBAAkBC,mBAE1D,CAEA,SAASO,EAA6BC,EAAqBC,GACvD,MAAMC,SAAEA,EAAQV,iBAAEA,GAAqBS,EAEjCE,EAAuBD,EAASE,QAAO,CAACJ,EAAqBK,IAExD,IAAIL,KADyBK,EAAQC,YAAYC,KAAIC,GAAc,IAAIC,EAAYD,EAAYP,EAAWZ,OAAQG,OAE1H,IAEH,MAAO,IAAIQ,KAASG,EACxB,CAEA,SAASO,EAAuBC,EAAoBC,GAChD,OAAO,IAAIC,KAAKD,EAAME,oBAAoBC,UAAY,IAAIF,KAAKF,EAAMG,oBAAoBC,SAC7F,CAEA,SAASC,EAA0BL,EAAoBC,GACnD,OAAO,IAAIC,KAAKD,EAAMK,mBAAmBF,UAAY,IAAIF,KAAKF,EAAMM,mBAAmBF,SAC3F,CAEA,SAASG,EAA8BlB,EAAiBd,GAGpD,OAFIA,EAAKiC,UAAWnB,EAAKoB,aAAaC,KAAKnC,GACtCc,EAAKsB,eAAeD,KAAKnC,GACvBc,CACX,CAEA,SAASuB,EAAwBvB,EAAgEd,GAG7F,OAFIA,EAAK4B,mBAAoBd,EAAKwB,UAAUH,KAAKnC,GAC5Cc,EAAKyB,YAAYJ,KAAKnC,GACpBc,CACX,CAKA,SAAS0B,EAAuBC,GAC5B,MAAMxB,EAAuBwB,EAAYvB,OAAOL,EAA8B,KACxEuB,eAAEA,EAAcF,aAAEA,GAAiBjB,EAAMC,OAAOc,EAA+B,CAAEI,eAAgB,GAAIF,aAAc,MACnHK,YAAEA,EAAWD,UAAEA,GAAcF,EAAelB,OAAOmB,EAAyB,CAAEE,YAAa,GAAID,UAAW,KAEhH,MAAO,IAAIA,EAAUI,KAAKlB,MAA4Be,EAAYG,KAAKZ,MAA+BI,EAAaQ,KAAKlB,GAC5H,CAEA,SAASmB,EAAYC,GACjB,QAAIA,EAAqBC,MAE7B"}