{"version":3,"file":"SrcSdkLoader.js","sources":["../../../../../../../src/components/internal/ClickToPay/services/sdks/SrcSdkLoader.ts"],"sourcesContent":["import { ISrcInitiator } from './AbstractSrcInitiator';\nimport VisaSdk from './VisaSdk';\nimport MastercardSdk from './MastercardSdk';\nimport { CustomSdkConfiguration } from './types';\nimport AdyenCheckoutError from '../../../../../core/Errors/AdyenCheckoutError';\nimport { isFulfilled, isRejected } from '../../../../../utils/promise-util';\n\nconst sdkMap: Record<string, typeof VisaSdk | typeof MastercardSdk | null> = {\n    visa: VisaSdk,\n    mc: MastercardSdk,\n    default: null\n};\n\nconst getSchemeSdk = (scheme: string, environment: string, customConfig: CustomSdkConfiguration): ISrcInitiator | null => {\n    const SchemeSdkClass = sdkMap[scheme] || sdkMap.default;\n    return SchemeSdkClass ? new SchemeSdkClass(environment, customConfig) : null;\n};\n\nexport interface ISrcSdkLoader {\n    load(environment: string): Promise<ISrcInitiator[]>;\n    schemes: string[];\n}\n\nclass SrcSdkLoader implements ISrcSdkLoader {\n    public readonly schemes: string[];\n    private readonly customSdkConfiguration: CustomSdkConfiguration;\n\n    constructor(schemes: string[], { dpaLocale = 'en_US', dpaPresentationName = '' }) {\n        this.schemes = schemes;\n        this.customSdkConfiguration = { dpaLocale, dpaPresentationName };\n    }\n\n    public async load(environment: string): Promise<ISrcInitiator[]> {\n        if (!this.schemes || this.schemes.length === 0) {\n            throw new AdyenCheckoutError('ERROR', 'ClickToPay -> SrcSdkLoader: There are no schemes set to be loaded');\n        }\n\n        return new Promise((resolve, reject) => {\n            const sdks: ISrcInitiator[] = this.schemes.map(scheme => getSchemeSdk(scheme, environment, this.customSdkConfiguration));\n            const loadScriptPromises = sdks.map(sdk => sdk.loadSdkScript());\n\n            void Promise.allSettled(loadScriptPromises).then(loadScriptResponses => {\n                if (loadScriptResponses.every(isRejected)) {\n                    reject(\n                        new AdyenCheckoutError('ERROR', `ClickToPay -> SrcSdkLoader # Unable to load network schemes: ${this.schemes.toString()}`)\n                    );\n                }\n\n                const sdksLoaded = sdks.filter((sdk, index) => isFulfilled(loadScriptResponses[index]));\n\n                resolve(sdksLoaded);\n            });\n        });\n    }\n}\n\nexport default SrcSdkLoader;\n"],"names":["sdkMap","visa","VisaSdk","mc","MastercardSdk","default","SrcSdkLoader","load","environment","this","schemes","length","AdyenCheckoutError","Promise","resolve","reject","sdks","map","scheme","customConfig","SchemeSdkClass","getSchemeSdk","customSdkConfiguration","loadScriptPromises","sdk","loadSdkScript","allSettled","then","loadScriptResponses","every","isRejected","toString","sdksLoaded","filter","index","isFulfilled","constructor","dpaLocale","dpaPresentationName","_define_property"],"mappings":"yUAOA,MAAMA,EAAuE,CACzEC,KAAMC,EACNC,GAAIC,EACJC,QAAS,MAab,MAAMC,EASF,UAAaC,CAAKC,GACd,IAAKC,KAAKC,SAAmC,IAAxBD,KAAKC,QAAQC,OAC9B,MAAM,IAAIC,EAAmB,QAAS,qEAG1C,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAwBP,KAAKC,QAAQO,KAAIC,GAzBtC,EAACA,EAAgBV,EAAqBW,KACvD,MAAMC,EAAiBpB,EAAOkB,IAAWlB,EAAOK,QAChD,OAAOe,EAAiB,IAAIA,EAAeZ,EAAaW,GAAgB,IAAA,EAuBPE,CAAaH,EAAQV,EAAaC,KAAKa,0BAC1FC,EAAqBP,EAAKC,KAAIO,GAAOA,EAAIC,kBAE1CZ,QAAQa,WAAWH,GAAoBI,MAAKC,IACzCA,EAAoBC,MAAMC,IAC1Bf,EACI,IAAIH,EAAmB,QAAS,gEAAgEH,KAAKC,QAAQqB,eAIrH,MAAMC,EAAahB,EAAKiB,QAAO,CAACT,EAAKU,IAAUC,EAAYP,EAAoBM,MAE/EpB,EAAQkB,EAAAA,GACZ,GAER,CA1BAI,WAAAA,CAAY1B,GAAmB2B,UAAEA,EAAY,QAAOC,oBAAEA,EAAsB,KAH5EC,EAAA9B,KAAgBC,eAAhB,GACA6B,EAAA9B,KAAiBa,8BAAjB,GAGIb,KAAKC,QAAUA,EACfD,KAAKa,uBAAyB,CAAEe,YAAWC,sBAC/C"}