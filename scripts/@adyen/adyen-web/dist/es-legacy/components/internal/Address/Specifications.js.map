{"version":3,"file":"Specifications.js","sources":["../../../../../src/components/internal/Address/Specifications.ts"],"sourcesContent":["import { AddressSchema, AddressSpecifications, StringObject } from './types';\nimport { ADDRESS_SPECIFICATIONS } from './constants';\nimport { AddressField } from '../../../types/global-types';\n\nconst SCHEMA_MAX_DEPTH = 2;\n\nclass Specifications {\n    private specifications: AddressSpecifications;\n\n    constructor(specifications?) {\n        this.specifications = { ...ADDRESS_SPECIFICATIONS, ...specifications };\n    }\n\n    /**\n     * Checks if a certain country has a dataset.\n     * @param country - The selected country\n     * @returns Boolean\n     */\n    countryHasDataset(country: string): boolean {\n        return !!this.specifications?.[country]?.hasDataset;\n    }\n\n    /**\n     * Checks if a certain country has the passed field in their optional fields array.\n     * @param country - The selected country\n     * @param fieldName - The field to be checked\n     * @returns Boolean\n     */\n    countryHasOptionalField(country: string, fieldName: string): boolean {\n        return !!this.specifications?.[country]?.optionalFields?.includes(fieldName as any);\n    }\n\n    /**\n     * Returns the address schema of the selected country or the default address schema.\n     * @param country - The selected country\n     * @returns AddressSchema\n     */\n    getAddressSchemaForCountry(country: string): AddressSchema {\n        return this.specifications?.[country]?.schema || this.specifications.default.schema;\n    }\n\n    /**\n     * Returns the address labels of the selected country or the default address labels.\n     * @param country - The selected country\n     * @returns StringObject\n     */\n    getAddressLabelsForCountry(country: string): StringObject {\n        return this.specifications?.[country]?.labels || this.specifications.default.labels;\n    }\n\n    /**\n     * Returns the optional fields of the selected country or the default optional fields.\n     * @param country - The selected country\n     * @returns Optional fields array\n     */\n    getOptionalFieldsForCountry(country: string): string[] {\n        return this.specifications?.[country]?.optionalFields || this.specifications.default?.optionalFields || [];\n    }\n\n    /**\n     * Returns the key for a field of the passed country or the default key for that field.\n     * @param fieldName - The field to be searched\n     * @param country - The selected country\n     */\n    getKeyForField(fieldName: string, country: string): string {\n        return this.specifications?.[country]?.labels?.[fieldName] || this.specifications?.default?.labels?.[fieldName] || fieldName;\n    }\n\n    /**\n     * Returns the placeholder key for a field of the passed country or the default key for that field.\n     * @param fieldName - The field to be searched\n     * @param country - The selected country\n     */\n    getPlaceholderKeyForField(fieldName: string, country: string): string {\n        return this.specifications?.[country]?.placeholders?.[fieldName] || this.specifications?.default?.placeholders?.[fieldName];\n    }\n\n    /**\n     * Returns an array with the address schema of the selected country or the default address schema\n     * Flat version of getAddressSchemaForCountry\n     * @param country - The selected country\n     * @returns Array\n     */\n    getAddressSchemaForCountryFlat(country: string): AddressField[] {\n        return this.getAddressSchemaForCountry(country)\n            .flat(SCHEMA_MAX_DEPTH)\n            .filter((element): element is AddressField => typeof element === 'string');\n    }\n}\n\nexport default Specifications;\n"],"names":["Specifications","countryHasDataset","country","_this_specifications_country","_this_specifications","this","specifications","hasDataset","countryHasOptionalField","fieldName","_this_specifications_country_optionalFields","optionalFields","includes","getAddressSchemaForCountry","schema","default","getAddressLabelsForCountry","labels","getOptionalFieldsForCountry","_this_specifications_default","getKeyForField","_this_specifications_country_labels","_this_specifications_default_labels","_this_specifications1","getPlaceholderKeyForField","_this_specifications_country_placeholders","_this_specifications_default_placeholders","placeholders","getAddressSchemaForCountryFlat","flat","filter","element","constructor","_define_property","_object_spread","ADDRESS_SPECIFICATIONS"],"mappings":"gLAMA,MAAMA,EAYFC,iBAAAA,CAAkBC,OACLC,EAAAC,EAAT,SAA4B,QAAnBA,EAAAC,KAAKC,sBAAL,IAAAF,GAAA,QAAAD,EAAAC,EAAsBF,UAAtB,IAAAC,OAAA,EAAAA,EAAgCI,WAC7C,CAQAC,uBAAAA,CAAwBN,EAAiBO,GAC5B,IAAAC,EAAAP,EAAAC,EAAT,SAA4B,QAAnBA,EAAAC,KAAKC,0BAALF,GAA8B,QAA9BD,EAAAC,EAAsBF,cAAtBC,GAAA,QAAAO,EAAAP,EAAgCQ,sBAAhC,IAAAD,SAAAA,EAAgDE,SAASH,GACtE,CAOAI,0BAAAA,CAA2BX,OAChBC,EAAAC,EAAP,OAAO,QAAAA,EAAAC,KAAKC,sBAAL,IAAAF,WAAAD,EAAAC,EAAsBF,UAAtB,IAAAC,OAAA,EAAAA,EAAgCW,SAAUT,KAAKC,eAAeS,QAAQD,MACjF,CAOAE,0BAAAA,CAA2Bd,OAChBC,EAAAC,EAAP,OAAO,QAAAA,EAAAC,KAAKC,sBAAL,IAAAF,WAAAD,EAAAC,EAAsBF,UAAtB,IAAAC,OAAA,EAAAA,EAAgCc,SAAUZ,KAAKC,eAAeS,QAAQE,MACjF,CAOAC,2BAAAA,CAA4BhB,GACjB,IAAAC,EAAAC,EAAkDe,EAAzD,OAAO,QAAAf,EAAAC,KAAKC,sBAAL,IAAAF,GAAA,QAAAD,EAAAC,EAAsBF,UAAtB,IAAAC,OAAA,EAAAA,EAAgCQ,kBAA6C,QAA3BQ,EAAAd,KAAKC,eAAeS,eAApB,IAAAI,OAAA,EAAAA,EAA6BR,iBAAkB,EAC5G,CAOAS,cAAAA,CAAeX,EAAmBP,OACvBmB,EAAAlB,EAAAC,EAAuDkB,EAAAH,EAAAI,EAA9D,OAA0B,QAAnBnB,EAAAC,KAAKC,0BAALF,WAAAD,EAAAC,EAAsBF,UAAtB,IAAAC,GAAsC,QAAtCkB,EAAAlB,EAAgCc,kBAAhCI,SAAAA,EAAyCZ,MAAc,QAAAc,EAAAlB,KAAKC,sBAAL,IAAAiB,WAAAJ,EAAAI,EAAqBR,eAArB,IAAAI,GAAoC,QAApCG,EAAAH,EAA8BF,kBAA9BK,OAAA,EAAAA,EAAuCb,KAAcA,CACvH,CAOAe,yBAAAA,CAA0Bf,EAAmBP,OAClCuB,EAAAtB,EAAAC,EAA6DsB,EAAAP,EAAAI,EAApE,OAA0B,QAAnBnB,EAAAC,KAAKC,0BAALF,WAAAD,EAAAC,EAAsBF,UAAtB,IAAAC,GAA4C,QAA5CsB,EAAAtB,EAAgCwB,wBAAhCF,SAAAA,EAA+ChB,MAAc,QAAAc,EAAAlB,KAAKC,sBAAL,IAAAiB,GAAA,QAAAJ,EAAAI,EAAqBR,eAArB,IAAAI,WAAAO,EAAAP,EAA8BQ,oBAA9B,IAAAD,OAAA,EAAAA,EAA6CjB,GACrH,CAQAmB,8BAAAA,CAA+B1B,GAC3B,OAAOG,KAAKQ,2BAA2BX,GAClC2B,KAjFY,GAkFZC,QAAQC,GAAwD,iBAAZA,GAC7D,CA9EAC,WAAAA,CAAY1B,GAFZ2B,EAAA5B,KAAQC,sBAAR,GAGID,KAAKC,qVAAiB4B,CAAA,CAAA,EAAKC,EAA2B7B,EAC1D"}