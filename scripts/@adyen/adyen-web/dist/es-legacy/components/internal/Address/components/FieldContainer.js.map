{"version":3,"file":"FieldContainer.js","sources":["../../../../../../src/components/internal/Address/components/FieldContainer.tsx"],"sourcesContent":["import { h } from 'preact';\nimport Field from '../../FormFields/Field';\nimport StateField from './StateField';\nimport CountryField from './CountryField';\nimport { AddressStateError, FieldContainerProps } from '../types';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport Language from '../../../../language/Language';\nimport InputText from '../../FormFields/InputText';\n\nfunction getErrorMessage(errors: AddressStateError, fieldName: string, i18n: Language, label: string): string | boolean {\n    if (typeof errors[fieldName]?.errorMessage === 'object') {\n        const { translationKey, translationObject } = errors[fieldName].errorMessage;\n        return i18n.get(translationKey, translationObject);\n    }\n    // Default error msg: Enter the [label name]\n    const errorMsg = i18n.get(errors[fieldName]?.errorMessage, { values: { label: label.toLowerCase() } });\n    return errorMsg || !!errors[fieldName];\n}\n\n/**\n * USAGE: Specifically defined as a util to provide a wrapper for fields created within the Address component\n *\n * NOT TO BE USED: if you just want to add a Country or State dropdown outside of an Address component\n * - then you should implement <CountryField> or <StateField> directly\n */\nfunction FieldContainer(props: FieldContainerProps) {\n    const { i18n } = useCoreContext();\n    const { classNameModifiers = [], data, errors, valid, fieldName, onInput, onBlur, trimOnBlur, maxLength, disabled } = props;\n\n    const value: string = data[fieldName];\n    const selectedCountry: string = data.country;\n    const isOptional: boolean = props.specifications.countryHasOptionalField(selectedCountry, fieldName);\n    const labelKey: string = props.specifications.getKeyForField(fieldName, selectedCountry);\n    const optionalLabel = isOptional ? ` ${i18n.get('field.title.optional')}` : '';\n    const label = `${i18n.get(labelKey)}${optionalLabel}`;\n    const errorMessage = getErrorMessage(errors, fieldName, i18n, label);\n\n    switch (fieldName) {\n        case 'country':\n            return (\n                <CountryField\n                    allowedCountries={props.allowedCountries}\n                    classNameModifiers={classNameModifiers}\n                    label={label}\n                    errorMessage={errorMessage}\n                    onDropdownChange={props.onDropdownChange}\n                    value={value}\n                    required={!isOptional}\n                />\n            );\n        case 'stateOrProvince':\n            return (\n                <StateField\n                    classNameModifiers={classNameModifiers}\n                    label={label}\n                    errorMessage={errorMessage}\n                    onDropdownChange={props.onDropdownChange}\n                    selectedCountry={selectedCountry}\n                    specifications={props.specifications}\n                    value={value}\n                    required={!isOptional}\n                />\n            );\n        default:\n            return (\n                <Field\n                    label={label}\n                    classNameModifiers={classNameModifiers}\n                    errorMessage={errorMessage}\n                    isValid={valid[fieldName]}\n                    name={fieldName}\n                    i18n={i18n}\n                    onFocus={e => props.onFieldFocusAnalytics(fieldName, e)}\n                    onBlur={e => props.onFieldBlurAnalytics(fieldName, e)}\n                >\n                    <InputText\n                        name={fieldName}\n                        classNameModifiers={classNameModifiers}\n                        value={value}\n                        onInput={onInput}\n                        onBlur={onBlur}\n                        maxlength={maxLength}\n                        trimOnBlur={trimOnBlur}\n                        disabled={disabled}\n                        required={!isOptional}\n                    />\n                </Field>\n            );\n    }\n}\n\nexport default FieldContainer;\n"],"names":["FieldContainer","props","i18n","useCoreContext","classNameModifiers","data","errors","valid","fieldName","onInput","onBlur","trimOnBlur","maxLength","disabled","value","selectedCountry","country","isOptional","specifications","countryHasOptionalField","labelKey","getKeyForField","optionalLabel","get","label","errorMessage","translationKey","translationObject","values","toLowerCase","getErrorMessage","h","CountryField","allowedCountries","onDropdownChange","required","StateField","Field","isValid","name","onFocus","e","onFieldFocusAnalytics","onFieldBlurAnalytics","InputText","maxlength"],"mappings":"iTAyBA,SAASA,EAAeC,GACpB,MAAMC,KAAEA,GAASC,KACXC,mBAAEA,EAAqB,GAAEC,KAAEA,EAAIC,OAAEA,EAAMC,MAAEA,EAAKC,UAAEA,EAASC,QAAEA,EAAOC,OAAEA,EAAMC,WAAEA,EAAUC,UAAEA,EAASC,SAAEA,GAAaZ,EAEhHa,EAAgBT,EAAKG,GACrBO,EAA0BV,EAAKW,QAC/BC,EAAsBhB,EAAMiB,eAAeC,wBAAwBJ,EAAiBP,GACpFY,EAAmBnB,EAAMiB,eAAeG,eAAeb,EAAWO,GAClEO,EAAgBL,EAAa,IAAIf,EAAKqB,IAAI,0BAA4B,GACtEC,EAAQ,GAAGtB,EAAKqB,IAAIH,KAAYE,IAChCG,EA1BV,SAAyBnB,EAA2BE,EAAmBN,EAAgBsB,OACxElB,EAKeA,EAL1B,GAA+C,yBAApCA,EAAAA,EAAOE,UAAPF,IAAAA,OAAAA,EAAAA,EAAmBmB,cAA2B,CACrD,MAAMC,eAAEA,EAAcC,kBAAEA,GAAsBrB,EAAOE,GAAWiB,aAChE,OAAOvB,EAAKqB,IAAIG,EAAgBC,EACpC,CAGA,OADiBzB,EAAKqB,IAAIjB,QAAAA,EAAAA,EAAOE,UAAPF,IAAAA,OAAAA,EAAAA,EAAmBmB,aAAc,CAAEG,OAAQ,CAAEJ,MAAOA,EAAMK,oBAC/DvB,EAAOE,EAChC,CAkByBsB,CAAgBxB,EAAQE,EAAWN,EAAMsB,GAE9D,OAAQhB,GACJ,IAAK,UACD,OACIuB,EAACC,EAAAA,CACGC,iBAAkBhC,EAAMgC,iBACxB7B,mBAAoBA,EACpBoB,MAAOA,EACPC,aAAcA,EACdS,iBAAkBjC,EAAMiC,iBACxBpB,MAAOA,EACPqB,UAAWlB,IAGvB,IAAK,kBACD,OACIc,EAACK,EAAAA,CACGhC,mBAAoBA,EACpBoB,MAAOA,EACPC,aAAcA,EACdS,iBAAkBjC,EAAMiC,iBACxBnB,gBAAiBA,EACjBG,eAAgBjB,EAAMiB,eACtBJ,MAAOA,EACPqB,UAAWlB,IAGvB,QACI,OACIc,EAACM,EAAAA,CACGb,MAAOA,EACPpB,mBAAoBA,EACpBqB,aAAcA,EACda,QAAS/B,EAAMC,GACf+B,KAAM/B,EACNN,KAAMA,EACNsC,QAASC,GAAKxC,EAAMyC,sBAAsBlC,EAAWiC,GACrD/B,OAAQ+B,GAAKxC,EAAM0C,qBAAqBnC,EAAWiC,IAEnDV,EAACa,EAAAA,CACGL,KAAM/B,EACNJ,mBAAoBA,EACpBU,MAAOA,EACPL,QAASA,EACTC,OAAQA,EACRmC,UAAWjC,EACXD,WAAYA,EACZE,SAAUA,EACVsB,UAAWlB,KAKnC"}