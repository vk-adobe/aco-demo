{"version":3,"file":"UPI.js","sources":["../../../../src/components/UPI/UPI.tsx"],"sourcesContent":["import { h, RefObject } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport UPIComponent from './components/UPIComponent';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport Await from '../internal/Await';\nimport QRLoader from '../internal/QRLoader';\nimport { App, UPIConfiguration, UpiMode, UpiPaymentData, UpiType } from './types';\nimport SRPanelProvider from '../../core/Errors/SRPanelProvider';\nimport { TxVariants } from '../tx-variants';\nimport isMobile from '../../utils/isMobile';\nimport type { ICore } from '../../core/types';\n\n/**\n * For mobile:\n * We should show upi_collect or upi_intent depending on if `apps` are returned in /paymentMethods response\n * The upi_qr should always be on the second tab\n *\n * For non-mobile:\n * We should never show the upi_intent (ignore `apps` in /paymentMethods response)\n * The upi_qr should be on the first tab and the upi_collect should be on second tab\n */\n\nclass UPI extends UIElement<UPIConfiguration> {\n    public static type = TxVariants.upi;\n    public static txVariants = [TxVariants.upi, TxVariants.upi_qr, TxVariants.upi_collect, TxVariants.upi_intent];\n\n    private selectedMode: UpiMode;\n\n    constructor(checkout: ICore, props: UPIConfiguration) {\n        super(checkout, props);\n        this.selectedMode = this.props.defaultMode;\n    }\n\n    formatProps(props: UPIConfiguration) {\n        if (!isMobile()) {\n            return {\n                ...super.formatProps(props),\n                defaultMode: props?.defaultMode ?? 'qrCode',\n                // For large screen, ignore the apps\n                apps: []\n            };\n        }\n\n        const hasIntentApps = props.apps?.length > 0;\n        const fallbackDefaultMode = hasIntentApps ? 'intent' : 'vpa';\n        const allowedModes = [fallbackDefaultMode, 'qrCode'];\n        const upiCollectApp: App = {\n            id: 'vpa',\n            name: props.i18n.get('upi.collect.dropdown.label'),\n            type: TxVariants.upi_collect as UpiType\n        };\n        const apps = hasIntentApps ? [...props.apps.map(app => ({ ...app, type: TxVariants.upi_intent as UpiType })), upiCollectApp] : [];\n        return {\n            ...super.formatProps(props),\n            defaultMode: allowedModes.includes(props?.defaultMode) ? props.defaultMode : fallbackDefaultMode,\n            apps\n        };\n    }\n\n    public get isValid(): boolean {\n        return this.state.isValid;\n    }\n\n    public formatData(): UpiPaymentData {\n        const { virtualPaymentAddress, app } = this.state.data || {};\n\n        return {\n            paymentMethod: {\n                ...(this.paymentType && { type: this.paymentType }),\n                ...(this.paymentType === TxVariants.upi_collect && virtualPaymentAddress && { virtualPaymentAddress }),\n                ...(this.paymentType === TxVariants.upi_intent && app?.id && { appId: app.id })\n            }\n        };\n    }\n\n    get paymentType(): UpiType {\n        if (this.selectedMode === 'qrCode') {\n            return TxVariants.upi_qr;\n        }\n        if (this.selectedMode === 'vpa') {\n            return TxVariants.upi_collect;\n        }\n        return this.state.data?.app?.type;\n    }\n\n    private onUpdateMode = (mode: UpiMode): void => {\n        this.selectedMode = mode;\n    };\n\n    private renderContent(type: string, url: string, paymentMethodType: string): h.JSX.Element {\n        switch (type) {\n            case 'qrCode':\n                return (\n                    <QRLoader\n                        ref={ref => {\n                            this.componentRef = ref;\n                        }}\n                        {...this.props}\n                        qrCodeData={this.props.qrCodeData ? encodeURIComponent(this.props.qrCodeData) : null}\n                        type={TxVariants.upi_qr}\n                        brandLogo={this.props.brandLogo || this.icon}\n                        onComplete={this.onComplete}\n                        introduction={this.props.i18n.get('upi.qrCodeWaitingMessage')}\n                        countdownTime={5}\n                        onActionHandled={this.onActionHandled}\n                    />\n                );\n            case 'await':\n                return (\n                    <Await\n                        ref={ref => {\n                            this.componentRef = ref;\n                        }}\n                        url={url}\n                        type={paymentMethodType}\n                        showCountdownTimer\n                        shouldRedirectAutomatically\n                        countdownTime={5}\n                        clientKey={this.props.clientKey}\n                        paymentData={this.props.paymentData}\n                        onActionHandled={this.onActionHandled}\n                        onError={this.props.onError}\n                        messageText={this.props.i18n.get('upi.vpaWaitingMessage')}\n                        awaitText={this.props.i18n.get('await.waitForConfirmation')}\n                        onComplete={this.onComplete}\n                        brandLogo={this.icon}\n                    />\n                );\n            default:\n                return (\n                    <UPIComponent\n                        ref={(ref: RefObject<typeof UPIComponent>) => {\n                            this.componentRef = ref;\n                        }}\n                        payButton={this.payButton}\n                        onChange={this.setState}\n                        onUpdateMode={this.onUpdateMode}\n                        apps={this.props.apps}\n                        defaultMode={this.props.defaultMode}\n                        showPayButton={this.props.showPayButton}\n                    />\n                );\n        }\n    }\n\n    public render(): h.JSX.Element {\n        const { type, url, paymentMethodType } = this.props;\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                <SRPanelProvider srPanel={this.props.modules.srPanel}>{this.renderContent(type, url, paymentMethodType)}</SRPanelProvider>\n            </CoreProvider>\n        );\n    }\n}\n\nexport default UPI;\n"],"names":["UPI","UIElement","formatProps","props","isMobile","_object_spread_props","_object_spread","super","defaultMode","apps","hasIntentApps","length","fallbackDefaultMode","allowedModes","upiCollectApp","id","name","i18n","get","type","TxVariants","upi_collect","map","app","upi_intent","includes","isValid","this","state","formatData","virtualPaymentAddress","data","paymentMethod","paymentType","appId","_this_state_data_app","_this_state_data","selectedMode","upi_qr","renderContent","url","paymentMethodType","h","QRLoader","ref","componentRef","qrCodeData","encodeURIComponent","brandLogo","icon","onComplete","introduction","countdownTime","onActionHandled","Await","showCountdownTimer","shouldRedirectAutomatically","clientKey","paymentData","onError","messageText","awaitText","UPIComponent","payButton","onChange","setState","onUpdateMode","showPayButton","render","CoreProvider","loadingContext","resources","SRPanelProvider","srPanel","modules","constructor","checkout","_define_property","mode","upi","txVariants"],"mappings":"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"}