{"version":3,"file":"VpaInput.js","sources":["../../../../../../src/components/UPI/components/VpaInput/VpaInput.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { vpaValidationRules } from './validate';\nimport './VpaInput.scss';\nimport InputText from '../../../internal/FormFields/InputText';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport useForm from '../../../../utils/useForm';\nimport Field from '../../../internal/FormFields/Field';\n\nexport type OnChangeProps = { data: VpaInputDataState; valid; errors; isValid: boolean };\n\ninterface VpaInputProps {\n    data?: {};\n    disabled?: boolean;\n    onChange({ data, valid, errors, isValid }: OnChangeProps): void;\n    onSetInputHandlers(handlers: VpaInputHandlers): void;\n}\n\nexport interface VpaInputDataState {\n    virtualPaymentAddress?: string;\n}\n\nexport type VpaInputHandlers = {\n    validateInput(): void;\n};\n\nconst VpaInput = (props: VpaInputProps): h.JSX.Element => {\n    const { i18n } = useCoreContext();\n    const formSchema = ['virtualPaymentAddress'];\n    const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm<VpaInputDataState>({\n        schema: formSchema,\n        defaultData: props.data,\n        rules: vpaValidationRules\n    });\n    const vpaInputHandlersRef = useRef<VpaInputHandlers>({ validateInput: null });\n\n    const validateInput = useCallback(() => {\n        triggerValidation();\n    }, [triggerValidation]);\n\n    useEffect(() => {\n        vpaInputHandlersRef.current.validateInput = validateInput;\n        props.onSetInputHandlers(vpaInputHandlersRef.current);\n    }, [validateInput, props.onSetInputHandlers]);\n\n    useEffect(() => {\n        props.onChange({ data, valid, errors, isValid });\n    }, [data, valid, errors, isValid]);\n\n    return (\n        <Field\n            label={i18n.get('upi.collect.field.label')}\n            errorMessage={!!errors.virtualPaymentAddress}\n            classNameModifiers={['vpa']}\n            name=\"virtualPaymentAddress\"\n        >\n            <InputText\n                name={'virtualPaymentAddress'}\n                autocorrect={'off'}\n                spellcheck={false}\n                disabled={props.disabled}\n                value={data.virtualPaymentAddress}\n                onInput={handleChangeFor('virtualPaymentAddress', 'input')}\n                onBlur={handleChangeFor('virtualPaymentAddress', 'blur')}\n                data-testid={'input-virtual-payment-address'}\n            />\n        </Field>\n    );\n};\n\nexport default VpaInput;\n"],"names":["VpaInput","props","i18n","useCoreContext","handleChangeFor","triggerValidation","data","valid","errors","isValid","useForm","schema","defaultData","rules","vpaValidationRules","vpaInputHandlersRef","useRef","validateInput","useCallback","useEffect","current","onSetInputHandlers","onChange","h","Field","label","get","errorMessage","virtualPaymentAddress","classNameModifiers","name","InputText","autocorrect","spellcheck","disabled","value","onInput","onBlur","data-testid"],"mappings":"ydA0BA,MAAMA,EAAYC,IACd,MAAMC,KAAEA,GAASC,KAEXC,gBAAEA,EAAeC,kBAAEA,EAAiBC,KAAEA,EAAIC,MAAEA,EAAKC,OAAEA,EAAMC,QAAEA,GAAYC,EAA2B,CACpGC,OAFe,CAAC,yBAGhBC,YAAaX,EAAMK,KACnBO,MAAOC,IAELC,EAAsBC,EAAyB,CAAEC,cAAe,OAEhEA,EAAgBC,GAAY,KAC9Bb,GAAAA,GACD,CAACA,IAWJ,OATAc,GAAU,KACNJ,EAAoBK,QAAQH,cAAgBA,EAC5ChB,EAAMoB,mBAAmBN,EAAoBK,QAAO,GACrD,CAACH,EAAehB,EAAMoB,qBAEzBF,GAAU,KACNlB,EAAMqB,SAAS,CAAEhB,OAAMC,QAAOC,SAAQC,WAAQ,GAC/C,CAACH,EAAMC,EAAOC,EAAQC,IAGrBc,EAACC,EAAAA,CACGC,MAAOvB,EAAKwB,IAAI,2BAChBC,eAAgBnB,EAAOoB,sBACvBC,mBAAoB,CAAC,OACrBC,KAAK,yBAELP,EAACQ,EAAAA,CACGD,KAAM,wBACNE,YAAa,MACbC,YAAY,EACZC,SAAUjC,EAAMiC,SAChBC,MAAO7B,EAAKsB,sBACZQ,QAAShC,EAAgB,wBAAyB,SAClDiC,OAAQjC,EAAgB,wBAAyB,QACjDkC,cAAa"}