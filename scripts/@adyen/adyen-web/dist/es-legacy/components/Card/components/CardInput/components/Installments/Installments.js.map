{"version":3,"file":"Installments.js","sources":["../../../../../../../../src/components/Card/components/CardInput/components/Installments/Installments.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport Field from '../../../../../internal/FormFields/Field';\nimport { useCoreContext } from '../../../../../../core/Context/CoreProvider';\nimport { InstallmentsItem, InstallmentsProps } from '../types';\nimport Fieldset from '../../../../../internal/FormFields/Fieldset/Fieldset';\nimport RadioGroup from '../../../../../internal/FormFields/RadioGroup';\nimport Select from '../../../../../internal/FormFields/Select';\nimport { alternativeLabelContent } from '../FieldLabelAlternative';\nimport './Installments.scss';\n\nexport interface InstallmentsObj {\n    value: number;\n    plan?: 'revolving';\n}\n\n/**\n * Installments generic dropdown\n */\nfunction Installments(props: InstallmentsProps) {\n    const { i18n } = useCoreContext();\n    const { amount, brand, onChange, type } = props;\n    const installmentOptions = props.installmentOptions[brand] || props.installmentOptions.card;\n    const readOnly = installmentOptions?.values?.length === 1;\n    const [installmentAmount, setInstallmentAmount] = useState(installmentOptions?.preselectedValue || installmentOptions?.values[0]);\n    const [radioBtnValue, setRadioBtnValue] = useState('onetime');\n\n    // hasRadioButtonUI determines if we have 3 radio buttons in the UI ('onetime', 'installments' and 'revolving')\n    const hasRadioButtonUI = installmentOptions?.plans?.includes('revolving');\n    const getPartialAmount = (divider: number): string => i18n.amount(amount.value / divider, amount.currency);\n\n    const onSelectInstallment = e => {\n        const selectedInstallments = e.target.value;\n        setInstallmentAmount(Number(selectedInstallments));\n    };\n\n    const onRadioSelect = e => {\n        const selectedBtn = e.currentTarget.getAttribute('value');\n        setRadioBtnValue(selectedBtn);\n    };\n\n    const installmentItemsMapper = (value: number): InstallmentsItem => {\n        let translationKey;\n        let translationObj;\n\n        if (type === 'amount') {\n            translationKey = 'installmentOption';\n            translationObj = { count: value, values: { times: value, partialValue: getPartialAmount(value) } };\n        } else {\n            translationKey = `installmentOptionMonths`;\n            translationObj = { count: value, values: { times: value } };\n        }\n\n        return {\n            id: value,\n            name: amount.value ? i18n.get(translationKey, translationObj) : `${value}`\n        };\n    };\n\n    useEffect(() => {\n        if (installmentOptions?.values?.includes(installmentAmount)) {\n            return;\n        }\n\n        setInstallmentAmount(installmentOptions?.preselectedValue ?? installmentOptions?.values[0]);\n    }, [brand]);\n\n    useEffect(() => {\n        const stateObj: InstallmentsObj = {\n            value: installmentAmount, // No radio button interface or \"installments\" radio button selected\n            ...(hasRadioButtonUI && radioBtnValue === 'revolving' && { plan: radioBtnValue, value: 1 }),\n            ...(hasRadioButtonUI && radioBtnValue === 'onetime' && { value: 1 })\n        };\n\n        onChange(installmentOptions ? stateObj : { value: null });\n    }, [installmentAmount, installmentOptions, radioBtnValue]);\n\n    if (!installmentOptions) return null;\n    if (amount.value === 0) return null;\n\n    // Alternate interface for installments with the possibility of a \"revolving\" plan\n    if (hasRadioButtonUI) {\n        return (\n            <div className=\"adyen-checkout__installments\">\n                <Field\n                    label={i18n.get('installments')}\n                    classNameModifiers={['installments']}\n                    name={'installmentsPseudoLabel'}\n                    useLabelElement={false}\n                    showContextualElement={false}\n                    renderAlternativeToLabel={alternativeLabelContent}\n                >\n                    <Fieldset classNameModifiers={['revolving-plan']} label={''}>\n                        <RadioGroup\n                            items={[\n                                { id: 'onetime', name: 'installments.oneTime' },\n                                { id: 'installments', name: 'installments.installments' },\n                                { id: 'revolving', name: 'installments.revolving' }\n                            ]}\n                            onChange={onRadioSelect}\n                            value={radioBtnValue}\n                            ariaLabel={i18n.get('installments')}\n                        />\n\n                        <Field\n                            className={radioBtnValue !== 'installments' ? 'revolving-plan-installments__disabled' : 'revolving-plan-installments'}\n                            classNameModifiers={['revolving-plan-installments']}\n                            name={''}\n                            useLabelElement={false}\n                            showContextualElement={false}\n                        >\n                            <Select\n                                filterable={false}\n                                items={installmentOptions.values.map(installmentItemsMapper)}\n                                selectedValue={installmentAmount}\n                                onChange={onSelectInstallment}\n                                name={'installments'}\n                                disabled={radioBtnValue !== 'installments'}\n                            />\n                        </Field>\n                    </Fieldset>\n                </Field>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"adyen-checkout__installments\">\n            <Field label={i18n.get('installments')} classNameModifiers={['installments']} name={'installments'} showContextualElement={false}>\n                <Select\n                    filterable={false}\n                    items={installmentOptions.values.map(installmentItemsMapper)}\n                    selectedValue={installmentAmount}\n                    onChange={onSelectInstallment}\n                    name={'installments'}\n                    readonly={readOnly}\n                    allowIdOnButton={true}\n                />\n            </Field>\n        </div>\n    );\n}\n\nInstallments.defaultProps = {\n    brand: '',\n    amount: {},\n    onChange: () => {}\n};\n\nexport default Installments;\n"],"names":["Installments","props","installmentOptions","i18n","useCoreContext","amount","brand","onChange","type","card","readOnly","values","length","installmentAmount","setInstallmentAmount","useState","preselectedValue","radioBtnValue","setRadioBtnValue","hasRadioButtonUI","plans","includes","onSelectInstallment","e","selectedInstallments","target","value","Number","onRadioSelect","selectedBtn","currentTarget","getAttribute","installmentItemsMapper","translationKey","translationObj","divider","count","times","partialValue","currency","id","name","get","useEffect","stateObj","_object_spread","plan","h","div","className","Field","label","classNameModifiers","useLabelElement","showContextualElement","renderAlternativeToLabel","alternativeLabelContent","Fieldset","RadioGroup","items","ariaLabel","Select","filterable","map","selectedValue","disabled","readonly","allowIdOnButton","defaultProps"],"mappings":"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"}