{"version":3,"file":"types.js","sources":["../../../../../src/components/PayByBankPix/services/types.ts"],"sourcesContent":["interface BrowserRiskSignals {\n    osVersion: string;\n    userTimeZoneOffset: number;\n    language: string;\n    screenDimensions: ScreenDimensions;\n}\n\ninterface ScreenDimensions {\n    width: number;\n    height: number;\n}\n\ntype RiskSignalsError = {\n    type: typeof PasskeyErrorTypes.RISK_SIGNALS_ERROR;\n    message: string;\n};\n\ntype ConfidenceScore = {\n    score: number;\n    errors?: string[];\n};\n\ninterface PublicKeyCredentialCreationOptionsDTO {\n    enrollmentId: string;\n    challenge: string;\n    rp: {\n        name: string;\n        id: string;\n    };\n    user: {\n        id: string;\n        name: string;\n        displayName: string;\n    };\n    pubKeyCredParams: { alg: number; type: string }[];\n    timeout?: number;\n    attestation: string;\n    excludeCredentials: string[];\n    authenticatorSelection?: {\n        authenticatorAttachment: string;\n        residentKey: string;\n        userVerification: string;\n        requireResidentKey: boolean;\n    };\n    extensions?: {\n        credProps?: boolean;\n    };\n}\n\ninterface WebAuthnPublicKeyCreationCredential extends Omit<PublicKeyCredential, 'response'> {\n    id: string;\n    response: AuthenticatorAttestationResponse;\n}\n\ninterface PublicKeyCredentialRequestOptionsDTO {\n    challenge: string;\n    allowCredentials?: { id: string; type: string }[];\n    timeout: number;\n    userVerification: string;\n    rpId: string;\n}\n\ninterface WebAuthnPublicKeyPaymentCredential extends Omit<PublicKeyCredential, 'response'> {\n    response: AuthenticatorAssertionResponse;\n}\n\nexport const PasskeyErrorTypes = {\n    CREDENTIAL_CREATION_ERROR: 'Navigator.credentials creation error',\n    CREDENTIAL_RETRIEVAL_ERROR: 'Navigator.credentials retrieval error',\n    RISK_SIGNALS_ERROR: 'Error capturing Risk Signals'\n};\n\nexport interface RiskSignalsEnrollment extends BrowserRiskSignals {\n    deviceId: string;\n}\n\nexport interface RiskSignalsAuthentication extends BrowserRiskSignals {\n    deviceId: string;\n    confidenceScore: ConfidenceScore;\n}\n\nexport type NavigatorCredentialCreationsError = {\n    type: typeof PasskeyErrorTypes.CREDENTIAL_CREATION_ERROR;\n    message: string;\n};\n\nexport type NavigatorCredentialRetrievalError = {\n    type: typeof PasskeyErrorTypes.CREDENTIAL_RETRIEVAL_ERROR;\n    message: string;\n};\n\nexport interface IAdyenPasskey {\n    captureRiskSignalsEnrollment: (deviceId?: string) => Promise<RiskSignalsEnrollment | RiskSignalsError>;\n    captureRiskSignalsAuthentication: (deviceId: string) => Promise<RiskSignalsAuthentication | RiskSignalsError>;\n    createCredentialForEnrollment: (\n        creationData: PublicKeyCredentialCreationOptionsDTO\n    ) => Promise<WebAuthnPublicKeyCreationCredential | NavigatorCredentialCreationsError>;\n    authenticateWithCredential: (\n        retrievalData: PublicKeyCredentialRequestOptionsDTO\n    ) => Promise<WebAuthnPublicKeyPaymentCredential | NavigatorCredentialRetrievalError>;\n}\n\nexport interface IPasskeyService {\n    captureRiskSignalsEnrollment(): Promise<RiskSignalsEnrollment>;\n    captureRiskSignalsAuthentication(): Promise<RiskSignalsAuthentication>;\n    /**\n     *\n     * @param registrationOptions - registration options object encoded in base64\n     * @returns fido assertion result encoded in base64\n     */\n    createCredentialForEnrollment: (registrationOptions: string) => Promise<string>;\n    /**\n     *\n     * @param authenticationOptions - encoded in base64\n     * @returns result encoded in base64\n     */\n    authenticateWithCredential: (authenticationOptions: string) => Promise<string>;\n}\n\nexport type PasskeyServiceConfig = {\n    deviceId?: string; // Merchant optionally pass\n    environment: string;\n};\n"],"names":["PasskeyErrorTypes","CREDENTIAL_CREATION_ERROR","CREDENTIAL_RETRIEVAL_ERROR","RISK_SIGNALS_ERROR"],"mappings":"MAkEaA,EAAoB,CAC7BC,0BAA2B,uCAC3BC,2BAA4B,wCAC5BC,mBAAoB"}