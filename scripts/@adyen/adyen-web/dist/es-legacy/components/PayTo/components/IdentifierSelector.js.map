{"version":3,"file":"IdentifierSelector.js","sources":["../../../../../src/components/PayTo/components/IdentifierSelector.tsx"],"sourcesContent":["import { h } from 'preact';\nimport Select from '../../internal/FormFields/Select';\nimport { SelectTargetObject } from '../../internal/FormFields/Select/types';\nimport Field from '../../internal/FormFields/Field';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport Language from '../../../language';\nimport { createEnumChecker } from '../../../core/utils';\n\nexport enum PayToIdentifierEnum {\n    phone = 'phone',\n    email = 'email',\n    abn = 'abn',\n    orgid = 'orgid'\n}\n\nconst payToIdentifierEnumCheck = createEnumChecker(PayToIdentifierEnum);\n\nexport type PayToPayIDInputIdentifierValues = keyof typeof PayToIdentifierEnum;\n\ntype PayIdOptionsType = { id: PayToPayIDInputIdentifierValues; nameKey: string }[];\n\nexport const PAYID_IDENTIFIER_OPTIONS: PayIdOptionsType = [\n    {\n        id: PayToIdentifierEnum.phone,\n        nameKey: 'payto.payid.option.phone'\n    },\n    {\n        id: PayToIdentifierEnum.email,\n        nameKey: 'payto.payid.option.email'\n    },\n    {\n        id: PayToIdentifierEnum.abn,\n        nameKey: 'ABN'\n    },\n    {\n        id: PayToIdentifierEnum.orgid,\n        nameKey: 'payto.payid.option.orgid'\n    }\n];\n\ninterface IdentifierSelectorProps {\n    classNameModifiers?: string[];\n    selectedIdentifier: PayToPayIDInputIdentifierValues;\n    onSelectedIdentifier: (value: PayToPayIDInputIdentifierValues) => void;\n}\n\nconst loadI18nForOptions = (i18n: Language, options: PayIdOptionsType) =>\n    options.map(option => ({\n        id: option.id,\n        name: i18n.get(option.nameKey)\n    }));\n\nexport default function IdentifierSelector({ selectedIdentifier, onSelectedIdentifier, classNameModifiers }: IdentifierSelectorProps) {\n    const { i18n } = useCoreContext();\n\n    const hydratedOptions = loadI18nForOptions(i18n, PAYID_IDENTIFIER_OPTIONS);\n\n    const onChange = (e: { target: SelectTargetObject }) => {\n        const valueStr = e.target.value + '';\n\n        if (payToIdentifierEnumCheck(valueStr)) {\n            onSelectedIdentifier(valueStr);\n        }\n    };\n\n    return (\n        <Field\n            className={''}\n            name={'payid-identifier'}\n            useLabelElement={true}\n            label={i18n.get('payto.payid.label.identifier')}\n            showContextualElement={false}\n            classNameModifiers={classNameModifiers}\n        >\n            <Select filterable={false} items={hydratedOptions} selectedValue={selectedIdentifier} onChange={onChange} name={'payid-identifier'} />\n        </Field>\n    );\n}\n"],"names":["PayToIdentifierEnum","payToIdentifierEnumCheck","createEnumChecker","PAYID_IDENTIFIER_OPTIONS","id","nameKey","IdentifierSelector","selectedIdentifier","onSelectedIdentifier","classNameModifiers","i18n","useCoreContext","hydratedOptions","options","map","option","name","get","loadI18nForOptions","h","Field","className","useLabelElement","label","showContextualElement","Select","filterable","items","selectedValue","onChange","e","valueStr","target","value"],"mappings":"4TAQO,IAAAA,EAAKA,SAAAA,GAAAA,mEAAAA,CAKX,CALWA,CAKX,CAAA,GAED,MAAMC,EAA2BC,EAAkBF,GAMtCG,EAA6C,CACtD,CACIC,GAAE,QACFC,QAAS,4BAEb,CACID,GAAE,QACFC,QAAS,4BAEb,CACID,GAAE,MACFC,QAAS,OAEb,CACID,GAAE,QACFC,QAAS,6BAgBF,SAASC,GAAmBC,mBAAEA,EAAkBC,qBAAEA,EAAoBC,mBAAEA,IACnF,MAAMC,KAAEA,GAASC,IAEXC,EATiB,EAACF,EAAgBG,IACxCA,EAAQC,KAAIC,IAAW,CACnBX,GAAIW,EAAOX,GACXY,KAAMN,EAAKO,IAAIF,EAAOV,aAMFa,CAAmBR,EAAMP,GAUjD,OACIgB,EAACC,EAAAA,CACGC,UAAW,GACXL,KAAM,mBACNM,iBAAiB,EACjBC,MAAOb,EAAKO,IAAI,gCAChBO,uBAAuB,EACvBf,mBAAoBA,GAEpBU,EAACM,EAAAA,CAAOC,YAAY,EAAOC,MAAOf,EAAiBgB,cAAerB,EAAoBsB,SAjB5EC,IACd,MAAMC,EAAWD,EAAEE,OAAOC,MAAQ,GAE9BhC,EAAyB8B,IACzBvB,EAAqBuB,EACzB,EAY8Gf,KAAM,qBAG5H"}