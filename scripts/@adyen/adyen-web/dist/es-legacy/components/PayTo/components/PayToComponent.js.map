{"version":3,"file":"PayToComponent.js","sources":["../../../../../src/components/PayTo/components/PayToComponent.tsx"],"sourcesContent":["import { h } from 'preact';\nimport SegmentedControl from '../../internal/SegmentedControl';\nimport { useMemo, useState } from 'preact/hooks';\nimport { SegmentedControlOptions } from '../../internal/SegmentedControl/SegmentedControl';\nimport PayIDInput from './PayIDInput';\nimport BSBInput from './BSBInput';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport { ComponentMethodsRef, UIElementStatus } from '../../internal/UIElement/types';\nimport { PayToData, PayToPlaceholdersType } from '../types';\nimport { PayButtonProps } from '../../internal/PayButton/PayButton';\nimport classNames from 'classnames';\nimport './PayToComponent.scss';\n\nexport type PayToInputOption = 'payid-option' | 'bsb-option';\n\nexport type PayToComponentData = { selectedInput: PayToInputOption };\n\nexport interface PayToComponentProps {\n    showPayButton: boolean;\n    onChange: (e) => void;\n    setComponentRef: (ref: ComponentMethodsRef) => void;\n    data: PayToData;\n    placeholders: PayToPlaceholdersType;\n    payButton: (props: Partial<PayButtonProps>) => h.JSX.Element;\n}\n\nexport default function PayToComponent(props: PayToComponentProps) {\n    const { i18n } = useCoreContext();\n\n    const [status, setStatus] = useState<UIElementStatus>('ready');\n\n    const inputOptions: SegmentedControlOptions<PayToInputOption> = useMemo(\n        () => [\n            {\n                value: 'payid-option',\n                label: 'PayID',\n                id: 'payid-option',\n                controls: 'payid-input'\n            },\n            {\n                value: 'bsb-option',\n                label: i18n.get('payto.bsb.option.label'),\n                id: 'bsb-option',\n                controls: 'bsb-input'\n            }\n        ],\n        [i18n]\n    );\n\n    const defaultOption = inputOptions[0].value;\n    const [selectedInput, setSelectedInput] = useState<PayToInputOption>(defaultOption);\n\n    const onChange = ({ data, valid, errors, isValid }) => {\n        // merge selected input to as data, this keep the input layers untouched\n        props.onChange({ data: { selectedInput: selectedInput, ...data }, valid, errors, isValid });\n    };\n\n    return (\n        <div\n            className={classNames({\n                'adyen-checkout__payto-component': true,\n                'adyen-checkout__payto-component--loading': status === 'loading'\n            })}\n        >\n            <SegmentedControl selectedValue={selectedInput} options={inputOptions} onChange={setSelectedInput} />\n            {selectedInput === 'payid-option' && (\n                <PayIDInput\n                    status={status}\n                    setStatus={setStatus}\n                    setComponentRef={props.setComponentRef}\n                    onChange={onChange}\n                    defaultData={props.data}\n                    placeholders={props.placeholders}\n                />\n            )}\n            {selectedInput === 'bsb-option' && (\n                <BSBInput\n                    status={status}\n                    setStatus={setStatus}\n                    setComponentRef={props.setComponentRef}\n                    onChange={onChange}\n                    defaultData={props.data}\n                    placeholders={props.placeholders}\n                />\n            )}\n\n            {props.showPayButton && props.payButton({ status, label: i18n.get('continue') })}\n        </div>\n    );\n}\n"],"names":["PayToComponent","props","i18n","useCoreContext","status","setStatus","useState","inputOptions","useMemo","value","label","id","controls","get","defaultOption","selectedInput","setSelectedInput","onChange","data","valid","errors","isValid","_object_spread","h","div","className","classNames","SegmentedControl","selectedValue","options","PayIDInput","setComponentRef","defaultData","placeholders","BSBInput","showPayButton","payButton"],"mappings":"60BA0Be,SAASA,EAAeC,GACnC,MAAMC,KAAEA,GAASC,KAEVC,EAAQC,GAAaC,EAA0B,SAEhDC,EAA0DC,GAC5D,IAAM,CACF,CACIC,MAAO,eACPC,MAAO,QACPC,GAAI,eACJC,SAAU,eAEd,CACIH,MAAO,aACPC,MAAOR,EAAKW,IAAI,0BAChBF,GAAI,aACJC,SAAU,eAGlB,CAACV,IAGCY,EAAgBP,EAAa,GAAGE,OAC/BM,EAAeC,GAAoBV,EAA2BQ,GAE/DG,EAAW,EAAGC,OAAMC,QAAOC,SAAQC,cAErCpB,EAAMgB,SAAS,CAAEC,KAAMI,EAAA,CAAEP,cAAeA,GAAkBG,GAAQC,QAAOC,SAAQC,WAAQ,EAG7F,OACIE,EAACC,MAAAA,CACGC,UAAWC,EAAW,CAClB,mCAAmC,EACnC,2CAAuD,YAAXtB,KAGhDmB,EAACI,EAAAA,CAAiBC,cAAeb,EAAec,QAAStB,EAAcU,SAAUD,IAC9D,iBAAlBD,GACGQ,EAACO,EAAAA,CACG1B,OAAQA,EACRC,UAAWA,EACX0B,gBAAiB9B,EAAM8B,gBACvBd,SAAUA,EACVe,YAAa/B,EAAMiB,KACnBe,aAAchC,EAAMgC,eAGT,eAAlBlB,GACGQ,EAACW,EAAAA,CACG9B,OAAQA,EACRC,UAAWA,EACX0B,gBAAiB9B,EAAM8B,gBACvBd,SAAUA,EACVe,YAAa/B,EAAMiB,KACnBe,aAAchC,EAAMgC,eAI3BhC,EAAMkC,eAAiBlC,EAAMmC,UAAU,CAAEhC,SAAQM,MAAOR,EAAKW,IAAI,cAG9E"}