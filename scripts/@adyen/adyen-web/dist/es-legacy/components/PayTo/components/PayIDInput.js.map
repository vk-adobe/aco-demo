{"version":3,"file":"PayIDInput.js","sources":["../../../../../src/components/PayTo/components/PayIDInput.tsx"],"sourcesContent":["import { h } from 'preact';\nimport Fieldset from '../../internal/FormFields/Fieldset';\nimport IdentifierSelector, { PayToIdentifierEnum } from './IdentifierSelector';\nimport { useEffect, useRef } from 'preact/hooks';\nimport useForm from '../../../utils/useForm';\nimport PayToPhone from './PayToPhone';\nimport InputEmail from '../../internal/FormFields/InputEmail';\nimport { getErrorMessage } from '../../../utils/getErrorMessage';\nimport Field from '../../internal/FormFields/Field';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport InputText from '../../internal/FormFields/InputText';\nimport { payIdValidationRules } from './validate';\nimport './PayIDInput.scss';\nimport { phoneFormatters } from '../../internal/PhoneInput/validate';\nimport { ComponentMethodsRef, UIElementStatus } from '../../internal/UIElement/types';\nimport PayToNameFields from './PayToNameFields';\nimport { PayToPlaceholdersType } from '../types';\n\nexport interface PayIdFormData {\n    email: string;\n    phone: string;\n    abn: string;\n    orgid: string;\n    firstName: string;\n    lastName: string;\n    phoneNumber?: string;\n    phonePrefix?: string;\n    selectedIdentifier: PayToIdentifierEnum;\n}\n\nexport interface PayIDInputProps {\n    status: UIElementStatus;\n    setStatus: (status: UIElementStatus) => void;\n    defaultData: PayIdFormData;\n    placeholders: PayToPlaceholdersType;\n    onChange: (e) => void;\n    setComponentRef: (ref: ComponentMethodsRef) => void;\n}\n\nconst BASE_SCHEMA = ['selectedIdentifier', 'firstName', 'lastName'];\n\nconst IDENTIFIER_SCHEMA = {\n    [PayToIdentifierEnum.email]: ['email'],\n    [PayToIdentifierEnum.phone]: ['phoneNumber', 'phonePrefix'],\n    [PayToIdentifierEnum.abn]: ['abn'],\n    [PayToIdentifierEnum.orgid]: ['orgid']\n};\n\nexport default function PayIDInput({ setComponentRef, defaultData, placeholders, onChange, setStatus }: PayIDInputProps) {\n    const { i18n } = useCoreContext();\n\n    const form = useForm<PayIdFormData>({\n        schema: BASE_SCHEMA,\n        defaultData: { selectedIdentifier: PayToIdentifierEnum.phone, ...defaultData },\n        rules: payIdValidationRules,\n        formatters: phoneFormatters\n    });\n    const { handleChangeFor, triggerValidation, data, errors, valid, isValid, setSchema } = form;\n\n    // handle the changes of identifier, each identifier gets its own schema\n    useEffect(() => {\n        // get the correct schema for each identifier and merge it with the base\n        setSchema([...IDENTIFIER_SCHEMA[data.selectedIdentifier], ...BASE_SCHEMA]);\n    }, [data.selectedIdentifier]);\n\n    // standard onChange propagate to parent state\n    useEffect(() => {\n        onChange({ data, valid, errors, isValid });\n    }, [data, valid, errors, isValid]);\n\n    const payToRef = useRef<ComponentMethodsRef>({\n        setStatus: setStatus,\n        showValidation: triggerValidation\n    });\n\n    useEffect(() => {\n        setComponentRef(payToRef.current);\n    }, [setComponentRef]);\n\n    return (\n        <Fieldset classNameModifiers={['payto__payid_input']} label={'PayID'} description={'payto.payid.description'}>\n            <IdentifierSelector\n                classNameModifiers={['col-40']}\n                onSelectedIdentifier={handleChangeFor('selectedIdentifier')}\n                selectedIdentifier={data.selectedIdentifier}\n            />\n            {data.selectedIdentifier === PayToIdentifierEnum.phone && (\n                <PayToPhone onChange={handleChangeFor('phone', 'blur')} data={data} form={form} />\n            )}\n\n            {/* TODO probably worth refactoring this into  either re-usable components or builder */}\n            {data.selectedIdentifier === PayToIdentifierEnum.email && (\n                <Field\n                    label={i18n.get('shopperEmail')}\n                    classNameModifiers={['col-60', 'email']}\n                    errorMessage={getErrorMessage(i18n, errors.email, i18n.get('shopperEmail'))}\n                    dir={'ltr'}\n                    name={'email'}\n                    i18n={i18n}\n                >\n                    <InputEmail\n                        name={'email'}\n                        value={data.email}\n                        onInput={handleChangeFor('email', 'input')}\n                        onBlur={handleChangeFor('email', 'blur')}\n                        placeholder={placeholders?.email}\n                        required={true}\n                    />\n                </Field>\n            )}\n\n            {data.selectedIdentifier === PayToIdentifierEnum.abn && (\n                <Field\n                    label={i18n.get('ABN')}\n                    classNameModifiers={['col-60', 'abn']}\n                    errorMessage={getErrorMessage(i18n, errors.abn, i18n.get('ABN'))}\n                    name={'ABN'}\n                    i18n={i18n}\n                >\n                    <InputText\n                        name={'abn'}\n                        value={data.abn}\n                        onInput={handleChangeFor('abn', 'input')}\n                        onBlur={handleChangeFor('abn', 'blur')}\n                        placeholder={placeholders?.abn}\n                        required={true}\n                    />\n                </Field>\n            )}\n\n            {data.selectedIdentifier === PayToIdentifierEnum.orgid && (\n                <Field\n                    label={i18n.get('payto.payid.label.orgid')}\n                    classNameModifiers={['col-60', 'orgid']}\n                    errorMessage={getErrorMessage(i18n, errors.orgid, i18n.get('payto.payid.label.orgid'))}\n                    name={'orgid'}\n                    i18n={i18n}\n                >\n                    <InputText\n                        name={'orgid'}\n                        value={data.orgid}\n                        onInput={handleChangeFor('orgid', 'input')}\n                        onBlur={handleChangeFor('orgid', 'blur')}\n                        placeholder={placeholders?.orgid}\n                        required={true}\n                    />\n                </Field>\n            )}\n\n            <PayToNameFields i18n={i18n} data={data} handleChangeFor={handleChangeFor} errors={errors} placeholders={placeholders} />\n        </Fieldset>\n    );\n}\n"],"names":["BASE_SCHEMA","IDENTIFIER_SCHEMA","PayToIdentifierEnum","email","phone","abn","orgid","PayIDInput","setComponentRef","defaultData","placeholders","onChange","setStatus","i18n","useCoreContext","form","useForm","schema","_object_spread","selectedIdentifier","rules","payIdValidationRules","formatters","phoneFormatters","handleChangeFor","triggerValidation","data","errors","valid","isValid","setSchema","useEffect","payToRef","useRef","showValidation","current","h","Fieldset","classNameModifiers","label","description","IdentifierSelector","onSelectedIdentifier","PayToPhone","Field","get","errorMessage","getErrorMessage","dir","name","InputEmail","value","onInput","onBlur","placeholder","required","InputText","PayToNameFields"],"mappings":"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"}