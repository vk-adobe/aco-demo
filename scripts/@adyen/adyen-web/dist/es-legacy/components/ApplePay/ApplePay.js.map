{"version":3,"file":"ApplePay.js","sources":["../../../../src/components/ApplePay/ApplePay.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport ApplePayButton from './components/ApplePayButton';\nimport ApplePayService from './services/ApplePayService';\nimport base64 from '../../utils/base64';\nimport defaultProps from './defaultProps';\nimport { httpPost } from '../../core/Services/http';\nimport { preparePaymentRequest } from './utils/payment-request';\nimport AdyenCheckoutError from '../../core/Errors/AdyenCheckoutError';\nimport { DecodeObject } from '../../types/global-types';\nimport { TxVariants } from '../tx-variants';\nimport { sanitizeResponse, verifyPaymentDidNotFail } from '../internal/UIElement/utils';\nimport {\n    ANALYTICS_EXPRESS_PAGES_ARRAY,\n    ANALYTICS_INSTANT_PAYMENT_BUTTON,\n    ANALYTICS_RENDERED_STR,\n    ANALYTICS_SELECTED_STR\n} from '../../core/Analytics/constants';\nimport { resolveSupportedVersion } from './utils/resolve-supported-version';\nimport { formatApplePayContactToAdyenAddressFormat } from './utils/format-applepay-contact-to-adyen-format';\nimport { mapBrands } from './utils/map-adyen-brands-to-applepay-brands';\nimport ApplePaySdkLoader from './services/ApplePaySdkLoader';\nimport { detectInIframe } from '../../utils/detectInIframe';\nimport type { ApplePayConfiguration, ApplePayElementData, ApplePayPaymentOrderDetails, ApplePaySessionRequest } from './types';\nimport type { ICore } from '../../core/types';\nimport type { PaymentResponseData, RawPaymentResponse } from '../../types/global-types';\nimport { AnalyticsEvent } from '../../core/Analytics/AnalyticsEvent';\nimport { AnalyticsInfoEvent } from '../../core/Analytics/AnalyticsInfoEvent';\n\nconst LATEST_APPLE_PAY_VERSION = 14;\n\nclass ApplePayElement extends UIElement<ApplePayConfiguration> {\n    public static type = TxVariants.applepay;\n\n    protected static defaultProps = defaultProps;\n\n    private sdkLoader: ApplePaySdkLoader;\n    private applePayVersionNumber: number = undefined;\n\n    constructor(checkout: ICore, props?: ApplePayConfiguration) {\n        super(checkout, props);\n\n        const { isExpress, onShippingContactSelected, onShippingMethodSelected } = this.props;\n\n        if (isExpress === false && (onShippingContactSelected || onShippingMethodSelected)) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'ApplePay - You must set \"isExpress\" flag to \"true\" in order to use \"onShippingContactSelected\" and/or \"onShippingMethodSelected\" callbacks'\n            );\n        }\n\n        this.startSession = this.startSession.bind(this);\n        this.submit = this.submit.bind(this);\n        this.validateMerchant = this.validateMerchant.bind(this);\n        this.collectOrderTrackingDetailsIfNeeded = this.collectOrderTrackingDetailsIfNeeded.bind(this);\n        this.handleAuthorization = this.handleAuthorization.bind(this);\n        this.defineApplePayVersionNumber = this.defineApplePayVersionNumber.bind(this);\n        this.configureApplePayWebOptions = this.configureApplePayWebOptions.bind(this);\n\n        this.sdkLoader = new ApplePaySdkLoader();\n\n        void this.sdkLoader\n            .load()\n            .then(this.defineApplePayVersionNumber)\n            .then(this.configureApplePayWebOptions)\n            .catch(error => {\n                this.handleError(error);\n            });\n    }\n\n    /**\n     * Formats the component props\n     */\n    protected override formatProps(props: ApplePayConfiguration): ApplePayConfiguration {\n        // @ts-ignore TODO: Fix brands prop\n        const supportedNetworks = props.brands?.length ? mapBrands(props.brands) : props.supportedNetworks;\n\n        return {\n            ...props,\n            configuration: props.configuration,\n            supportedNetworks,\n            buttonLocale: props.buttonLocale ?? props.i18n?.locale,\n            totalPriceLabel: props.totalPriceLabel || props.configuration?.merchantName,\n            renderApplePayCodeAs: props.renderApplePayCodeAs ?? (detectInIframe() ? 'window' : 'modal')\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    protected override formatData(): ApplePayElementData {\n        const { applePayToken, billingAddress, deliveryAddress } = this.state;\n        const { isExpress } = this.props;\n\n        return {\n            paymentMethod: {\n                type: ApplePayElement.type,\n                applePayToken,\n                ...(isExpress && { subtype: 'express' })\n            },\n            ...(billingAddress && { billingAddress }),\n            ...(deliveryAddress && { deliveryAddress })\n        };\n    }\n\n    protected submitAnalytics(analyticsObj: AnalyticsEvent) {\n        // Analytics will need to know about this.props.isExpress & this.props.expressPage\n        if (analyticsObj instanceof AnalyticsInfoEvent && analyticsObj.type === ANALYTICS_RENDERED_STR) {\n            const { isExpress, expressPage } = this.props;\n            const hasExpressPage = expressPage && ANALYTICS_EXPRESS_PAGES_ARRAY.includes(expressPage);\n\n            if (typeof isExpress === 'boolean') {\n                analyticsObj.isExpress = isExpress;\n            }\n\n            if (isExpress === true && hasExpressPage) {\n                analyticsObj.expressPage = expressPage; // We only care about the expressPage value if isExpress is true\n            }\n        }\n\n        super.submitAnalytics(analyticsObj);\n    }\n\n    public override submit = (): void => {\n        // Analytics\n        if (this.props.isInstantPayment) {\n            const event = new AnalyticsInfoEvent({\n                type: ANALYTICS_SELECTED_STR,\n                target: ANALYTICS_INSTANT_PAYMENT_BUTTON\n            });\n            this.submitAnalytics(event);\n        }\n        void this.startSession();\n    };\n\n    public get isValid(): boolean {\n        return true;\n    }\n\n    /**\n     * This API is only intended for upstreaming or defaulting to Apple Pay, all other scenarios should continue to\n     * use canMakePayments(). For Safari browsers, this API will indicate whether there is a card available to make\n     * payments. For third-party browsers a new status of paymentCredentialStatusUnknown will be returned. This does\n     * not mean there are no cards available, it means the status cannot be determined and as such defaulting\n     * and upstreaming should still be considered.\n     *\n     * {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/4440085-applepaycapabilities}\n     * @param merchantIdentifier\n     */\n    public async applePayCapabilities(merchantIdentifier?: string): Promise<ApplePayJS.PaymentCredentialStatusResponse> {\n        const identifier = merchantIdentifier || this.props.configuration.merchantId;\n\n        try {\n            await this.sdkLoader.isSdkLoaded();\n            return await ApplePaySession?.applePayCapabilities(identifier);\n        } catch (error) {\n            throw new AdyenCheckoutError('ERROR', 'Apple Pay: Error when requesting applePayCapabilities()', { cause: error });\n        }\n    }\n\n    /**\n     * Determines if Apple Pay component can be displayed or not\n     */\n    public override async isAvailable(): Promise<void> {\n        if (window.location.protocol !== 'https:') {\n            return Promise.reject(new AdyenCheckoutError('IMPLEMENTATION_ERROR', 'Trying to start an Apple Pay session from an insecure document'));\n        }\n\n        try {\n            await this.sdkLoader.isSdkLoaded();\n\n            if (ApplePaySession?.canMakePayments()) {\n                return Promise.resolve();\n            }\n\n            return Promise.reject(new AdyenCheckoutError('ERROR', 'Apple Pay is not available on this device'));\n        } catch (error) {\n            return Promise.reject(new AdyenCheckoutError('ERROR', 'Apple Pay SDK failed to load', { cause: error }));\n        }\n    }\n\n    /**\n     * Sets the Apple Pay version available for the shopper.\n     * This code needs to be executed once the  Apple Pay SDK is fully loaded\n     * @private\n     */\n    private defineApplePayVersionNumber() {\n        if (window.location.protocol !== 'https:') return;\n        this.applePayVersionNumber = this.props.version || resolveSupportedVersion(LATEST_APPLE_PAY_VERSION);\n    }\n\n    /**\n     * Sets the configuration/callbacks that pertain to the Apple Pay code overlay/modal.\n     * @private\n     */\n    private configureApplePayWebOptions() {\n        if (window.ApplePayWebOptions) {\n            const { renderApplePayCodeAs, onApplePayCodeClose } = this.props;\n\n            window.ApplePayWebOptions.set({\n                renderApplePayCodeAs,\n                ...(onApplePayCodeClose && { onApplePayCodeClose })\n            });\n        }\n    }\n\n    private startSession() {\n        const { onValidateMerchant, onPaymentMethodSelected, onShippingMethodSelected, onShippingContactSelected } = this.props;\n\n        const paymentRequest = preparePaymentRequest({\n            companyName: this.props.configuration.merchantName,\n            countryCode: this.core.options.countryCode,\n            ...this.props\n        });\n\n        const session = new ApplePayService(paymentRequest, {\n            version: this.applePayVersionNumber,\n            onError: (error: unknown) => {\n                this.handleError(\n                    new AdyenCheckoutError('ERROR', 'ApplePay - Something went wrong on ApplePayService', {\n                        cause: error\n                    })\n                );\n            },\n            onCancel: event => {\n                this.handleError(new AdyenCheckoutError('CANCEL', 'ApplePay UI dismissed', { cause: event }));\n            },\n            onPaymentMethodSelected,\n            onShippingMethodSelected,\n            onShippingContactSelected,\n            onValidateMerchant: onValidateMerchant || this.validateMerchant,\n            onPaymentAuthorized: (resolve, reject, event) => {\n                const billingAddress = formatApplePayContactToAdyenAddressFormat(event.payment.billingContact);\n                const deliveryAddress = formatApplePayContactToAdyenAddressFormat(event.payment.shippingContact, true);\n\n                this.setState({\n                    applePayToken: btoa(JSON.stringify(event.payment.token.paymentData)),\n                    authorizedEvent: event,\n                    ...(billingAddress && { billingAddress }),\n                    ...(deliveryAddress && { deliveryAddress })\n                });\n\n                this.handleAuthorization()\n                    .then(this.makePaymentsCall)\n                    .then(sanitizeResponse)\n                    .then(verifyPaymentDidNotFail)\n                    .then(this.collectOrderTrackingDetailsIfNeeded)\n                    .then(({ paymentResponse, orderDetails }) => {\n                        resolve({\n                            status: ApplePaySession.STATUS_SUCCESS,\n                            ...(orderDetails && { orderDetails })\n                        });\n                        return paymentResponse;\n                    })\n                    .then(paymentResponse => {\n                        this.handleResponse(paymentResponse);\n                    })\n                    .catch((paymentResponse?: RawPaymentResponse) => {\n                        const errors = paymentResponse?.error?.applePayError;\n\n                        reject({\n                            status: ApplePaySession.STATUS_FAILURE,\n                            errors: errors ? (Array.isArray(errors) ? errors : [errors]) : undefined\n                        });\n\n                        const responseWithError: RawPaymentResponse = {\n                            ...paymentResponse,\n                            error: {\n                                applePayError: errors\n                            }\n                        };\n\n                        this.handleFailedResult(responseWithError);\n                    });\n            }\n        });\n\n        return new Promise((resolve, reject) => this.props.onClick(resolve, reject))\n            .then(() => {\n                session.begin();\n            })\n            .catch(() => ({\n                // Swallow exception triggered by onClick reject\n            }));\n    }\n\n    /**\n     * Call the 'onAuthorized' callback if available.\n     * Must be resolved/reject for the payment flow to continue\n     *\n     * @private\n     */\n    private async handleAuthorization(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this.props.onAuthorized) {\n                resolve();\n            }\n\n            const { authorizedEvent, billingAddress, deliveryAddress } = this.state;\n\n            this.props.onAuthorized(\n                {\n                    authorizedEvent,\n                    ...(billingAddress && { billingAddress }),\n                    ...(deliveryAddress && { deliveryAddress })\n                },\n                { resolve, reject }\n            );\n        }).catch((error?: ApplePayJS.ApplePayError) => {\n            // Format error in a way that the 'catch' of the 'onPaymentAuthorize' block accepts it\n            const data = { error: { applePayError: error } };\n            return Promise.reject(data);\n        });\n    }\n\n    /**\n     * Verify if the 'onOrderTrackingRequest' is provided. If so, triggers the callback expecting an\n     * Apple Pay order details back\n     *\n     * @private\n     */\n    private async collectOrderTrackingDetailsIfNeeded(\n        paymentResponse: PaymentResponseData\n    ): Promise<{ orderDetails?: ApplePayPaymentOrderDetails; paymentResponse: PaymentResponseData }> {\n        return new Promise<ApplePayPaymentOrderDetails | void>((resolve, reject) => {\n            if (!this.props.onOrderTrackingRequest) {\n                return resolve();\n            }\n\n            this.props.onOrderTrackingRequest(resolve, reject);\n        })\n            .then(orderDetails => {\n                return {\n                    paymentResponse,\n                    ...(orderDetails && { orderDetails })\n                };\n            })\n            .catch(() => {\n                return { paymentResponse };\n            });\n    }\n\n    private async validateMerchant(resolve, reject) {\n        const { hostname: domainName } = window.location;\n        const { clientKey, configuration, loadingContext, initiative } = this.props;\n        const { merchantName, merchantId } = configuration;\n        const path = `v1/applePay/sessions?clientKey=${clientKey}`;\n        const options = { loadingContext, path };\n        const request: ApplePaySessionRequest = {\n            displayName: merchantName,\n            domainName,\n            initiative,\n            merchantIdentifier: merchantId\n        };\n\n        try {\n            const response = await httpPost(options, request);\n            const decodedData: DecodeObject = base64.decode(response.data);\n            if (!decodedData.success) {\n                reject('Could not decode Apple Pay session');\n            } else {\n                const session = JSON.parse(decodedData.data);\n                resolve(session);\n            }\n        } catch (e) {\n            reject('Could not get Apple Pay session');\n        }\n    }\n\n    render() {\n        if (!this.props.showPayButton) {\n            return null;\n        }\n\n        return (\n            <ApplePayButton\n                buttonStyle={this.props.buttonColor}\n                buttonType={this.props.buttonType}\n                buttonLocale={this.props.buttonLocale}\n                onClick={this.submit}\n            />\n        );\n    }\n}\n\nexport default ApplePayElement;\n"],"names":["ApplePayElement","UIElement","formatProps","props","supportedNetworks","brands","length","mapBrands","_object_spread_props","configuration","buttonLocale","i18n","locale","totalPriceLabel","merchantName","renderApplePayCodeAs","detectInIframe","formatData","applePayToken","billingAddress","deliveryAddress","this","state","isExpress","_object_spread","paymentMethod","type","subtype","submitAnalytics","analyticsObj","AnalyticsInfoEvent","ANALYTICS_RENDERED_STR","expressPage","hasExpressPage","ANALYTICS_EXPRESS_PAGES_ARRAY","includes","super","isValid","applePayCapabilities","merchantIdentifier","identifier","merchantId","ApplePaySession","sdkLoader","isSdkLoaded","error","AdyenCheckoutError","cause","isAvailable","window","location","protocol","Promise","reject","canMakePayments","resolve","defineApplePayVersionNumber","applePayVersionNumber","version","resolveSupportedVersion","configureApplePayWebOptions","ApplePayWebOptions","onApplePayCodeClose","set","startSession","onValidateMerchant","onPaymentMethodSelected","onShippingMethodSelected","onShippingContactSelected","paymentRequest","preparePaymentRequest","companyName","countryCode","core","options","session","ApplePayService","onError","handleError","onCancel","event","validateMerchant","onPaymentAuthorized","formatApplePayContactToAdyenAddressFormat","payment","billingContact","shippingContact","setState","btoa","JSON","stringify","token","paymentData","authorizedEvent","handleAuthorization","then","makePaymentsCall","sanitizeResponse","verifyPaymentDidNotFail","collectOrderTrackingDetailsIfNeeded","paymentResponse","orderDetails","status","STATUS_SUCCESS","handleResponse","catch","errors","applePayError","STATUS_FAILURE","Array","isArray","undefined","responseWithError","handleFailedResult","onClick","begin","onAuthorized","data","onOrderTrackingRequest","hostname","domainName","clientKey","loadingContext","initiative","path","request","displayName","response","httpPost","decodedData","base64","decode","success","parse","e","render","showPayButton","h","ApplePayButton","buttonStyle","buttonColor","buttonType","submit","constructor","checkout","_define_property","isInstantPayment","ANALYTICS_SELECTED_STR","target","ANALYTICS_INSTANT_PAYMENT_BUTTON","bind","ApplePaySdkLoader","load","TxVariants","applepay","defaultProps"],"mappings":"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"}