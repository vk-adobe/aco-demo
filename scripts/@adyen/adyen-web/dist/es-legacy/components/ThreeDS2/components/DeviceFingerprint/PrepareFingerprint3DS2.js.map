{"version":3,"file":"PrepareFingerprint3DS2.js","sources":["../../../../../../src/components/ThreeDS2/components/DeviceFingerprint/PrepareFingerprint3DS2.tsx"],"sourcesContent":["import { Component, h } from 'preact';\nimport DoFingerprint3DS2 from './DoFingerprint3DS2';\nimport { createFingerprintResolveData, createOldFingerprintResolveData, isErrorObject, prepareFingerPrintData } from '../utils';\nimport { PrepareFingerprint3DS2Props, PrepareFingerprint3DS2State } from './types';\nimport { FingerPrintData, ResultObject, ErrorCodeObject } from '../../types';\nimport { ErrorObject } from '../../../../core/Errors/types';\nimport { isValidHttpUrl } from '../../../../utils/isValidURL';\nimport { THREEDS2_FULL, THREEDS2_FINGERPRINT, THREEDS2_FINGERPRINT_ERROR, THREEDS2_NUM, MISSING_TOKEN_IN_ACTION_MSG, TIMEOUT } from '../../constants';\nimport { ANALYTICS_ERROR_TYPE, Analytics3DS2Errors, Analytics3DS2Events } from '../../../../core/Analytics/constants';\nimport { AnalyticsLogEvent } from '../../../../core/Analytics/AnalyticsLogEvent';\nimport { AnalyticsEvent } from '../../../../core/Analytics/AnalyticsEvent';\nimport { AnalyticsErrorEvent } from '../../../../core/Analytics/AnalyticsErrorEvent';\n\nclass PrepareFingerprint3DS2 extends Component<PrepareFingerprint3DS2Props, PrepareFingerprint3DS2State> {\n    public static type = 'scheme';\n\n    public static defaultProps = {\n        onComplete: () => {},\n        onError: () => {},\n        paymentData: '',\n        showSpinner: true,\n        isMDFlow: false\n    };\n\n    constructor(props) {\n        super(props);\n\n        const { token, notificationURL } = this.props; // See comments on prepareFingerPrintData regarding notificationURL\n\n        if (token) {\n            const fingerPrintData: FingerPrintData | ErrorObject = prepareFingerPrintData({ token, notificationURL });\n\n            this.state = {\n                status: 'init',\n                fingerPrintData: fingerPrintData as FingerPrintData\n            };\n        } else {\n            // Will be picked up in componentDidMount\n            this.state = { fingerPrintData: { success: false, error: MISSING_TOKEN_IN_ACTION_MSG } };\n\n            console.debug(`${THREEDS2_FINGERPRINT_ERROR}: ${MISSING_TOKEN_IN_ACTION_MSG}`);\n        }\n    }\n\n    public onFormSubmit = (msg: string) => {\n        const event = new AnalyticsLogEvent({\n            type: THREEDS2_FULL,\n            message: msg,\n            subType: Analytics3DS2Events.FINGERPRINT_DATA_SENT\n        });\n\n        this.props.onSubmitAnalytics(event);\n    };\n\n    componentDidMount() {\n        const hasFingerPrintData = !isErrorObject(this.state.fingerPrintData);\n\n        if (hasFingerPrintData) {\n            const shouldAllowHttpDomains =\n                /** Allow http urls if in development and testing against localhost:8080 */\n                (process.env.NODE_ENV === 'development' && process.env.__CLIENT_ENV__?.indexOf('localhost:8080') > -1) ||\n                /**\n                 * Allows the checkoutshopper demo on localhost:8080 to work -\n                 *  requires a configuration in localhost of environment: 'test', _environmentUrls: {api: 'http://localhost:8080/'}\n                 */\n                (this.props.environment === 'test' && this.props._environmentUrls?.api?.includes('http://localhost:8080'));\n\n            /**\n             * Check the structure of the created fingerPrintData\n             */\n            const { threeDSMethodURL, threeDSMethodNotificationURL, postMessageDomain, threeDSServerTransID } = this.state\n                .fingerPrintData as FingerPrintData;\n\n            const hasValid3DSMethodURL = isValidHttpUrl(threeDSMethodURL, shouldAllowHttpDomains);\n\n            // Only render component if we have a threeDSMethodURL. Otherwise, exit with threeDSCompInd: 'U'\n            if (!hasValid3DSMethodURL) {\n                this.setStatusComplete(\n                    { threeDSCompInd: 'U' },\n                    {\n                        errorCode: Analytics3DS2Errors.TOKEN_IS_MISSING_THREEDSMETHODURL,\n                        message: `${THREEDS2_FINGERPRINT_ERROR}: Decoded token is missing a valid threeDSMethodURL property`\n                    }\n                );\n\n                /**\n                 * NOTE: we can now use this.props.isMDFlow to decide if we want to send any of these errors to the onError handler\n                 *  - this is problematic in the regular flow since merchants tend to treat any calls to their onError handler as 'fatal',\n                 *   but in the MDFlow we control what the onError handler does.\n                 */\n                // if (this.props.isMDFlow) {}\n\n                console.debug('### PrepareFingerprint3DS2::exiting:: no valid threeDSMethodURL');\n                return;\n            }\n\n            const hasValid3DSMethodNotificationURL = isValidHttpUrl(threeDSMethodNotificationURL, shouldAllowHttpDomains);\n            const hasValidPostMessageDomain = isValidHttpUrl(postMessageDomain, shouldAllowHttpDomains);\n            const hasTransServerID = threeDSServerTransID?.length;\n\n            if (!hasValid3DSMethodNotificationURL || !hasValidPostMessageDomain || !hasTransServerID) {\n                /**\n                 * NOTE: EMVCo_3DS_CoreSpec_v2.3.1_20220831.pdf states that we should return: threeDSCompInd: 'N'\n                 * when the fingerprinting process \"Did not run or did not successfully complete\"\n                 */\n                this.setStatusComplete(\n                    { threeDSCompInd: 'N' },\n                    {\n                        errorCode: Analytics3DS2Errors.TOKEN_IS_MISSING_OTHER_PROPS,\n                        message: `${THREEDS2_FINGERPRINT_ERROR}: Decoded token is missing one or more of the following properties (threeDSMethodNotificationURL | postMessageDomain | threeDSServerTransID)`\n                    }\n                );\n\n                console.debug(\n                    '### PrepareFingerprint3DS2::exiting:: Decoded token is missing one or more of the following properties (threeDSMethodNotificationURL | postMessageDomain | threeDSServerTransID)'\n                );\n\n                return;\n            }\n\n            // Proceed to allow component to render\n            this.setState({ status: 'retrievingFingerPrint' });\n            //\n        } else {\n            // Only render component if we have fingerPrintData. Otherwise, complete with threeDSCompInd: 'N'\n\n            const errorMsg: string = (this.state.fingerPrintData as ErrorObject).error;\n\n            const errorCode =\n                errorMsg.indexOf(MISSING_TOKEN_IN_ACTION_MSG) > -1\n                    ? Analytics3DS2Errors.ACTION_IS_MISSING_TOKEN\n                    : Analytics3DS2Errors.TOKEN_DECODE_OR_PARSING_FAILED;\n\n            this.setStatusComplete(\n                { threeDSCompInd: 'N' },\n                {\n                    errorCode,\n                    message: `${THREEDS2_FINGERPRINT_ERROR}: ${errorMsg}` // can be: 'Missing \"token\" property from threeDS2 action', 'not base64', 'malformed URI sequence' or 'Could not JSON parse token'\n                }\n            );\n\n            console.debug('### PrepareFingerprint3DS2:: token does not exist or could not be base64 decoded &/or JSON.parsed');\n        }\n    }\n\n    setStatusComplete(resultObj: ResultObject, errorCodeObject: ErrorCodeObject = null) {\n        this.setState({ status: 'complete' }, () => {\n            /**\n             * Create the data in the way that the /details endpoint expects.\n             *  This is different for the flow triggered by the threeds2InMDFlow process than for the new, v67, 'threeDS2' action\n             */\n            const resolveDataFunction = this.props.isMDFlow ? createOldFingerprintResolveData : createFingerprintResolveData;\n            const data = resolveDataFunction(this.props.dataKey, resultObj, this.props.paymentData);\n\n            let event: AnalyticsEvent;\n\n            /** Are we in an error scenario? If so, submit analytics about it */\n            const finalResObject = errorCodeObject ? errorCodeObject : resultObj;\n            if (finalResObject.errorCode) {\n                const errorTypeAndCode = {\n                    code: finalResObject.errorCode === TIMEOUT ? Analytics3DS2Errors.THREEDS2_TIMEOUT : finalResObject.errorCode,\n                    errorType: finalResObject.errorCode === TIMEOUT ? ANALYTICS_ERROR_TYPE.network : ANALYTICS_ERROR_TYPE.apiError\n                };\n\n                /**\n                 * Timeout or data parsing problems:\n                 *\n                 * (threeDSCompInd:\"U\"):\n                 *   - Decoded token is missing a valid threeDSMethodURL property,\n                 *  or, (threeDSCompInd:\"N\"):\n                 *   - Fingerprint process has timed out,\n                 *  also, (threeDSCompInd:\"N\"):\n                 *   - Missing \"token\" property from threeDS2 action\n                 *   - or, decoded token is missing one or more of the following properties (threeDSMethodNotificationURL | postMessageDomain | threeDSServerTransID)\n                 *   - or, token could not be base64 decoded &/or JSON.parsed\n                 */\n\n                event = new AnalyticsErrorEvent({\n                    message: (finalResObject as ErrorCodeObject).message,\n                    ...errorTypeAndCode\n                });\n\n                // Send error to analytics endpoint\n                this.props.onSubmitAnalytics(event);\n            }\n\n            /** Calculate \"result\" for analytics */\n            let result: string;\n\n            switch (resultObj?.threeDSCompInd) {\n                case 'Y':\n                    result = 'success';\n                    break;\n                case 'N': {\n                    if (!errorCodeObject) {\n                        result = 'failed'; // 'failed' is the result returned from the threeDSMethodURL\n                    } else {\n                        result = errorCodeObject.errorCode === TIMEOUT ? TIMEOUT : 'failedInternal'; // timed-out; or, 'failed' as a result of internal checks\n                    }\n                    break;\n                }\n                case 'U':\n                    result = 'noThreeDSMethodURL';\n                    break;\n                default:\n            }\n\n            /**\n             * The fingerprint process is completed, one way or another.\n             * The resultObj will be {threeDSCompInd:\"Y\"} in the case of success,\n             * else {threeDSCompInd:\"U\"} or {threeDSCompInd:\"N\"} - if we've had some kind of timeout or data parsing problem (as described above)\n             */\n\n            event = new AnalyticsLogEvent({\n                type: THREEDS2_FULL,\n                message: `${THREEDS2_NUM} fingerprinting has completed`,\n                subType: Analytics3DS2Events.FINGERPRINT_COMPLETED,\n                result\n            });\n            // Send log to analytics endpoint\n            this.props.onSubmitAnalytics(event);\n\n            /**\n             * Equals call to callSubmit3DS2Fingerprint (except for in 3DS2InMDFlow)\n             */\n            this.props.onComplete(data);\n        });\n    }\n\n    render({ showSpinner }, { status, fingerPrintData }) {\n        if (status === 'retrievingFingerPrint') {\n            return (\n                <DoFingerprint3DS2\n                    onCompleteFingerprint={fingerprint => {\n                        this.setStatusComplete(fingerprint.result);\n                    }}\n                    onErrorFingerprint={fingerprint => {\n                        /**\n                         * Called when fingerprint times-out (which is still a valid scenario)...\n                         */\n                        const timeoutObject: ErrorCodeObject = {\n                            errorCode: fingerprint.errorCode, // 'timeout'\n                            message: `${THREEDS2_FINGERPRINT}: ${fingerprint.errorCode}`\n                        };\n\n                        this.setStatusComplete(fingerprint.result, timeoutObject); // fingerprint.result = threeDSCompInd: 'N'\n                    }}\n                    showSpinner={showSpinner}\n                    {...fingerPrintData}\n                    onActionHandled={this.props.onActionHandled}\n                    onFormSubmit={this.onFormSubmit}\n                />\n            );\n        }\n\n        return null;\n    }\n}\n\nexport default PrepareFingerprint3DS2;\n"],"names":["PrepareFingerprint3DS2","Component","componentDidMount","isErrorObject","this","state","fingerPrintData","process","_this_props__environmentUrls_api","_this_props__environmentUrls","shouldAllowHttpDomains","props","environment","_environmentUrls","api","includes","threeDSMethodURL","threeDSMethodNotificationURL","postMessageDomain","threeDSServerTransID","isValidHttpUrl","setStatusComplete","threeDSCompInd","errorCode","Analytics3DS2Errors","TOKEN_IS_MISSING_THREEDSMETHODURL","message","THREEDS2_FINGERPRINT_ERROR","console","debug","hasValid3DSMethodNotificationURL","hasValidPostMessageDomain","hasTransServerID","length","TOKEN_IS_MISSING_OTHER_PROPS","setState","status","errorMsg","error","indexOf","MISSING_TOKEN_IN_ACTION_MSG","ACTION_IS_MISSING_TOKEN","TOKEN_DECODE_OR_PARSING_FAILED","resultObj","errorCodeObject","data","isMDFlow","createOldFingerprintResolveData","createFingerprintResolveData","dataKey","paymentData","event","finalResObject","errorTypeAndCode","code","TIMEOUT","THREEDS2_TIMEOUT","errorType","ANALYTICS_ERROR_TYPE","network","apiError","AnalyticsErrorEvent","_object_spread","onSubmitAnalytics","result","AnalyticsLogEvent","type","THREEDS2_FULL","THREEDS2_NUM","subType","Analytics3DS2Events","FINGERPRINT_COMPLETED","onComplete","render","showSpinner","h","DoFingerprint3DS2","onCompleteFingerprint","fingerprint","onErrorFingerprint","timeoutObject","THREEDS2_FINGERPRINT","onActionHandled","onFormSubmit","constructor","super","_define_property","msg","FINGERPRINT_DATA_SENT","token","notificationURL","prepareFingerPrintData","success","defaultProps","onError"],"mappings":"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"}