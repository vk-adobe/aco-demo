{"version":3,"file":"PrepareChallenge3DS2.js","sources":["../../../../../../src/components/ThreeDS2/components/Challenge/PrepareChallenge3DS2.tsx"],"sourcesContent":["import { Component, h } from 'preact';\nimport DoChallenge3DS2 from './DoChallenge3DS2';\nimport { createChallengeResolveData, prepareChallengeData, createOldChallengeResolveData, isErrorObject } from '../utils';\nimport { PrepareChallenge3DS2Props, PrepareChallenge3DS2State, StatusErrorInfoObject } from './types';\nimport { ChallengeData, ResultObject, ThreeDS2FlowObject, ErrorCodeObject } from '../../types';\nimport '../../ThreeDS2.scss';\nimport Img from '../../../internal/Img';\nimport './challenge.scss';\nimport { hasOwnProperty } from '../../../../utils/hasOwnProperty';\nimport useImage from '../../../../core/Context/useImage';\nimport AdyenCheckoutError, { ERROR } from '../../../../core/Errors/AdyenCheckoutError';\nimport { THREEDS2_CHALLENGE, THREEDS2_CHALLENGE_ERROR, THREEDS2_FULL, THREEDS2_NUM, MISSING_TOKEN_IN_ACTION_MSG } from '../../constants';\nimport { isValidHttpUrl } from '../../../../utils/isValidURL';\nimport { ANALYTICS_ERROR_TYPE, Analytics3DS2Errors, Analytics3DS2Events } from '../../../../core/Analytics/constants';\nimport { ErrorObject } from '../../../../core/Errors/types';\nimport { AnalyticsLogEvent } from '../../../../core/Analytics/AnalyticsLogEvent';\nimport { AnalyticsErrorEvent } from '../../../../core/Analytics/AnalyticsErrorEvent';\nimport { AnalyticsEvent } from '../../../../core/Analytics/AnalyticsEvent';\n\nclass PrepareChallenge3DS2 extends Component<PrepareChallenge3DS2Props, PrepareChallenge3DS2State> {\n    public static defaultProps = {\n        onComplete: () => {},\n        onError: () => {},\n        isMDFlow: false\n    };\n\n    constructor(props) {\n        super(props);\n\n        if (this.props.token) {\n            const challengeData: ChallengeData | ErrorObject = prepareChallengeData({\n                token: this.props.token,\n                size: this.props.challengeWindowSize || this.props.size // TODO confirm that this.props.size is legacy and can be removed\n            });\n\n            this.state = {\n                status: 'init',\n                challengeData: challengeData as ChallengeData\n            };\n        } else {\n            // Will be picked up in componentDidMount\n            this.state = { challengeData: { success: false, error: MISSING_TOKEN_IN_ACTION_MSG } };\n\n            console.debug(`${THREEDS2_CHALLENGE_ERROR}: ${MISSING_TOKEN_IN_ACTION_MSG}`);\n        }\n    }\n\n    public onFormSubmit = (msg: string) => {\n        const event = new AnalyticsLogEvent({\n            type: THREEDS2_FULL,\n            message: msg,\n            subType: Analytics3DS2Events.CHALLENGE_DATA_SENT\n        });\n\n        this.props.onSubmitAnalytics(event);\n    };\n\n    componentDidMount() {\n        const hasChallengeData = !isErrorObject(this.state.challengeData);\n\n        if (hasChallengeData) {\n            const shouldAllowHttpDomains =\n                /** Allow http urls if in development and testing against localhost:8080 */\n                (process.env.NODE_ENV === 'development' && process.env.__CLIENT_ENV__?.indexOf('localhost:8080') > -1) ||\n                /**\n                 * Allows the checkoutshopper demo on localhost:8080 to work -\n                 *  requires a configuration in localhost of environment: 'test', _environmentUrls: {api: 'http://localhost:8080/'}\n                 */\n                (this.props.environment === 'test' && this.props._environmentUrls?.api?.includes('http://localhost:8080'));\n\n            /**\n             * Check the structure of the created challengeData\n             */\n            const { acsURL } = this.state.challengeData as ChallengeData;\n            const hasValidAcsURL = isValidHttpUrl(acsURL, shouldAllowHttpDomains);\n\n            // Only render component if we have an acsURL.\n            if (!hasValidAcsURL) {\n                // Set UI error & call onError callback\n                this.setError(\n                    {\n                        errorInfo: `${Analytics3DS2Errors.TOKEN_IS_MISSING_ACSURL}: ${this.props.i18n.get('err.gen.9102')}` //\n                    },\n                    true\n                );\n\n                // Send error to analytics endpoint // TODO - check logs to see if this *ever* happens\n                const event = new AnalyticsErrorEvent({\n                    code: Analytics3DS2Errors.TOKEN_IS_MISSING_ACSURL,\n                    errorType: ANALYTICS_ERROR_TYPE.apiError,\n                    message: `${THREEDS2_CHALLENGE_ERROR}: Decoded token is missing a valid acsURL property`\n                });\n                this.props.onSubmitAnalytics(event);\n\n                console.debug('### PrepareChallenge3DS2::exiting:: no valid acsURL');\n                return;\n            }\n\n            const { acsTransID, messageVersion, threeDSServerTransID } = (this.state.challengeData as ChallengeData).cReqData;\n\n            // Only render component if we have a acsTransID, messageVersion & threeDSServerTransID\n            if (!acsTransID || !messageVersion || !threeDSServerTransID) {\n                // Set UI error & call onError callback\n                this.setError(\n                    {\n                        errorInfo: `${Analytics3DS2Errors.TOKEN_IS_MISSING_OTHER_PROPS}: ${this.props.i18n.get('err.gen.9102')}`\n                        // errorObj: this.state.challengeData // TODO Decide if we want to expose this data\n                    },\n                    true\n                );\n\n                // Send error to analytics endpoint // TODO - check logs to see if this *ever* happens\n                const event = new AnalyticsErrorEvent({\n                    code: Analytics3DS2Errors.TOKEN_IS_MISSING_OTHER_PROPS,\n                    errorType: ANALYTICS_ERROR_TYPE.apiError,\n                    message: `${THREEDS2_CHALLENGE_ERROR}: Decoded token is missing one or more of the following properties (acsTransID | messageVersion | threeDSServerTransID)`\n                });\n                this.props.onSubmitAnalytics(event);\n\n                console.debug(\n                    '### PrepareChallenge3DS2::exiting:: missing one or more of the following properties (acsTransID | messageVersion | threeDSServerTransID)'\n                );\n                return;\n            }\n\n            // Proceed to allow component to render\n            this.setState({ status: 'performingChallenge' });\n            //\n        } else {\n            const errorMsg: string = (this.state.challengeData as ErrorObject).error;\n\n            const errorCode =\n                errorMsg.indexOf(MISSING_TOKEN_IN_ACTION_MSG) > -1\n                    ? Analytics3DS2Errors.ACTION_IS_MISSING_TOKEN\n                    : Analytics3DS2Errors.TOKEN_DECODE_OR_PARSING_FAILED;\n\n            // Set UI error & call onError callback\n            this.setError(\n                {\n                    errorInfo:\n                        errorMsg.indexOf(MISSING_TOKEN_IN_ACTION_MSG) > -1\n                            ? `${Analytics3DS2Errors.ACTION_IS_MISSING_TOKEN}: ${this.props.i18n.get('err.gen.9102')}`\n                            : `${Analytics3DS2Errors.TOKEN_DECODE_OR_PARSING_FAILED}: ${this.props.i18n.get('err.gen.9102')}`\n                    // errorObj: this.state.challengeData // TODO Decide if we want to expose this data\n                },\n                true\n            );\n\n            // Send error to analytics endpoint // TODO - check logs to see if the base64 decoding errors *ever* happen\n            const event = new AnalyticsErrorEvent({\n                code: errorCode,\n                errorType: ANALYTICS_ERROR_TYPE.apiError,\n                message: `${THREEDS2_CHALLENGE_ERROR}: ${errorMsg}` // can be: 'Missing \"token\" property from threeDS2 action', 'not base64', 'malformed URI sequence' or 'Could not JSON parse token'\n            });\n\n            this.props.onSubmitAnalytics(event);\n\n            console.debug('### PrepareChallenge3DS2::exiting:: no challengeData');\n        }\n    }\n\n    setStatusComplete(resultObj: ResultObject, errorCodeObject: ErrorCodeObject = null) {\n        this.setState({ status: 'complete' }, () => {\n            /**\n             * Create the data in the way that the /details endpoint expects.\n             *  This is different for the flow triggered by the threeds2InMDFlow process than for the new, v67, 'threeDS2' action\n             */\n            const resolveDataFunction = this.props.isMDFlow ? createOldChallengeResolveData : createChallengeResolveData;\n            const data = resolveDataFunction(this.props.dataKey, resultObj.transStatus, this.props.paymentData);\n\n            if (errorCodeObject) {\n                console.debug('### PrepareChallenge3DS2::errorCodeObject::', errorCodeObject);\n            }\n\n            let event: AnalyticsEvent;\n\n            /** Are we in an \"error\" i.e. timeout or no transStatus, scenario? If so, submit analytics about it */\n            const finalResObject = errorCodeObject ? errorCodeObject : resultObj;\n            if (finalResObject.errorCode) {\n                const errorTypeAndCode = {\n                    code: finalResObject.errorCode === 'timeout' ? Analytics3DS2Errors.THREEDS2_TIMEOUT : Analytics3DS2Errors.NO_TRANSSTATUS,\n                    errorType: finalResObject.errorCode === 'timeout' ? ANALYTICS_ERROR_TYPE.network : ANALYTICS_ERROR_TYPE.apiError\n                };\n\n                // Challenge process has timed out,\n                // or, It's an error reported by the backend 'cos no transStatus could be retrieved // TODO - check logs to see if this *ever* happens\n\n                event = new AnalyticsErrorEvent({\n                    message: (finalResObject as ErrorCodeObject).message,\n                    ...errorTypeAndCode\n                });\n\n                // Send error to analytics endpoint\n                this.props.onSubmitAnalytics(event);\n            }\n\n            /** Calculate \"result\" for analytics */\n            let result: string;\n\n            switch (resultObj?.transStatus) {\n                case 'Y':\n                    result = 'success';\n                    break;\n                case 'N':\n                    result = 'failed';\n                    break;\n                case 'U':\n                    result = !errorCodeObject ? 'cancelled' : 'timeout';\n                    break;\n                default:\n            }\n            if (resultObj?.errorCode) {\n                result = 'noTransStatus';\n            }\n\n            /** Create log object - the process is completed, one way or another */\n\n            event = new AnalyticsLogEvent({\n                type: THREEDS2_FULL,\n                message: `${THREEDS2_NUM} challenge has completed`,\n                subType: Analytics3DS2Events.CHALLENGE_COMPLETED,\n                result\n            });\n\n            // Send log to analytics endpoint\n            this.props.onSubmitAnalytics(event);\n\n            /**\n             * Equals call to onAdditionalDetails (except for in 3DS2InMDFlow)\n             */\n            this.props.onComplete(data);\n        });\n    }\n\n    /**\n     * Display error in the UI,\n     * and, optionally, decide whether to send any of these errors to the merchant defined onError callback\n     *\n     * @param errorInfoObj -\n     * @param isFatal -\n     */\n    setError(errorInfoObj: StatusErrorInfoObject, isFatal: boolean) {\n        this.setState({ status: 'error', errorInfo: errorInfoObj.errorInfo });\n\n        // Decide whether to call this.props.onError\n        if (isFatal) {\n            this.props.onError(new AdyenCheckoutError(ERROR, errorInfoObj.errorInfo, { cause: errorInfoObj.errorObj }));\n        }\n    }\n\n    render(_, { challengeData }) {\n        const getImage = useImage();\n        if (this.state.status === 'performingChallenge') {\n            return (\n                <DoChallenge3DS2\n                    onCompleteChallenge={(challenge: ThreeDS2FlowObject) => {\n                        let errorCodeObject: ErrorCodeObject = null;\n\n                        // Challenge has resulted in an error (no transStatus could be retrieved) - but we still treat this as a valid scenario\n                        if (hasOwnProperty(challenge.result, 'errorCode') && challenge.result.errorCode.length) {\n                            // Tell the merchant there's been an error\n                            errorCodeObject = {\n                                errorCode: challenge.result.errorCode,\n                                message: `${THREEDS2_CHALLENGE_ERROR}: ${\n                                    challenge.result.errorDescription ? challenge.result.errorDescription : 'no transStatus could be retrieved'\n                                }`\n                            };\n\n                            /**\n                             * NOTE: we can now use this.props.isMDFlow to decide if we want to send any of these errors to the onError handler\n                             *  - this is problematic in the regular flow since merchants tend to treat any calls to their onError handler as 'fatal',\n                             *   but in the MDFlow we control what the onError handler does.\n                             */\n                            if (this.props.isMDFlow) {\n                                this.props.onError(\n                                    new AdyenCheckoutError(\n                                        ERROR,\n                                        `${THREEDS2_CHALLENGE_ERROR}: ${\n                                            challenge.result.errorDescription\n                                                ? challenge.result.errorDescription\n                                                : 'no transStatus could be retrieved'\n                                        }`,\n                                        { cause: challenge.result.errorCode }\n                                    )\n                                );\n                            }\n                        }\n\n                        /**\n                         * An object has been returned, parsed & accepted as legit (according to the rules in getProcessMessageHandler),\n                         * but the result prop on that object is missing\n                         */\n                        if (!challenge.result) {\n                            this.setError(\n                                {\n                                    errorInfo: `${THREEDS2_CHALLENGE_ERROR}:  ${this.props.i18n.get('3ds.chal.805', {\n                                        values: { result: '\"result\"' }\n                                    })}`,\n                                    errorObj: challenge as unknown as ErrorObject\n                                },\n                                true\n                            );\n\n                            // Send error to analytics endpoint\n                            const event = new AnalyticsErrorEvent({\n                                code: Analytics3DS2Errors.CHALLENGE_RESOLVED_WITHOUT_RESULT_PROP,\n                                errorType: ANALYTICS_ERROR_TYPE.apiError,\n                                message: `${THREEDS2_CHALLENGE_ERROR}: challenge resolved without a \"result\" object`\n                            });\n\n                            this.props.onSubmitAnalytics(event);\n\n                            console.debug('### PrepareChallenge3DS2::exiting:: challenge resolved without a \"result\" object');\n\n                            return;\n                        }\n\n                        // Proceed with call to onAdditionalDetails (except for in 3DS2InMDFlow)\n                        this.setStatusComplete(challenge.result, errorCodeObject);\n                    }}\n                    onErrorChallenge={(challenge: ThreeDS2FlowObject) => {\n                        /**\n                         * Called when challenge times-out (which is still a valid scenario)...\n                         */\n                        if (hasOwnProperty(challenge, 'errorCode')) {\n                            const timeoutObject: ErrorCodeObject = {\n                                errorCode: challenge.errorCode,\n                                message: `${THREEDS2_CHALLENGE}: ${challenge.errorCode}`\n                            };\n\n                            // see comment in onCompleteChallenge code block\n                            if (this.props.isMDFlow) {\n                                this.props.onError(\n                                    new AdyenCheckoutError(ERROR, `${THREEDS2_CHALLENGE_ERROR}: '3DS2 challenge timed out'`, {\n                                        cause: challenge.errorCode\n                                    })\n                                );\n                            }\n\n                            this.setStatusComplete(challenge.result, timeoutObject);\n                            return;\n                        }\n                    }}\n                    {...challengeData}\n                    onActionHandled={this.props.onActionHandled}\n                    onFormSubmit={this.onFormSubmit}\n                />\n            );\n        }\n\n        if (this.state.status === 'error') {\n            return (\n                <div className=\"adyen-checkout__threeds2-challenge-error\">\n                    <Img\n                        className=\"adyen-checkout__status__icon adyen-checkout__status__icon--error\"\n                        src={getImage({\n                            imageFolder: 'components/'\n                        })('error')}\n                        alt={''}\n                    />\n                    <div className=\"adyen-checkout__status__text\">\n                        {this.state.errorInfo ? this.state.errorInfo : this.props.i18n.get('error.message.unknown')}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n}\n\nexport default PrepareChallenge3DS2;\n"],"names":["PrepareChallenge3DS2","Component","componentDidMount","isErrorObject","this","state","challengeData","process","_this_props__environmentUrls_api","_this_props__environmentUrls","shouldAllowHttpDomains","props","environment","_environmentUrls","api","includes","acsURL","isValidHttpUrl","setError","errorInfo","Analytics3DS2Errors","TOKEN_IS_MISSING_ACSURL","i18n","get","event","AnalyticsErrorEvent","code","errorType","ANALYTICS_ERROR_TYPE","apiError","message","THREEDS2_CHALLENGE_ERROR","onSubmitAnalytics","console","debug","acsTransID","messageVersion","threeDSServerTransID","cReqData","TOKEN_IS_MISSING_OTHER_PROPS","setState","status","errorMsg","error","errorCode","indexOf","MISSING_TOKEN_IN_ACTION_MSG","ACTION_IS_MISSING_TOKEN","TOKEN_DECODE_OR_PARSING_FAILED","setStatusComplete","resultObj","errorCodeObject","data","isMDFlow","createOldChallengeResolveData","createChallengeResolveData","dataKey","transStatus","paymentData","finalResObject","errorTypeAndCode","THREEDS2_TIMEOUT","NO_TRANSSTATUS","network","_object_spread","result","AnalyticsLogEvent","type","THREEDS2_FULL","THREEDS2_NUM","subType","Analytics3DS2Events","CHALLENGE_COMPLETED","onComplete","errorInfoObj","isFatal","onError","AdyenCheckoutError","ERROR","cause","errorObj","render","_","getImage","useImage","h","DoChallenge3DS2","onCompleteChallenge","challenge","hasOwnProperty","length","errorDescription","values","CHALLENGE_RESOLVED_WITHOUT_RESULT_PROP","onErrorChallenge","timeoutObject","THREEDS2_CHALLENGE","onActionHandled","onFormSubmit","div","className","Img","src","imageFolder","alt","constructor","super","_define_property","msg","CHALLENGE_DATA_SENT","token","prepareChallengeData","size","challengeWindowSize","success","defaultProps"],"mappings":"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"}