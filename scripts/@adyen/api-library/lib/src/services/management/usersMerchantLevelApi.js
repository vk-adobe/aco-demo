"use strict";
/*
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersMerchantLevelApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const models_1 = require("../../typings/management/models");
const resource_1 = __importDefault(require("../resource"));
class UsersMerchantLevelApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://management-test.adyen.com/v3";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Create a new user
    * @param merchantId {@link string } Unique identifier of the merchant.
    * @param createMerchantUserRequest {@link CreateMerchantUserRequest }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link CreateUserResponse }
    */
    async createNewUser(merchantId, createMerchantUserRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/users`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(createMerchantUserRequest, "CreateMerchantUserRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "CreateUserResponse");
    }
    /**
    * @summary Get user details
    * @param merchantId {@link string } Unique identifier of the merchant.
    * @param userId {@link string } Unique identifier of the user.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link User }
    */
    async getUserDetails(merchantId, userId, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/users/{userId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "User");
    }
    /**
    * @summary Get a list of users
    * @param merchantId {@link string } Unique identifier of the merchant.
    * @param requestOptions {@link IRequest.Options }
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.
    * @param username {@link string } The partial or complete username to select all users that match.
    * @return {@link ListMerchantUsersResponse }
    */
    async listUsers(merchantId, pageNumber, pageSize, username, requestOptions) {
        var _a;
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/users`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new resource_1.default(this, endpoint);
        const hasDefinedQueryParams = (_a = pageNumber !== null && pageNumber !== void 0 ? pageNumber : pageSize) !== null && _a !== void 0 ? _a : username;
        if (hasDefinedQueryParams) {
            if (!requestOptions)
                requestOptions = {};
            if (!requestOptions.params)
                requestOptions.params = {};
            if (pageNumber)
                requestOptions.params["pageNumber"] = pageNumber;
            if (pageSize)
                requestOptions.params["pageSize"] = pageSize;
            if (username)
                requestOptions.params["username"] = username;
        }
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "ListMerchantUsersResponse");
    }
    /**
    * @summary Update a user
    * @param merchantId {@link string } Unique identifier of the merchant.
    * @param userId {@link string } Unique identifier of the user.
    * @param updateMerchantUserRequest {@link UpdateMerchantUserRequest }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link User }
    */
    async updateUser(merchantId, userId, updateMerchantUserRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/users/{userId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(updateMerchantUserRequest, "UpdateMerchantUserRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "User");
    }
}
exports.UsersMerchantLevelApi = UsersMerchantLevelApi;
//# sourceMappingURL=usersMerchantLevelApi.js.map