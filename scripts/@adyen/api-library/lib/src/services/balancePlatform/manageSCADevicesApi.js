"use strict";
/*
 * The version of the OpenAPI document: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManageSCADevicesApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const models_1 = require("../../typings/balancePlatform/models");
const resource_1 = __importDefault(require("../resource"));
class ManageSCADevicesApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://balanceplatform-api-test.adyen.com/bcl/v2";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Complete an association between an SCA device and a resource
    * @param deviceId {@link string } The unique identifier of the SCA device that you are associating with a resource.
    * @param associationFinaliseRequest {@link AssociationFinaliseRequest }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link AssociationFinaliseResponse }
    */
    async completeAssociationBetweenScaDeviceAndResource(deviceId, associationFinaliseRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/registeredDevices/{deviceId}/associations`
            .replace("{" + "deviceId" + "}", encodeURIComponent(String(deviceId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(associationFinaliseRequest, "AssociationFinaliseRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "AssociationFinaliseResponse");
    }
    /**
    * @summary Complete the registration of an SCA device
    * @param id {@link string } The unique identifier of the SCA device. You obtain this &#x60;id&#x60; in the response of a POST&amp;nbsp;[/registeredDevices](https://docs.adyen.com/api-explorer/balanceplatform/2/post/registeredDevices#responses-200-id) request.
    * @param registerSCARequest {@link RegisterSCARequest }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link RegisterSCAFinalResponse }
    */
    async completeRegistrationOfScaDevice(id, registerSCARequest, requestOptions) {
        const endpoint = `${this.baseUrl}/registeredDevices/{id}`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(registerSCARequest, "RegisterSCARequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "RegisterSCAFinalResponse");
    }
    /**
    * @summary Delete a registration of an SCA device
    * @param id {@link string } The unique identifier of the SCA device.
    * @param requestOptions {@link IRequest.Options }
    * @param paymentInstrumentId {@link string } The unique identifier of the payment instrument linked to the SCA device.
    */
    async deleteRegistrationOfScaDevice(id, paymentInstrumentId, requestOptions) {
        const endpoint = `${this.baseUrl}/registeredDevices/{id}`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new resource_1.default(this, endpoint);
        const hasDefinedQueryParams = paymentInstrumentId;
        if (hasDefinedQueryParams) {
            if (!requestOptions)
                requestOptions = {};
            if (!requestOptions.params)
                requestOptions.params = {};
            if (paymentInstrumentId)
                requestOptions.params["paymentInstrumentId"] = paymentInstrumentId;
        }
        await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "DELETE" });
    }
    /**
    * @summary Initiate an association between an SCA device and a resource
    * @param deviceId {@link string } The unique identifier of the SCA device that you are associating with a resource.
    * @param associationInitiateRequest {@link AssociationInitiateRequest }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link AssociationInitiateResponse }
    */
    async initiateAssociationBetweenScaDeviceAndResource(deviceId, associationInitiateRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/registeredDevices/{deviceId}/associations`
            .replace("{" + "deviceId" + "}", encodeURIComponent(String(deviceId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(associationInitiateRequest, "AssociationInitiateRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "AssociationInitiateResponse");
    }
    /**
    * @summary Initiate the registration of an SCA device
    * @param registerSCARequest {@link RegisterSCARequest }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link RegisterSCAResponse }
    */
    async initiateRegistrationOfScaDevice(registerSCARequest, requestOptions) {
        const endpoint = `${this.baseUrl}/registeredDevices`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(registerSCARequest, "RegisterSCARequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "RegisterSCAResponse");
    }
    /**
    * @summary Get a list of registered SCA devices
    * @param requestOptions {@link IRequest.Options }
    * @param paymentInstrumentId {@link string } The unique identifier of a payment instrument. It limits the returned list to SCA devices associated to this payment instrument.
    * @param pageNumber {@link number } The index of the page to retrieve. The index of the first page is 0 (zero).  Default: 0.
    * @param pageSize {@link number } The number of items to have on a page.  Default: 20. Maximum: 100.
    * @return {@link SearchRegisteredDevicesResponse }
    */
    async listRegisteredScaDevices(paymentInstrumentId, pageNumber, pageSize, requestOptions) {
        var _a;
        const endpoint = `${this.baseUrl}/registeredDevices`;
        const resource = new resource_1.default(this, endpoint);
        const hasDefinedQueryParams = (_a = paymentInstrumentId !== null && paymentInstrumentId !== void 0 ? paymentInstrumentId : pageNumber) !== null && _a !== void 0 ? _a : pageSize;
        if (hasDefinedQueryParams) {
            if (!requestOptions)
                requestOptions = {};
            if (!requestOptions.params)
                requestOptions.params = {};
            if (paymentInstrumentId)
                requestOptions.params["paymentInstrumentId"] = paymentInstrumentId;
            if (pageNumber)
                requestOptions.params["pageNumber"] = pageNumber;
            if (pageSize)
                requestOptions.params["pageSize"] = pageSize;
        }
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "SearchRegisteredDevicesResponse");
    }
}
exports.ManageSCADevicesApi = ManageSCADevicesApi;
//# sourceMappingURL=manageSCADevicesApi.js.map