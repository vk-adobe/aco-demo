"use strict";
/*
 * The version of the OpenAPI document: v71
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecurringApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const models_1 = require("../../typings/checkout/models");
const resource_1 = __importDefault(require("../resource"));
class RecurringApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://checkout-test.adyen.com/v71";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Delete a token for stored payment details
    * @param storedPaymentMethodId {@link string } The unique identifier of the token.
    * @param requestOptions {@link IRequest.Options }
    * @param shopperReference {@link string } Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
    * @param merchantAccount {@link string } Your merchant account.
    */
    async deleteTokenForStoredPaymentDetails(storedPaymentMethodId, shopperReference, merchantAccount, requestOptions) {
        const endpoint = `${this.baseUrl}/storedPaymentMethods/{storedPaymentMethodId}`
            .replace("{" + "storedPaymentMethodId" + "}", encodeURIComponent(String(storedPaymentMethodId)));
        const resource = new resource_1.default(this, endpoint);
        const hasDefinedQueryParams = shopperReference !== null && shopperReference !== void 0 ? shopperReference : merchantAccount;
        if (hasDefinedQueryParams) {
            if (!requestOptions)
                requestOptions = {};
            if (!requestOptions.params)
                requestOptions.params = {};
            if (shopperReference)
                requestOptions.params["shopperReference"] = shopperReference;
            if (merchantAccount)
                requestOptions.params["merchantAccount"] = merchantAccount;
        }
        await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "DELETE" });
    }
    /**
    * @summary Get tokens for stored payment details
    * @param requestOptions {@link IRequest.Options }
    * @param shopperReference {@link string } Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
    * @param merchantAccount {@link string } Your merchant account.
    * @return {@link ListStoredPaymentMethodsResponse }
    */
    async getTokensForStoredPaymentDetails(shopperReference, merchantAccount, requestOptions) {
        const endpoint = `${this.baseUrl}/storedPaymentMethods`;
        const resource = new resource_1.default(this, endpoint);
        const hasDefinedQueryParams = shopperReference !== null && shopperReference !== void 0 ? shopperReference : merchantAccount;
        if (hasDefinedQueryParams) {
            if (!requestOptions)
                requestOptions = {};
            if (!requestOptions.params)
                requestOptions.params = {};
            if (shopperReference)
                requestOptions.params["shopperReference"] = shopperReference;
            if (merchantAccount)
                requestOptions.params["merchantAccount"] = merchantAccount;
        }
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "ListStoredPaymentMethodsResponse");
    }
    /**
    * @summary Create a token to store payment details
    * @param storedPaymentMethodRequest {@link StoredPaymentMethodRequest }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link StoredPaymentMethodResource }
    */
    async storedPaymentMethods(storedPaymentMethodRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/storedPaymentMethods`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(storedPaymentMethodRequest, "StoredPaymentMethodRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "StoredPaymentMethodResource");
    }
}
exports.RecurringApi = RecurringApi;
//# sourceMappingURL=recurringApi.js.map