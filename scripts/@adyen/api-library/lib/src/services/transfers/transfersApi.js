"use strict";
/*
 * The version of the OpenAPI document: v4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransfersApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const models_1 = require("../../typings/transfers/models");
const resource_1 = __importDefault(require("../resource"));
class TransfersApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://balanceplatform-api-test.adyen.com/btl/v4";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Approve initiated transfers
    * @param approveTransfersRequest {@link ApproveTransfersRequest }
    * @param requestOptions {@link IRequest.Options }
    */
    async approveInitiatedTransfers(approveTransfersRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/transfers/approve`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(approveTransfersRequest, "ApproveTransfersRequest");
        await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
    }
    /**
    * @summary Cancel initiated transfers
    * @param cancelTransfersRequest {@link CancelTransfersRequest }
    * @param requestOptions {@link IRequest.Options }
    */
    async cancelInitiatedTransfers(cancelTransfersRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/transfers/cancel`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(cancelTransfersRequest, "CancelTransfersRequest");
        await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
    }
    /**
    * @summary Get all transfers
    * @param requestOptions {@link IRequest.Options }
    * @param balancePlatform {@link string } The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id).  Required if you don\&#39;t provide a &#x60;balanceAccountId&#x60; or &#x60;accountHolderId&#x60;.
    * @param accountHolderId {@link string } The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/accountHolders/{id}__queryParam_id).  Required if you don\&#39;t provide a &#x60;balanceAccountId&#x60; or &#x60;balancePlatform&#x60;.  If you provide a &#x60;balanceAccountId&#x60;, the &#x60;accountHolderId&#x60; must be related to the &#x60;balanceAccountId&#x60;.
    * @param balanceAccountId {@link string } The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__queryParam_id).  Required if you don\&#39;t provide an &#x60;accountHolderId&#x60; or &#x60;balancePlatform&#x60;.  If you provide an &#x60;accountHolderId&#x60;, the &#x60;balanceAccountId&#x60; must be related to the &#x60;accountHolderId&#x60;.
    * @param paymentInstrumentId {@link string } The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/balanceplatform/latest/get/paymentInstruments/_id_).  To use this parameter, you must also provide a &#x60;balanceAccountId&#x60;, &#x60;accountHolderId&#x60;, or &#x60;balancePlatform&#x60;.  The &#x60;paymentInstrumentId&#x60; must be related to the &#x60;balanceAccountId&#x60; or &#x60;accountHolderId&#x60; that you provide.
    * @param reference {@link string } The reference you provided in the POST [/transfers](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers) request
    * @param category {@link &#39;bank&#39; | &#39;card&#39; | &#39;grants&#39; | &#39;internal&#39; | &#39;issuedCard&#39; | &#39;migration&#39; | &#39;platformPayment&#39; | &#39;topUp&#39; | &#39;upgrade&#39; } The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
    * @param createdSince {@link Date } Only include transfers that have been created on or after this point in time. The value must be in ISO 8601 format and not earlier than 6 months before the &#x60;createdUntil&#x60; date. For example, **2021-05-30T15:07:40Z**.
    * @param createdUntil {@link Date } Only include transfers that have been created on or before this point in time. The value must be in ISO 8601 format and not later than 6 months after the &#x60;createdSince&#x60; date. For example, **2021-05-30T15:07:40Z**.
    * @param cursor {@link string } The &#x60;cursor&#x60; returned in the links of the previous response.
    * @param limit {@link number } The number of items returned per page, maximum of 100 items. By default, the response returns 10 items per page.
    * @return {@link FindTransfersResponse }
    */
    async getAllTransfers(balancePlatform, accountHolderId, balanceAccountId, paymentInstrumentId, reference, category, createdSince, createdUntil, cursor, limit, requestOptions) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const endpoint = `${this.baseUrl}/transfers`;
        const resource = new resource_1.default(this, endpoint);
        const hasDefinedQueryParams = (_h = (_g = (_f = (_e = (_d = (_c = (_b = (_a = balancePlatform !== null && balancePlatform !== void 0 ? balancePlatform : accountHolderId) !== null && _a !== void 0 ? _a : balanceAccountId) !== null && _b !== void 0 ? _b : paymentInstrumentId) !== null && _c !== void 0 ? _c : reference) !== null && _d !== void 0 ? _d : category) !== null && _e !== void 0 ? _e : createdSince) !== null && _f !== void 0 ? _f : createdUntil) !== null && _g !== void 0 ? _g : cursor) !== null && _h !== void 0 ? _h : limit;
        if (hasDefinedQueryParams) {
            if (!requestOptions)
                requestOptions = {};
            if (!requestOptions.params)
                requestOptions.params = {};
            if (balancePlatform)
                requestOptions.params["balancePlatform"] = balancePlatform;
            if (accountHolderId)
                requestOptions.params["accountHolderId"] = accountHolderId;
            if (balanceAccountId)
                requestOptions.params["balanceAccountId"] = balanceAccountId;
            if (paymentInstrumentId)
                requestOptions.params["paymentInstrumentId"] = paymentInstrumentId;
            if (reference)
                requestOptions.params["reference"] = reference;
            if (category)
                requestOptions.params["category"] = category;
            if (createdSince)
                requestOptions.params["createdSince"] = createdSince.toISOString();
            if (createdUntil)
                requestOptions.params["createdUntil"] = createdUntil.toISOString();
            if (cursor)
                requestOptions.params["cursor"] = cursor;
            if (limit)
                requestOptions.params["limit"] = limit;
        }
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "FindTransfersResponse");
    }
    /**
    * @summary Get a transfer
    * @param id {@link string } Unique identifier of the transfer.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TransferData }
    */
    async getTransfer(id, requestOptions) {
        const endpoint = `${this.baseUrl}/transfers/{id}`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "TransferData");
    }
    /**
    * @summary Return a transfer
    * @param transferId {@link string } The unique identifier of the transfer to be returned.
    * @param returnTransferRequest {@link ReturnTransferRequest }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link ReturnTransferResponse }
    */
    async returnTransfer(transferId, returnTransferRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/transfers/{transferId}/returns`
            .replace("{" + "transferId" + "}", encodeURIComponent(String(transferId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(returnTransferRequest, "ReturnTransferRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "ReturnTransferResponse");
    }
    /**
    * @summary Transfer funds
    * @param transferInfo {@link TransferInfo }
    * @param requestOptions {@link IRequest.Options }
    * @return {@link Transfer }
    */
    async transferFunds(transferInfo, requestOptions) {
        const endpoint = `${this.baseUrl}/transfers`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(transferInfo, "TransferInfo");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "Transfer");
    }
}
exports.TransfersApi = TransfersApi;
//# sourceMappingURL=transfersApi.js.map