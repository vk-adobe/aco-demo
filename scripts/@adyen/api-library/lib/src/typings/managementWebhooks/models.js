"use strict";
/*
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./accountCapabilityData"), exports);
__exportStar(require("./accountCreateNotificationData"), exports);
__exportStar(require("./accountNotificationResponse"), exports);
__exportStar(require("./accountUpdateNotificationData"), exports);
__exportStar(require("./capabilityProblem"), exports);
__exportStar(require("./capabilityProblemEntity"), exports);
__exportStar(require("./capabilityProblemEntityRecursive"), exports);
__exportStar(require("./merchantCreatedNotificationRequest"), exports);
__exportStar(require("./merchantUpdatedNotificationRequest"), exports);
__exportStar(require("./midServiceNotificationData"), exports);
__exportStar(require("./paymentMethodCreatedNotificationRequest"), exports);
__exportStar(require("./paymentMethodNotificationResponse"), exports);
__exportStar(require("./paymentMethodRequestRemovedNotificationRequest"), exports);
__exportStar(require("./paymentMethodScheduledForRemovalNotificationRequest"), exports);
__exportStar(require("./remediatingAction"), exports);
__exportStar(require("./terminalAssignmentNotificationRequest"), exports);
__exportStar(require("./terminalAssignmentNotificationResponse"), exports);
__exportStar(require("./terminalBoardingData"), exports);
__exportStar(require("./terminalBoardingNotificationRequest"), exports);
__exportStar(require("./terminalBoardingNotificationResponse"), exports);
__exportStar(require("./terminalSettingsData"), exports);
__exportStar(require("./terminalSettingsNotificationRequest"), exports);
__exportStar(require("./terminalSettingsNotificationResponse"), exports);
__exportStar(require("./verificationError"), exports);
__exportStar(require("./verificationErrorRecursive"), exports);
const accountCapabilityData_1 = require("./accountCapabilityData");
const accountCreateNotificationData_1 = require("./accountCreateNotificationData");
const accountNotificationResponse_1 = require("./accountNotificationResponse");
const accountUpdateNotificationData_1 = require("./accountUpdateNotificationData");
const capabilityProblem_1 = require("./capabilityProblem");
const capabilityProblemEntity_1 = require("./capabilityProblemEntity");
const capabilityProblemEntityRecursive_1 = require("./capabilityProblemEntityRecursive");
const merchantCreatedNotificationRequest_1 = require("./merchantCreatedNotificationRequest");
const merchantUpdatedNotificationRequest_1 = require("./merchantUpdatedNotificationRequest");
const midServiceNotificationData_1 = require("./midServiceNotificationData");
const paymentMethodCreatedNotificationRequest_1 = require("./paymentMethodCreatedNotificationRequest");
const paymentMethodNotificationResponse_1 = require("./paymentMethodNotificationResponse");
const paymentMethodRequestRemovedNotificationRequest_1 = require("./paymentMethodRequestRemovedNotificationRequest");
const paymentMethodScheduledForRemovalNotificationRequest_1 = require("./paymentMethodScheduledForRemovalNotificationRequest");
const remediatingAction_1 = require("./remediatingAction");
const terminalAssignmentNotificationRequest_1 = require("./terminalAssignmentNotificationRequest");
const terminalAssignmentNotificationResponse_1 = require("./terminalAssignmentNotificationResponse");
const terminalBoardingData_1 = require("./terminalBoardingData");
const terminalBoardingNotificationRequest_1 = require("./terminalBoardingNotificationRequest");
const terminalBoardingNotificationResponse_1 = require("./terminalBoardingNotificationResponse");
const terminalSettingsData_1 = require("./terminalSettingsData");
const terminalSettingsNotificationRequest_1 = require("./terminalSettingsNotificationRequest");
const terminalSettingsNotificationResponse_1 = require("./terminalSettingsNotificationResponse");
const verificationError_1 = require("./verificationError");
const verificationErrorRecursive_1 = require("./verificationErrorRecursive");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "CapabilityProblemEntity.TypeEnum": capabilityProblemEntity_1.CapabilityProblemEntity.TypeEnum,
    "CapabilityProblemEntityRecursive.TypeEnum": capabilityProblemEntityRecursive_1.CapabilityProblemEntityRecursive.TypeEnum,
    "MerchantCreatedNotificationRequest.TypeEnum": merchantCreatedNotificationRequest_1.MerchantCreatedNotificationRequest.TypeEnum,
    "MerchantUpdatedNotificationRequest.TypeEnum": merchantUpdatedNotificationRequest_1.MerchantUpdatedNotificationRequest.TypeEnum,
    "MidServiceNotificationData.StatusEnum": midServiceNotificationData_1.MidServiceNotificationData.StatusEnum,
    "MidServiceNotificationData.VerificationStatusEnum": midServiceNotificationData_1.MidServiceNotificationData.VerificationStatusEnum,
    "PaymentMethodCreatedNotificationRequest.TypeEnum": paymentMethodCreatedNotificationRequest_1.PaymentMethodCreatedNotificationRequest.TypeEnum,
    "PaymentMethodRequestRemovedNotificationRequest.TypeEnum": paymentMethodRequestRemovedNotificationRequest_1.PaymentMethodRequestRemovedNotificationRequest.TypeEnum,
    "PaymentMethodScheduledForRemovalNotificationRequest.TypeEnum": paymentMethodScheduledForRemovalNotificationRequest_1.PaymentMethodScheduledForRemovalNotificationRequest.TypeEnum,
    "TerminalBoardingNotificationRequest.TypeEnum": terminalBoardingNotificationRequest_1.TerminalBoardingNotificationRequest.TypeEnum,
    "TerminalSettingsData.UpdateSourceEnum": terminalSettingsData_1.TerminalSettingsData.UpdateSourceEnum,
    "TerminalSettingsNotificationRequest.TypeEnum": terminalSettingsNotificationRequest_1.TerminalSettingsNotificationRequest.TypeEnum,
    "VerificationError.TypeEnum": verificationError_1.VerificationError.TypeEnum,
    "VerificationErrorRecursive.TypeEnum": verificationErrorRecursive_1.VerificationErrorRecursive.TypeEnum,
};
let typeMap = {
    "AccountCapabilityData": accountCapabilityData_1.AccountCapabilityData,
    "AccountCreateNotificationData": accountCreateNotificationData_1.AccountCreateNotificationData,
    "AccountNotificationResponse": accountNotificationResponse_1.AccountNotificationResponse,
    "AccountUpdateNotificationData": accountUpdateNotificationData_1.AccountUpdateNotificationData,
    "CapabilityProblem": capabilityProblem_1.CapabilityProblem,
    "CapabilityProblemEntity": capabilityProblemEntity_1.CapabilityProblemEntity,
    "CapabilityProblemEntityRecursive": capabilityProblemEntityRecursive_1.CapabilityProblemEntityRecursive,
    "MerchantCreatedNotificationRequest": merchantCreatedNotificationRequest_1.MerchantCreatedNotificationRequest,
    "MerchantUpdatedNotificationRequest": merchantUpdatedNotificationRequest_1.MerchantUpdatedNotificationRequest,
    "MidServiceNotificationData": midServiceNotificationData_1.MidServiceNotificationData,
    "PaymentMethodCreatedNotificationRequest": paymentMethodCreatedNotificationRequest_1.PaymentMethodCreatedNotificationRequest,
    "PaymentMethodNotificationResponse": paymentMethodNotificationResponse_1.PaymentMethodNotificationResponse,
    "PaymentMethodRequestRemovedNotificationRequest": paymentMethodRequestRemovedNotificationRequest_1.PaymentMethodRequestRemovedNotificationRequest,
    "PaymentMethodScheduledForRemovalNotificationRequest": paymentMethodScheduledForRemovalNotificationRequest_1.PaymentMethodScheduledForRemovalNotificationRequest,
    "RemediatingAction": remediatingAction_1.RemediatingAction,
    "TerminalAssignmentNotificationRequest": terminalAssignmentNotificationRequest_1.TerminalAssignmentNotificationRequest,
    "TerminalAssignmentNotificationResponse": terminalAssignmentNotificationResponse_1.TerminalAssignmentNotificationResponse,
    "TerminalBoardingData": terminalBoardingData_1.TerminalBoardingData,
    "TerminalBoardingNotificationRequest": terminalBoardingNotificationRequest_1.TerminalBoardingNotificationRequest,
    "TerminalBoardingNotificationResponse": terminalBoardingNotificationResponse_1.TerminalBoardingNotificationResponse,
    "TerminalSettingsData": terminalSettingsData_1.TerminalSettingsData,
    "TerminalSettingsNotificationRequest": terminalSettingsNotificationRequest_1.TerminalSettingsNotificationRequest,
    "TerminalSettingsNotificationResponse": terminalSettingsNotificationResponse_1.TerminalSettingsNotificationResponse,
    "VerificationError": verificationError_1.VerificationError,
    "VerificationErrorRecursive": verificationErrorRecursive_1.VerificationErrorRecursive,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map