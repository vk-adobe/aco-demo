import { Links } from './links';
import { StoreLocation } from './storeLocation';
import { StoreSplitConfiguration } from './storeSplitConfiguration';
export declare class Store {
    '_links'?: Links | null;
    'address'?: StoreLocation | null;
    /**
    * The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businesslines__resParam_id) that the store is associated with.  If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.
    */
    'businessLineIds'?: Array<string>;
    /**
    * The description of the store.
    */
    'description'?: string;
    /**
    * The unique identifier of the store, used by certain payment methods and tax authorities.  Required for CNPJ in Brazil, in the format 00.000.000/0000-00 separated by dots, slashes, hyphens, or without separators.  Optional for SIRET in France, up to 14 digits.  Optional for Zip in Australia, up to 50 digits.
    */
    'externalReferenceId'?: string;
    /**
    * The unique identifier of the store. This value is generated by Adyen.
    */
    'id'?: string;
    /**
    * The unique identifier of the merchant account that the store belongs to.
    */
    'merchantId'?: string;
    /**
    * The phone number of the store, including \'+\' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164.
    */
    'phoneNumber'?: string;
    /**
    * A reference to recognize the store by. Also known as the store code.  Allowed characters: lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_)
    */
    'reference'?: string;
    /**
    * The store name shown on the shopper\'s bank or credit card statement and on the shopper receipt.
    */
    'shopperStatement'?: string;
    'splitConfiguration'?: StoreSplitConfiguration | null;
    /**
    * The status of the store. Possible values are:  - **active**. This value is assigned automatically when a store is created.  - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible. - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.
    */
    'status'?: Store.StatusEnum;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace Store {
    enum StatusEnum {
        Active = "active",
        Closed = "closed",
        Inactive = "inactive"
    }
}
