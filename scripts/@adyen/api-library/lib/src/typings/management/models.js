"use strict";
/*
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./accelInfo"), exports);
__exportStar(require("./additionalCommission"), exports);
__exportStar(require("./additionalSettings"), exports);
__exportStar(require("./additionalSettingsResponse"), exports);
__exportStar(require("./address"), exports);
__exportStar(require("./affirmInfo"), exports);
__exportStar(require("./afterpayTouchInfo"), exports);
__exportStar(require("./allowedOrigin"), exports);
__exportStar(require("./allowedOriginsResponse"), exports);
__exportStar(require("./amexInfo"), exports);
__exportStar(require("./amount"), exports);
__exportStar(require("./androidApp"), exports);
__exportStar(require("./androidAppError"), exports);
__exportStar(require("./androidAppsResponse"), exports);
__exportStar(require("./androidCertificate"), exports);
__exportStar(require("./androidCertificatesResponse"), exports);
__exportStar(require("./apiCredential"), exports);
__exportStar(require("./apiCredentialLinks"), exports);
__exportStar(require("./applePayInfo"), exports);
__exportStar(require("./bcmcInfo"), exports);
__exportStar(require("./billingEntitiesResponse"), exports);
__exportStar(require("./billingEntity"), exports);
__exportStar(require("./cardholderReceipt"), exports);
__exportStar(require("./cartesBancairesInfo"), exports);
__exportStar(require("./clearpayInfo"), exports);
__exportStar(require("./commission"), exports);
__exportStar(require("./company"), exports);
__exportStar(require("./companyApiCredential"), exports);
__exportStar(require("./companyLinks"), exports);
__exportStar(require("./companyUser"), exports);
__exportStar(require("./configuration"), exports);
__exportStar(require("./connectivity"), exports);
__exportStar(require("./contact"), exports);
__exportStar(require("./createAllowedOriginRequest"), exports);
__exportStar(require("./createApiCredentialResponse"), exports);
__exportStar(require("./createCompanyApiCredentialRequest"), exports);
__exportStar(require("./createCompanyApiCredentialResponse"), exports);
__exportStar(require("./createCompanyUserRequest"), exports);
__exportStar(require("./createCompanyUserResponse"), exports);
__exportStar(require("./createCompanyWebhookRequest"), exports);
__exportStar(require("./createMerchantApiCredentialRequest"), exports);
__exportStar(require("./createMerchantRequest"), exports);
__exportStar(require("./createMerchantResponse"), exports);
__exportStar(require("./createMerchantUserRequest"), exports);
__exportStar(require("./createMerchantWebhookRequest"), exports);
__exportStar(require("./createUserResponse"), exports);
__exportStar(require("./currency"), exports);
__exportStar(require("./customNotification"), exports);
__exportStar(require("./dataCenter"), exports);
__exportStar(require("./dinersInfo"), exports);
__exportStar(require("./eventUrl"), exports);
__exportStar(require("./externalTerminalAction"), exports);
__exportStar(require("./generateApiKeyResponse"), exports);
__exportStar(require("./generateClientKeyResponse"), exports);
__exportStar(require("./generateHmacKeyResponse"), exports);
__exportStar(require("./genericPmWithTdiInfo"), exports);
__exportStar(require("./googlePayInfo"), exports);
__exportStar(require("./gratuity"), exports);
__exportStar(require("./hardware"), exports);
__exportStar(require("./idName"), exports);
__exportStar(require("./installAndroidAppDetails"), exports);
__exportStar(require("./installAndroidCertificateDetails"), exports);
__exportStar(require("./invalidField"), exports);
__exportStar(require("./jCBInfo"), exports);
__exportStar(require("./key"), exports);
__exportStar(require("./klarnaInfo"), exports);
__exportStar(require("./links"), exports);
__exportStar(require("./linksElement"), exports);
__exportStar(require("./listCompanyApiCredentialsResponse"), exports);
__exportStar(require("./listCompanyResponse"), exports);
__exportStar(require("./listCompanyUsersResponse"), exports);
__exportStar(require("./listExternalTerminalActionsResponse"), exports);
__exportStar(require("./listMerchantApiCredentialsResponse"), exports);
__exportStar(require("./listMerchantResponse"), exports);
__exportStar(require("./listMerchantUsersResponse"), exports);
__exportStar(require("./listStoresResponse"), exports);
__exportStar(require("./listTerminalsResponse"), exports);
__exportStar(require("./listWebhooksResponse"), exports);
__exportStar(require("./localization"), exports);
__exportStar(require("./logo"), exports);
__exportStar(require("./meApiCredential"), exports);
__exportStar(require("./mealVoucherFRInfo"), exports);
__exportStar(require("./merchant"), exports);
__exportStar(require("./merchantLinks"), exports);
__exportStar(require("./minorUnitsMonetaryValue"), exports);
__exportStar(require("./modelFile"), exports);
__exportStar(require("./name"), exports);
__exportStar(require("./name2"), exports);
__exportStar(require("./nexo"), exports);
__exportStar(require("./notification"), exports);
__exportStar(require("./notificationUrl"), exports);
__exportStar(require("./nyceInfo"), exports);
__exportStar(require("./offlineProcessing"), exports);
__exportStar(require("./opi"), exports);
__exportStar(require("./orderItem"), exports);
__exportStar(require("./paginationLinks"), exports);
__exportStar(require("./passcodes"), exports);
__exportStar(require("./payAtTable"), exports);
__exportStar(require("./payByBankPlaidInfo"), exports);
__exportStar(require("./payMeInfo"), exports);
__exportStar(require("./payPalInfo"), exports);
__exportStar(require("./payToInfo"), exports);
__exportStar(require("./payment"), exports);
__exportStar(require("./paymentMethod"), exports);
__exportStar(require("./paymentMethodResponse"), exports);
__exportStar(require("./paymentMethodSetupInfo"), exports);
__exportStar(require("./payoutSettings"), exports);
__exportStar(require("./payoutSettingsRequest"), exports);
__exportStar(require("./payoutSettingsResponse"), exports);
__exportStar(require("./profile"), exports);
__exportStar(require("./pulseInfo"), exports);
__exportStar(require("./receiptOptions"), exports);
__exportStar(require("./receiptPrinting"), exports);
__exportStar(require("./referenced"), exports);
__exportStar(require("./refunds"), exports);
__exportStar(require("./releaseUpdateDetails"), exports);
__exportStar(require("./reprocessAndroidAppResponse"), exports);
__exportStar(require("./requestActivationResponse"), exports);
__exportStar(require("./restServiceError"), exports);
__exportStar(require("./scheduleTerminalActionsRequest"), exports);
__exportStar(require("./scheduleTerminalActionsResponse"), exports);
__exportStar(require("./settings"), exports);
__exportStar(require("./shippingLocation"), exports);
__exportStar(require("./shippingLocationsResponse"), exports);
__exportStar(require("./signature"), exports);
__exportStar(require("./sodexoInfo"), exports);
__exportStar(require("./sofortInfo"), exports);
__exportStar(require("./splitConfiguration"), exports);
__exportStar(require("./splitConfigurationList"), exports);
__exportStar(require("./splitConfigurationLogic"), exports);
__exportStar(require("./splitConfigurationRule"), exports);
__exportStar(require("./standalone"), exports);
__exportStar(require("./starInfo"), exports);
__exportStar(require("./store"), exports);
__exportStar(require("./storeAndForward"), exports);
__exportStar(require("./storeCreationRequest"), exports);
__exportStar(require("./storeCreationWithMerchantCodeRequest"), exports);
__exportStar(require("./storeLocation"), exports);
__exportStar(require("./storeSplitConfiguration"), exports);
__exportStar(require("./supportedCardTypes"), exports);
__exportStar(require("./surcharge"), exports);
__exportStar(require("./swishInfo"), exports);
__exportStar(require("./tapToPay"), exports);
__exportStar(require("./terminal"), exports);
__exportStar(require("./terminalActionScheduleDetail"), exports);
__exportStar(require("./terminalAssignment"), exports);
__exportStar(require("./terminalConnectivity"), exports);
__exportStar(require("./terminalConnectivityBluetooth"), exports);
__exportStar(require("./terminalConnectivityCellular"), exports);
__exportStar(require("./terminalConnectivityEthernet"), exports);
__exportStar(require("./terminalConnectivityWifi"), exports);
__exportStar(require("./terminalInstructions"), exports);
__exportStar(require("./terminalModelsResponse"), exports);
__exportStar(require("./terminalOrder"), exports);
__exportStar(require("./terminalOrderRequest"), exports);
__exportStar(require("./terminalOrdersResponse"), exports);
__exportStar(require("./terminalProduct"), exports);
__exportStar(require("./terminalProductPrice"), exports);
__exportStar(require("./terminalProductsResponse"), exports);
__exportStar(require("./terminalReassignmentRequest"), exports);
__exportStar(require("./terminalReassignmentTarget"), exports);
__exportStar(require("./terminalSettings"), exports);
__exportStar(require("./testCompanyWebhookRequest"), exports);
__exportStar(require("./testOutput"), exports);
__exportStar(require("./testWebhookRequest"), exports);
__exportStar(require("./testWebhookResponse"), exports);
__exportStar(require("./ticketInfo"), exports);
__exportStar(require("./timeouts"), exports);
__exportStar(require("./transactionDescriptionInfo"), exports);
__exportStar(require("./twintInfo"), exports);
__exportStar(require("./uninstallAndroidAppDetails"), exports);
__exportStar(require("./uninstallAndroidCertificateDetails"), exports);
__exportStar(require("./updatableAddress"), exports);
__exportStar(require("./updateCompanyApiCredentialRequest"), exports);
__exportStar(require("./updateCompanyUserRequest"), exports);
__exportStar(require("./updateCompanyWebhookRequest"), exports);
__exportStar(require("./updateMerchantApiCredentialRequest"), exports);
__exportStar(require("./updateMerchantUserRequest"), exports);
__exportStar(require("./updateMerchantWebhookRequest"), exports);
__exportStar(require("./updatePaymentMethodInfo"), exports);
__exportStar(require("./updatePayoutSettingsRequest"), exports);
__exportStar(require("./updateSplitConfigurationLogicRequest"), exports);
__exportStar(require("./updateSplitConfigurationRequest"), exports);
__exportStar(require("./updateSplitConfigurationRuleRequest"), exports);
__exportStar(require("./updateStoreRequest"), exports);
__exportStar(require("./uploadAndroidAppResponse"), exports);
__exportStar(require("./uploadAndroidCertificateResponse"), exports);
__exportStar(require("./url"), exports);
__exportStar(require("./user"), exports);
__exportStar(require("./vippsInfo"), exports);
__exportStar(require("./weChatPayInfo"), exports);
__exportStar(require("./weChatPayPosInfo"), exports);
__exportStar(require("./webhook"), exports);
__exportStar(require("./webhookLinks"), exports);
__exportStar(require("./wifiProfiles"), exports);
const accelInfo_1 = require("./accelInfo");
const additionalCommission_1 = require("./additionalCommission");
const additionalSettings_1 = require("./additionalSettings");
const additionalSettingsResponse_1 = require("./additionalSettingsResponse");
const address_1 = require("./address");
const affirmInfo_1 = require("./affirmInfo");
const afterpayTouchInfo_1 = require("./afterpayTouchInfo");
const allowedOrigin_1 = require("./allowedOrigin");
const allowedOriginsResponse_1 = require("./allowedOriginsResponse");
const amexInfo_1 = require("./amexInfo");
const amount_1 = require("./amount");
const androidApp_1 = require("./androidApp");
const androidAppError_1 = require("./androidAppError");
const androidAppsResponse_1 = require("./androidAppsResponse");
const androidCertificate_1 = require("./androidCertificate");
const androidCertificatesResponse_1 = require("./androidCertificatesResponse");
const apiCredential_1 = require("./apiCredential");
const apiCredentialLinks_1 = require("./apiCredentialLinks");
const applePayInfo_1 = require("./applePayInfo");
const bcmcInfo_1 = require("./bcmcInfo");
const billingEntitiesResponse_1 = require("./billingEntitiesResponse");
const billingEntity_1 = require("./billingEntity");
const cardholderReceipt_1 = require("./cardholderReceipt");
const cartesBancairesInfo_1 = require("./cartesBancairesInfo");
const clearpayInfo_1 = require("./clearpayInfo");
const commission_1 = require("./commission");
const company_1 = require("./company");
const companyApiCredential_1 = require("./companyApiCredential");
const companyLinks_1 = require("./companyLinks");
const companyUser_1 = require("./companyUser");
const configuration_1 = require("./configuration");
const connectivity_1 = require("./connectivity");
const contact_1 = require("./contact");
const createAllowedOriginRequest_1 = require("./createAllowedOriginRequest");
const createApiCredentialResponse_1 = require("./createApiCredentialResponse");
const createCompanyApiCredentialRequest_1 = require("./createCompanyApiCredentialRequest");
const createCompanyApiCredentialResponse_1 = require("./createCompanyApiCredentialResponse");
const createCompanyUserRequest_1 = require("./createCompanyUserRequest");
const createCompanyUserResponse_1 = require("./createCompanyUserResponse");
const createCompanyWebhookRequest_1 = require("./createCompanyWebhookRequest");
const createMerchantApiCredentialRequest_1 = require("./createMerchantApiCredentialRequest");
const createMerchantRequest_1 = require("./createMerchantRequest");
const createMerchantResponse_1 = require("./createMerchantResponse");
const createMerchantUserRequest_1 = require("./createMerchantUserRequest");
const createMerchantWebhookRequest_1 = require("./createMerchantWebhookRequest");
const createUserResponse_1 = require("./createUserResponse");
const currency_1 = require("./currency");
const customNotification_1 = require("./customNotification");
const dataCenter_1 = require("./dataCenter");
const dinersInfo_1 = require("./dinersInfo");
const eventUrl_1 = require("./eventUrl");
const externalTerminalAction_1 = require("./externalTerminalAction");
const generateApiKeyResponse_1 = require("./generateApiKeyResponse");
const generateClientKeyResponse_1 = require("./generateClientKeyResponse");
const generateHmacKeyResponse_1 = require("./generateHmacKeyResponse");
const genericPmWithTdiInfo_1 = require("./genericPmWithTdiInfo");
const googlePayInfo_1 = require("./googlePayInfo");
const gratuity_1 = require("./gratuity");
const hardware_1 = require("./hardware");
const idName_1 = require("./idName");
const installAndroidAppDetails_1 = require("./installAndroidAppDetails");
const installAndroidCertificateDetails_1 = require("./installAndroidCertificateDetails");
const invalidField_1 = require("./invalidField");
const jCBInfo_1 = require("./jCBInfo");
const key_1 = require("./key");
const klarnaInfo_1 = require("./klarnaInfo");
const links_1 = require("./links");
const linksElement_1 = require("./linksElement");
const listCompanyApiCredentialsResponse_1 = require("./listCompanyApiCredentialsResponse");
const listCompanyResponse_1 = require("./listCompanyResponse");
const listCompanyUsersResponse_1 = require("./listCompanyUsersResponse");
const listExternalTerminalActionsResponse_1 = require("./listExternalTerminalActionsResponse");
const listMerchantApiCredentialsResponse_1 = require("./listMerchantApiCredentialsResponse");
const listMerchantResponse_1 = require("./listMerchantResponse");
const listMerchantUsersResponse_1 = require("./listMerchantUsersResponse");
const listStoresResponse_1 = require("./listStoresResponse");
const listTerminalsResponse_1 = require("./listTerminalsResponse");
const listWebhooksResponse_1 = require("./listWebhooksResponse");
const localization_1 = require("./localization");
const logo_1 = require("./logo");
const meApiCredential_1 = require("./meApiCredential");
const mealVoucherFRInfo_1 = require("./mealVoucherFRInfo");
const merchant_1 = require("./merchant");
const merchantLinks_1 = require("./merchantLinks");
const minorUnitsMonetaryValue_1 = require("./minorUnitsMonetaryValue");
const modelFile_1 = require("./modelFile");
const name_1 = require("./name");
const name2_1 = require("./name2");
const nexo_1 = require("./nexo");
const notification_1 = require("./notification");
const notificationUrl_1 = require("./notificationUrl");
const nyceInfo_1 = require("./nyceInfo");
const offlineProcessing_1 = require("./offlineProcessing");
const opi_1 = require("./opi");
const orderItem_1 = require("./orderItem");
const paginationLinks_1 = require("./paginationLinks");
const passcodes_1 = require("./passcodes");
const payAtTable_1 = require("./payAtTable");
const payByBankPlaidInfo_1 = require("./payByBankPlaidInfo");
const payMeInfo_1 = require("./payMeInfo");
const payPalInfo_1 = require("./payPalInfo");
const payToInfo_1 = require("./payToInfo");
const payment_1 = require("./payment");
const paymentMethod_1 = require("./paymentMethod");
const paymentMethodResponse_1 = require("./paymentMethodResponse");
const paymentMethodSetupInfo_1 = require("./paymentMethodSetupInfo");
const payoutSettings_1 = require("./payoutSettings");
const payoutSettingsRequest_1 = require("./payoutSettingsRequest");
const payoutSettingsResponse_1 = require("./payoutSettingsResponse");
const profile_1 = require("./profile");
const pulseInfo_1 = require("./pulseInfo");
const receiptOptions_1 = require("./receiptOptions");
const receiptPrinting_1 = require("./receiptPrinting");
const referenced_1 = require("./referenced");
const refunds_1 = require("./refunds");
const releaseUpdateDetails_1 = require("./releaseUpdateDetails");
const reprocessAndroidAppResponse_1 = require("./reprocessAndroidAppResponse");
const requestActivationResponse_1 = require("./requestActivationResponse");
const restServiceError_1 = require("./restServiceError");
const scheduleTerminalActionsRequest_1 = require("./scheduleTerminalActionsRequest");
const scheduleTerminalActionsResponse_1 = require("./scheduleTerminalActionsResponse");
const settings_1 = require("./settings");
const shippingLocation_1 = require("./shippingLocation");
const shippingLocationsResponse_1 = require("./shippingLocationsResponse");
const signature_1 = require("./signature");
const sodexoInfo_1 = require("./sodexoInfo");
const sofortInfo_1 = require("./sofortInfo");
const splitConfiguration_1 = require("./splitConfiguration");
const splitConfigurationList_1 = require("./splitConfigurationList");
const splitConfigurationLogic_1 = require("./splitConfigurationLogic");
const splitConfigurationRule_1 = require("./splitConfigurationRule");
const standalone_1 = require("./standalone");
const starInfo_1 = require("./starInfo");
const store_1 = require("./store");
const storeAndForward_1 = require("./storeAndForward");
const storeCreationRequest_1 = require("./storeCreationRequest");
const storeCreationWithMerchantCodeRequest_1 = require("./storeCreationWithMerchantCodeRequest");
const storeLocation_1 = require("./storeLocation");
const storeSplitConfiguration_1 = require("./storeSplitConfiguration");
const supportedCardTypes_1 = require("./supportedCardTypes");
const surcharge_1 = require("./surcharge");
const swishInfo_1 = require("./swishInfo");
const tapToPay_1 = require("./tapToPay");
const terminal_1 = require("./terminal");
const terminalActionScheduleDetail_1 = require("./terminalActionScheduleDetail");
const terminalAssignment_1 = require("./terminalAssignment");
const terminalConnectivity_1 = require("./terminalConnectivity");
const terminalConnectivityBluetooth_1 = require("./terminalConnectivityBluetooth");
const terminalConnectivityCellular_1 = require("./terminalConnectivityCellular");
const terminalConnectivityEthernet_1 = require("./terminalConnectivityEthernet");
const terminalConnectivityWifi_1 = require("./terminalConnectivityWifi");
const terminalInstructions_1 = require("./terminalInstructions");
const terminalModelsResponse_1 = require("./terminalModelsResponse");
const terminalOrder_1 = require("./terminalOrder");
const terminalOrderRequest_1 = require("./terminalOrderRequest");
const terminalOrdersResponse_1 = require("./terminalOrdersResponse");
const terminalProduct_1 = require("./terminalProduct");
const terminalProductPrice_1 = require("./terminalProductPrice");
const terminalProductsResponse_1 = require("./terminalProductsResponse");
const terminalReassignmentRequest_1 = require("./terminalReassignmentRequest");
const terminalReassignmentTarget_1 = require("./terminalReassignmentTarget");
const terminalSettings_1 = require("./terminalSettings");
const testCompanyWebhookRequest_1 = require("./testCompanyWebhookRequest");
const testOutput_1 = require("./testOutput");
const testWebhookRequest_1 = require("./testWebhookRequest");
const testWebhookResponse_1 = require("./testWebhookResponse");
const ticketInfo_1 = require("./ticketInfo");
const timeouts_1 = require("./timeouts");
const transactionDescriptionInfo_1 = require("./transactionDescriptionInfo");
const twintInfo_1 = require("./twintInfo");
const uninstallAndroidAppDetails_1 = require("./uninstallAndroidAppDetails");
const uninstallAndroidCertificateDetails_1 = require("./uninstallAndroidCertificateDetails");
const updatableAddress_1 = require("./updatableAddress");
const updateCompanyApiCredentialRequest_1 = require("./updateCompanyApiCredentialRequest");
const updateCompanyUserRequest_1 = require("./updateCompanyUserRequest");
const updateCompanyWebhookRequest_1 = require("./updateCompanyWebhookRequest");
const updateMerchantApiCredentialRequest_1 = require("./updateMerchantApiCredentialRequest");
const updateMerchantUserRequest_1 = require("./updateMerchantUserRequest");
const updateMerchantWebhookRequest_1 = require("./updateMerchantWebhookRequest");
const updatePaymentMethodInfo_1 = require("./updatePaymentMethodInfo");
const updatePayoutSettingsRequest_1 = require("./updatePayoutSettingsRequest");
const updateSplitConfigurationLogicRequest_1 = require("./updateSplitConfigurationLogicRequest");
const updateSplitConfigurationRequest_1 = require("./updateSplitConfigurationRequest");
const updateSplitConfigurationRuleRequest_1 = require("./updateSplitConfigurationRuleRequest");
const updateStoreRequest_1 = require("./updateStoreRequest");
const uploadAndroidAppResponse_1 = require("./uploadAndroidAppResponse");
const uploadAndroidCertificateResponse_1 = require("./uploadAndroidCertificateResponse");
const url_1 = require("./url");
const user_1 = require("./user");
const vippsInfo_1 = require("./vippsInfo");
const weChatPayInfo_1 = require("./weChatPayInfo");
const weChatPayPosInfo_1 = require("./weChatPayPosInfo");
const webhook_1 = require("./webhook");
const webhookLinks_1 = require("./webhookLinks");
const wifiProfiles_1 = require("./wifiProfiles");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "AccelInfo.ProcessingTypeEnum": accelInfo_1.AccelInfo.ProcessingTypeEnum,
    "AmexInfo.ServiceLevelEnum": amexInfo_1.AmexInfo.ServiceLevelEnum,
    "AndroidApp.StatusEnum": androidApp_1.AndroidApp.StatusEnum,
    "Connectivity.SimcardStatusEnum": connectivity_1.Connectivity.SimcardStatusEnum,
    "CreateCompanyWebhookRequest.CommunicationFormatEnum": createCompanyWebhookRequest_1.CreateCompanyWebhookRequest.CommunicationFormatEnum,
    "CreateCompanyWebhookRequest.EncryptionProtocolEnum": createCompanyWebhookRequest_1.CreateCompanyWebhookRequest.EncryptionProtocolEnum,
    "CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum": createCompanyWebhookRequest_1.CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum,
    "CreateCompanyWebhookRequest.NetworkTypeEnum": createCompanyWebhookRequest_1.CreateCompanyWebhookRequest.NetworkTypeEnum,
    "CreateMerchantWebhookRequest.CommunicationFormatEnum": createMerchantWebhookRequest_1.CreateMerchantWebhookRequest.CommunicationFormatEnum,
    "CreateMerchantWebhookRequest.EncryptionProtocolEnum": createMerchantWebhookRequest_1.CreateMerchantWebhookRequest.EncryptionProtocolEnum,
    "CreateMerchantWebhookRequest.NetworkTypeEnum": createMerchantWebhookRequest_1.CreateMerchantWebhookRequest.NetworkTypeEnum,
    "DinersInfo.ServiceLevelEnum": dinersInfo_1.DinersInfo.ServiceLevelEnum,
    "InstallAndroidAppDetails.TypeEnum": installAndroidAppDetails_1.InstallAndroidAppDetails.TypeEnum,
    "InstallAndroidCertificateDetails.TypeEnum": installAndroidCertificateDetails_1.InstallAndroidCertificateDetails.TypeEnum,
    "JCBInfo.ServiceLevelEnum": jCBInfo_1.JCBInfo.ServiceLevelEnum,
    "KlarnaInfo.RegionEnum": klarnaInfo_1.KlarnaInfo.RegionEnum,
    "Notification.CategoryEnum": notification_1.Notification.CategoryEnum,
    "NyceInfo.ProcessingTypeEnum": nyceInfo_1.NyceInfo.ProcessingTypeEnum,
    "PayAtTable.AuthenticationMethodEnum": payAtTable_1.PayAtTable.AuthenticationMethodEnum,
    "PayAtTable.PaymentInstrumentEnum": payAtTable_1.PayAtTable.PaymentInstrumentEnum,
    "PaymentMethod.VerificationStatusEnum": paymentMethod_1.PaymentMethod.VerificationStatusEnum,
    "PaymentMethodResponse.TypesWithErrorsEnum": paymentMethodResponse_1.PaymentMethodResponse.TypesWithErrorsEnum,
    "PaymentMethodSetupInfo.ShopperInteractionEnum": paymentMethodSetupInfo_1.PaymentMethodSetupInfo.ShopperInteractionEnum,
    "PaymentMethodSetupInfo.TypeEnum": paymentMethodSetupInfo_1.PaymentMethodSetupInfo.TypeEnum,
    "PayoutSettings.PriorityEnum": payoutSettings_1.PayoutSettings.PriorityEnum,
    "PayoutSettings.VerificationStatusEnum": payoutSettings_1.PayoutSettings.VerificationStatusEnum,
    "PulseInfo.ProcessingTypeEnum": pulseInfo_1.PulseInfo.ProcessingTypeEnum,
    "ReleaseUpdateDetails.TypeEnum": releaseUpdateDetails_1.ReleaseUpdateDetails.TypeEnum,
    "SplitConfigurationLogic.AcquiringFeesEnum": splitConfigurationLogic_1.SplitConfigurationLogic.AcquiringFeesEnum,
    "SplitConfigurationLogic.AdyenCommissionEnum": splitConfigurationLogic_1.SplitConfigurationLogic.AdyenCommissionEnum,
    "SplitConfigurationLogic.AdyenFeesEnum": splitConfigurationLogic_1.SplitConfigurationLogic.AdyenFeesEnum,
    "SplitConfigurationLogic.AdyenMarkupEnum": splitConfigurationLogic_1.SplitConfigurationLogic.AdyenMarkupEnum,
    "SplitConfigurationLogic.ChargebackEnum": splitConfigurationLogic_1.SplitConfigurationLogic.ChargebackEnum,
    "SplitConfigurationLogic.ChargebackCostAllocationEnum": splitConfigurationLogic_1.SplitConfigurationLogic.ChargebackCostAllocationEnum,
    "SplitConfigurationLogic.InterchangeEnum": splitConfigurationLogic_1.SplitConfigurationLogic.InterchangeEnum,
    "SplitConfigurationLogic.PaymentFeeEnum": splitConfigurationLogic_1.SplitConfigurationLogic.PaymentFeeEnum,
    "SplitConfigurationLogic.RefundEnum": splitConfigurationLogic_1.SplitConfigurationLogic.RefundEnum,
    "SplitConfigurationLogic.RefundCostAllocationEnum": splitConfigurationLogic_1.SplitConfigurationLogic.RefundCostAllocationEnum,
    "SplitConfigurationLogic.RemainderEnum": splitConfigurationLogic_1.SplitConfigurationLogic.RemainderEnum,
    "SplitConfigurationLogic.SchemeFeeEnum": splitConfigurationLogic_1.SplitConfigurationLogic.SchemeFeeEnum,
    "SplitConfigurationLogic.SurchargeEnum": splitConfigurationLogic_1.SplitConfigurationLogic.SurchargeEnum,
    "SplitConfigurationLogic.TipEnum": splitConfigurationLogic_1.SplitConfigurationLogic.TipEnum,
    "SplitConfigurationRule.FundingSourceEnum": splitConfigurationRule_1.SplitConfigurationRule.FundingSourceEnum,
    "SplitConfigurationRule.ShopperInteractionEnum": splitConfigurationRule_1.SplitConfigurationRule.ShopperInteractionEnum,
    "StarInfo.ProcessingTypeEnum": starInfo_1.StarInfo.ProcessingTypeEnum,
    "Store.StatusEnum": store_1.Store.StatusEnum,
    "TerminalAssignment.StatusEnum": terminalAssignment_1.TerminalAssignment.StatusEnum,
    "TerminalConnectivityCellular.StatusEnum": terminalConnectivityCellular_1.TerminalConnectivityCellular.StatusEnum,
    "TransactionDescriptionInfo.TypeEnum": transactionDescriptionInfo_1.TransactionDescriptionInfo.TypeEnum,
    "UninstallAndroidAppDetails.TypeEnum": uninstallAndroidAppDetails_1.UninstallAndroidAppDetails.TypeEnum,
    "UninstallAndroidCertificateDetails.TypeEnum": uninstallAndroidCertificateDetails_1.UninstallAndroidCertificateDetails.TypeEnum,
    "UpdateCompanyWebhookRequest.CommunicationFormatEnum": updateCompanyWebhookRequest_1.UpdateCompanyWebhookRequest.CommunicationFormatEnum,
    "UpdateCompanyWebhookRequest.EncryptionProtocolEnum": updateCompanyWebhookRequest_1.UpdateCompanyWebhookRequest.EncryptionProtocolEnum,
    "UpdateCompanyWebhookRequest.FilterMerchantAccountTypeEnum": updateCompanyWebhookRequest_1.UpdateCompanyWebhookRequest.FilterMerchantAccountTypeEnum,
    "UpdateCompanyWebhookRequest.NetworkTypeEnum": updateCompanyWebhookRequest_1.UpdateCompanyWebhookRequest.NetworkTypeEnum,
    "UpdateMerchantWebhookRequest.CommunicationFormatEnum": updateMerchantWebhookRequest_1.UpdateMerchantWebhookRequest.CommunicationFormatEnum,
    "UpdateMerchantWebhookRequest.EncryptionProtocolEnum": updateMerchantWebhookRequest_1.UpdateMerchantWebhookRequest.EncryptionProtocolEnum,
    "UpdateMerchantWebhookRequest.NetworkTypeEnum": updateMerchantWebhookRequest_1.UpdateMerchantWebhookRequest.NetworkTypeEnum,
    "UpdateSplitConfigurationLogicRequest.AcquiringFeesEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.AcquiringFeesEnum,
    "UpdateSplitConfigurationLogicRequest.AdyenCommissionEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.AdyenCommissionEnum,
    "UpdateSplitConfigurationLogicRequest.AdyenFeesEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.AdyenFeesEnum,
    "UpdateSplitConfigurationLogicRequest.AdyenMarkupEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.AdyenMarkupEnum,
    "UpdateSplitConfigurationLogicRequest.ChargebackEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.ChargebackEnum,
    "UpdateSplitConfigurationLogicRequest.ChargebackCostAllocationEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.ChargebackCostAllocationEnum,
    "UpdateSplitConfigurationLogicRequest.InterchangeEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.InterchangeEnum,
    "UpdateSplitConfigurationLogicRequest.PaymentFeeEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.PaymentFeeEnum,
    "UpdateSplitConfigurationLogicRequest.RefundEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.RefundEnum,
    "UpdateSplitConfigurationLogicRequest.RefundCostAllocationEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.RefundCostAllocationEnum,
    "UpdateSplitConfigurationLogicRequest.RemainderEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.RemainderEnum,
    "UpdateSplitConfigurationLogicRequest.SchemeFeeEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.SchemeFeeEnum,
    "UpdateSplitConfigurationLogicRequest.SurchargeEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.SurchargeEnum,
    "UpdateSplitConfigurationLogicRequest.TipEnum": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest.TipEnum,
    "UpdateStoreRequest.StatusEnum": updateStoreRequest_1.UpdateStoreRequest.StatusEnum,
    "Webhook.CommunicationFormatEnum": webhook_1.Webhook.CommunicationFormatEnum,
    "Webhook.EncryptionProtocolEnum": webhook_1.Webhook.EncryptionProtocolEnum,
    "Webhook.FilterMerchantAccountTypeEnum": webhook_1.Webhook.FilterMerchantAccountTypeEnum,
    "Webhook.NetworkTypeEnum": webhook_1.Webhook.NetworkTypeEnum,
};
let typeMap = {
    "AccelInfo": accelInfo_1.AccelInfo,
    "AdditionalCommission": additionalCommission_1.AdditionalCommission,
    "AdditionalSettings": additionalSettings_1.AdditionalSettings,
    "AdditionalSettingsResponse": additionalSettingsResponse_1.AdditionalSettingsResponse,
    "Address": address_1.Address,
    "AffirmInfo": affirmInfo_1.AffirmInfo,
    "AfterpayTouchInfo": afterpayTouchInfo_1.AfterpayTouchInfo,
    "AllowedOrigin": allowedOrigin_1.AllowedOrigin,
    "AllowedOriginsResponse": allowedOriginsResponse_1.AllowedOriginsResponse,
    "AmexInfo": amexInfo_1.AmexInfo,
    "Amount": amount_1.Amount,
    "AndroidApp": androidApp_1.AndroidApp,
    "AndroidAppError": androidAppError_1.AndroidAppError,
    "AndroidAppsResponse": androidAppsResponse_1.AndroidAppsResponse,
    "AndroidCertificate": androidCertificate_1.AndroidCertificate,
    "AndroidCertificatesResponse": androidCertificatesResponse_1.AndroidCertificatesResponse,
    "ApiCredential": apiCredential_1.ApiCredential,
    "ApiCredentialLinks": apiCredentialLinks_1.ApiCredentialLinks,
    "ApplePayInfo": applePayInfo_1.ApplePayInfo,
    "BcmcInfo": bcmcInfo_1.BcmcInfo,
    "BillingEntitiesResponse": billingEntitiesResponse_1.BillingEntitiesResponse,
    "BillingEntity": billingEntity_1.BillingEntity,
    "CardholderReceipt": cardholderReceipt_1.CardholderReceipt,
    "CartesBancairesInfo": cartesBancairesInfo_1.CartesBancairesInfo,
    "ClearpayInfo": clearpayInfo_1.ClearpayInfo,
    "Commission": commission_1.Commission,
    "Company": company_1.Company,
    "CompanyApiCredential": companyApiCredential_1.CompanyApiCredential,
    "CompanyLinks": companyLinks_1.CompanyLinks,
    "CompanyUser": companyUser_1.CompanyUser,
    "Configuration": configuration_1.Configuration,
    "Connectivity": connectivity_1.Connectivity,
    "Contact": contact_1.Contact,
    "CreateAllowedOriginRequest": createAllowedOriginRequest_1.CreateAllowedOriginRequest,
    "CreateApiCredentialResponse": createApiCredentialResponse_1.CreateApiCredentialResponse,
    "CreateCompanyApiCredentialRequest": createCompanyApiCredentialRequest_1.CreateCompanyApiCredentialRequest,
    "CreateCompanyApiCredentialResponse": createCompanyApiCredentialResponse_1.CreateCompanyApiCredentialResponse,
    "CreateCompanyUserRequest": createCompanyUserRequest_1.CreateCompanyUserRequest,
    "CreateCompanyUserResponse": createCompanyUserResponse_1.CreateCompanyUserResponse,
    "CreateCompanyWebhookRequest": createCompanyWebhookRequest_1.CreateCompanyWebhookRequest,
    "CreateMerchantApiCredentialRequest": createMerchantApiCredentialRequest_1.CreateMerchantApiCredentialRequest,
    "CreateMerchantRequest": createMerchantRequest_1.CreateMerchantRequest,
    "CreateMerchantResponse": createMerchantResponse_1.CreateMerchantResponse,
    "CreateMerchantUserRequest": createMerchantUserRequest_1.CreateMerchantUserRequest,
    "CreateMerchantWebhookRequest": createMerchantWebhookRequest_1.CreateMerchantWebhookRequest,
    "CreateUserResponse": createUserResponse_1.CreateUserResponse,
    "Currency": currency_1.Currency,
    "CustomNotification": customNotification_1.CustomNotification,
    "DataCenter": dataCenter_1.DataCenter,
    "DinersInfo": dinersInfo_1.DinersInfo,
    "EventUrl": eventUrl_1.EventUrl,
    "ExternalTerminalAction": externalTerminalAction_1.ExternalTerminalAction,
    "GenerateApiKeyResponse": generateApiKeyResponse_1.GenerateApiKeyResponse,
    "GenerateClientKeyResponse": generateClientKeyResponse_1.GenerateClientKeyResponse,
    "GenerateHmacKeyResponse": generateHmacKeyResponse_1.GenerateHmacKeyResponse,
    "GenericPmWithTdiInfo": genericPmWithTdiInfo_1.GenericPmWithTdiInfo,
    "GooglePayInfo": googlePayInfo_1.GooglePayInfo,
    "Gratuity": gratuity_1.Gratuity,
    "Hardware": hardware_1.Hardware,
    "IdName": idName_1.IdName,
    "InstallAndroidAppDetails": installAndroidAppDetails_1.InstallAndroidAppDetails,
    "InstallAndroidCertificateDetails": installAndroidCertificateDetails_1.InstallAndroidCertificateDetails,
    "InvalidField": invalidField_1.InvalidField,
    "JCBInfo": jCBInfo_1.JCBInfo,
    "Key": key_1.Key,
    "KlarnaInfo": klarnaInfo_1.KlarnaInfo,
    "Links": links_1.Links,
    "LinksElement": linksElement_1.LinksElement,
    "ListCompanyApiCredentialsResponse": listCompanyApiCredentialsResponse_1.ListCompanyApiCredentialsResponse,
    "ListCompanyResponse": listCompanyResponse_1.ListCompanyResponse,
    "ListCompanyUsersResponse": listCompanyUsersResponse_1.ListCompanyUsersResponse,
    "ListExternalTerminalActionsResponse": listExternalTerminalActionsResponse_1.ListExternalTerminalActionsResponse,
    "ListMerchantApiCredentialsResponse": listMerchantApiCredentialsResponse_1.ListMerchantApiCredentialsResponse,
    "ListMerchantResponse": listMerchantResponse_1.ListMerchantResponse,
    "ListMerchantUsersResponse": listMerchantUsersResponse_1.ListMerchantUsersResponse,
    "ListStoresResponse": listStoresResponse_1.ListStoresResponse,
    "ListTerminalsResponse": listTerminalsResponse_1.ListTerminalsResponse,
    "ListWebhooksResponse": listWebhooksResponse_1.ListWebhooksResponse,
    "Localization": localization_1.Localization,
    "Logo": logo_1.Logo,
    "MeApiCredential": meApiCredential_1.MeApiCredential,
    "MealVoucherFRInfo": mealVoucherFRInfo_1.MealVoucherFRInfo,
    "Merchant": merchant_1.Merchant,
    "MerchantLinks": merchantLinks_1.MerchantLinks,
    "MinorUnitsMonetaryValue": minorUnitsMonetaryValue_1.MinorUnitsMonetaryValue,
    "ModelFile": modelFile_1.ModelFile,
    "Name": name_1.Name,
    "Name2": name2_1.Name2,
    "Nexo": nexo_1.Nexo,
    "Notification": notification_1.Notification,
    "NotificationUrl": notificationUrl_1.NotificationUrl,
    "NyceInfo": nyceInfo_1.NyceInfo,
    "OfflineProcessing": offlineProcessing_1.OfflineProcessing,
    "Opi": opi_1.Opi,
    "OrderItem": orderItem_1.OrderItem,
    "PaginationLinks": paginationLinks_1.PaginationLinks,
    "Passcodes": passcodes_1.Passcodes,
    "PayAtTable": payAtTable_1.PayAtTable,
    "PayByBankPlaidInfo": payByBankPlaidInfo_1.PayByBankPlaidInfo,
    "PayMeInfo": payMeInfo_1.PayMeInfo,
    "PayPalInfo": payPalInfo_1.PayPalInfo,
    "PayToInfo": payToInfo_1.PayToInfo,
    "Payment": payment_1.Payment,
    "PaymentMethod": paymentMethod_1.PaymentMethod,
    "PaymentMethodResponse": paymentMethodResponse_1.PaymentMethodResponse,
    "PaymentMethodSetupInfo": paymentMethodSetupInfo_1.PaymentMethodSetupInfo,
    "PayoutSettings": payoutSettings_1.PayoutSettings,
    "PayoutSettingsRequest": payoutSettingsRequest_1.PayoutSettingsRequest,
    "PayoutSettingsResponse": payoutSettingsResponse_1.PayoutSettingsResponse,
    "Profile": profile_1.Profile,
    "PulseInfo": pulseInfo_1.PulseInfo,
    "ReceiptOptions": receiptOptions_1.ReceiptOptions,
    "ReceiptPrinting": receiptPrinting_1.ReceiptPrinting,
    "Referenced": referenced_1.Referenced,
    "Refunds": refunds_1.Refunds,
    "ReleaseUpdateDetails": releaseUpdateDetails_1.ReleaseUpdateDetails,
    "ReprocessAndroidAppResponse": reprocessAndroidAppResponse_1.ReprocessAndroidAppResponse,
    "RequestActivationResponse": requestActivationResponse_1.RequestActivationResponse,
    "RestServiceError": restServiceError_1.RestServiceError,
    "ScheduleTerminalActionsRequest": scheduleTerminalActionsRequest_1.ScheduleTerminalActionsRequest,
    "ScheduleTerminalActionsResponse": scheduleTerminalActionsResponse_1.ScheduleTerminalActionsResponse,
    "Settings": settings_1.Settings,
    "ShippingLocation": shippingLocation_1.ShippingLocation,
    "ShippingLocationsResponse": shippingLocationsResponse_1.ShippingLocationsResponse,
    "Signature": signature_1.Signature,
    "SodexoInfo": sodexoInfo_1.SodexoInfo,
    "SofortInfo": sofortInfo_1.SofortInfo,
    "SplitConfiguration": splitConfiguration_1.SplitConfiguration,
    "SplitConfigurationList": splitConfigurationList_1.SplitConfigurationList,
    "SplitConfigurationLogic": splitConfigurationLogic_1.SplitConfigurationLogic,
    "SplitConfigurationRule": splitConfigurationRule_1.SplitConfigurationRule,
    "Standalone": standalone_1.Standalone,
    "StarInfo": starInfo_1.StarInfo,
    "Store": store_1.Store,
    "StoreAndForward": storeAndForward_1.StoreAndForward,
    "StoreCreationRequest": storeCreationRequest_1.StoreCreationRequest,
    "StoreCreationWithMerchantCodeRequest": storeCreationWithMerchantCodeRequest_1.StoreCreationWithMerchantCodeRequest,
    "StoreLocation": storeLocation_1.StoreLocation,
    "StoreSplitConfiguration": storeSplitConfiguration_1.StoreSplitConfiguration,
    "SupportedCardTypes": supportedCardTypes_1.SupportedCardTypes,
    "Surcharge": surcharge_1.Surcharge,
    "SwishInfo": swishInfo_1.SwishInfo,
    "TapToPay": tapToPay_1.TapToPay,
    "Terminal": terminal_1.Terminal,
    "TerminalActionScheduleDetail": terminalActionScheduleDetail_1.TerminalActionScheduleDetail,
    "TerminalAssignment": terminalAssignment_1.TerminalAssignment,
    "TerminalConnectivity": terminalConnectivity_1.TerminalConnectivity,
    "TerminalConnectivityBluetooth": terminalConnectivityBluetooth_1.TerminalConnectivityBluetooth,
    "TerminalConnectivityCellular": terminalConnectivityCellular_1.TerminalConnectivityCellular,
    "TerminalConnectivityEthernet": terminalConnectivityEthernet_1.TerminalConnectivityEthernet,
    "TerminalConnectivityWifi": terminalConnectivityWifi_1.TerminalConnectivityWifi,
    "TerminalInstructions": terminalInstructions_1.TerminalInstructions,
    "TerminalModelsResponse": terminalModelsResponse_1.TerminalModelsResponse,
    "TerminalOrder": terminalOrder_1.TerminalOrder,
    "TerminalOrderRequest": terminalOrderRequest_1.TerminalOrderRequest,
    "TerminalOrdersResponse": terminalOrdersResponse_1.TerminalOrdersResponse,
    "TerminalProduct": terminalProduct_1.TerminalProduct,
    "TerminalProductPrice": terminalProductPrice_1.TerminalProductPrice,
    "TerminalProductsResponse": terminalProductsResponse_1.TerminalProductsResponse,
    "TerminalReassignmentRequest": terminalReassignmentRequest_1.TerminalReassignmentRequest,
    "TerminalReassignmentTarget": terminalReassignmentTarget_1.TerminalReassignmentTarget,
    "TerminalSettings": terminalSettings_1.TerminalSettings,
    "TestCompanyWebhookRequest": testCompanyWebhookRequest_1.TestCompanyWebhookRequest,
    "TestOutput": testOutput_1.TestOutput,
    "TestWebhookRequest": testWebhookRequest_1.TestWebhookRequest,
    "TestWebhookResponse": testWebhookResponse_1.TestWebhookResponse,
    "TicketInfo": ticketInfo_1.TicketInfo,
    "Timeouts": timeouts_1.Timeouts,
    "TransactionDescriptionInfo": transactionDescriptionInfo_1.TransactionDescriptionInfo,
    "TwintInfo": twintInfo_1.TwintInfo,
    "UninstallAndroidAppDetails": uninstallAndroidAppDetails_1.UninstallAndroidAppDetails,
    "UninstallAndroidCertificateDetails": uninstallAndroidCertificateDetails_1.UninstallAndroidCertificateDetails,
    "UpdatableAddress": updatableAddress_1.UpdatableAddress,
    "UpdateCompanyApiCredentialRequest": updateCompanyApiCredentialRequest_1.UpdateCompanyApiCredentialRequest,
    "UpdateCompanyUserRequest": updateCompanyUserRequest_1.UpdateCompanyUserRequest,
    "UpdateCompanyWebhookRequest": updateCompanyWebhookRequest_1.UpdateCompanyWebhookRequest,
    "UpdateMerchantApiCredentialRequest": updateMerchantApiCredentialRequest_1.UpdateMerchantApiCredentialRequest,
    "UpdateMerchantUserRequest": updateMerchantUserRequest_1.UpdateMerchantUserRequest,
    "UpdateMerchantWebhookRequest": updateMerchantWebhookRequest_1.UpdateMerchantWebhookRequest,
    "UpdatePaymentMethodInfo": updatePaymentMethodInfo_1.UpdatePaymentMethodInfo,
    "UpdatePayoutSettingsRequest": updatePayoutSettingsRequest_1.UpdatePayoutSettingsRequest,
    "UpdateSplitConfigurationLogicRequest": updateSplitConfigurationLogicRequest_1.UpdateSplitConfigurationLogicRequest,
    "UpdateSplitConfigurationRequest": updateSplitConfigurationRequest_1.UpdateSplitConfigurationRequest,
    "UpdateSplitConfigurationRuleRequest": updateSplitConfigurationRuleRequest_1.UpdateSplitConfigurationRuleRequest,
    "UpdateStoreRequest": updateStoreRequest_1.UpdateStoreRequest,
    "UploadAndroidAppResponse": uploadAndroidAppResponse_1.UploadAndroidAppResponse,
    "UploadAndroidCertificateResponse": uploadAndroidCertificateResponse_1.UploadAndroidCertificateResponse,
    "Url": url_1.Url,
    "User": user_1.User,
    "VippsInfo": vippsInfo_1.VippsInfo,
    "WeChatPayInfo": weChatPayInfo_1.WeChatPayInfo,
    "WeChatPayPosInfo": weChatPayPosInfo_1.WeChatPayPosInfo,
    "Webhook": webhook_1.Webhook,
    "WebhookLinks": webhookLinks_1.WebhookLinks,
    "WifiProfiles": wifiProfiles_1.WifiProfiles,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map