"use strict";
/*
 * The version of the OpenAPI document: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./accountHolder"), exports);
__exportStar(require("./accountHolderCapability"), exports);
__exportStar(require("./accountHolderNotificationData"), exports);
__exportStar(require("./accountHolderNotificationRequest"), exports);
__exportStar(require("./accountSupportingEntityCapability"), exports);
__exportStar(require("./address"), exports);
__exportStar(require("./amount"), exports);
__exportStar(require("./authentication"), exports);
__exportStar(require("./balance"), exports);
__exportStar(require("./balanceAccount"), exports);
__exportStar(require("./balanceAccountNotificationData"), exports);
__exportStar(require("./balanceAccountNotificationRequest"), exports);
__exportStar(require("./balancePlatformNotificationResponse"), exports);
__exportStar(require("./bankAccountDetails"), exports);
__exportStar(require("./bulkAddress"), exports);
__exportStar(require("./capabilityProblem"), exports);
__exportStar(require("./capabilityProblemEntity"), exports);
__exportStar(require("./capabilityProblemEntityRecursive"), exports);
__exportStar(require("./capabilitySettings"), exports);
__exportStar(require("./card"), exports);
__exportStar(require("./cardConfiguration"), exports);
__exportStar(require("./cardOrderItem"), exports);
__exportStar(require("./cardOrderItemDeliveryStatus"), exports);
__exportStar(require("./cardOrderNotificationRequest"), exports);
__exportStar(require("./contactDetails"), exports);
__exportStar(require("./deliveryAddress"), exports);
__exportStar(require("./deliveryContact"), exports);
__exportStar(require("./expiry"), exports);
__exportStar(require("./ibanAccountIdentification"), exports);
__exportStar(require("./name"), exports);
__exportStar(require("./paymentInstrument"), exports);
__exportStar(require("./paymentInstrumentNotificationData"), exports);
__exportStar(require("./paymentNotificationRequest"), exports);
__exportStar(require("./phone"), exports);
__exportStar(require("./phoneNumber"), exports);
__exportStar(require("./platformPaymentConfiguration"), exports);
__exportStar(require("./remediatingAction"), exports);
__exportStar(require("./resource"), exports);
__exportStar(require("./sweepConfigurationNotificationData"), exports);
__exportStar(require("./sweepConfigurationNotificationRequest"), exports);
__exportStar(require("./sweepConfigurationV2"), exports);
__exportStar(require("./sweepCounterparty"), exports);
__exportStar(require("./sweepSchedule"), exports);
__exportStar(require("./verificationDeadline"), exports);
__exportStar(require("./verificationError"), exports);
__exportStar(require("./verificationErrorRecursive"), exports);
const accountHolder_1 = require("./accountHolder");
const accountHolderCapability_1 = require("./accountHolderCapability");
const accountHolderNotificationData_1 = require("./accountHolderNotificationData");
const accountHolderNotificationRequest_1 = require("./accountHolderNotificationRequest");
const accountSupportingEntityCapability_1 = require("./accountSupportingEntityCapability");
const address_1 = require("./address");
const amount_1 = require("./amount");
const authentication_1 = require("./authentication");
const balance_1 = require("./balance");
const balanceAccount_1 = require("./balanceAccount");
const balanceAccountNotificationData_1 = require("./balanceAccountNotificationData");
const balanceAccountNotificationRequest_1 = require("./balanceAccountNotificationRequest");
const balancePlatformNotificationResponse_1 = require("./balancePlatformNotificationResponse");
const bankAccountDetails_1 = require("./bankAccountDetails");
const bulkAddress_1 = require("./bulkAddress");
const capabilityProblem_1 = require("./capabilityProblem");
const capabilityProblemEntity_1 = require("./capabilityProblemEntity");
const capabilityProblemEntityRecursive_1 = require("./capabilityProblemEntityRecursive");
const capabilitySettings_1 = require("./capabilitySettings");
const card_1 = require("./card");
const cardConfiguration_1 = require("./cardConfiguration");
const cardOrderItem_1 = require("./cardOrderItem");
const cardOrderItemDeliveryStatus_1 = require("./cardOrderItemDeliveryStatus");
const cardOrderNotificationRequest_1 = require("./cardOrderNotificationRequest");
const contactDetails_1 = require("./contactDetails");
const deliveryAddress_1 = require("./deliveryAddress");
const deliveryContact_1 = require("./deliveryContact");
const expiry_1 = require("./expiry");
const ibanAccountIdentification_1 = require("./ibanAccountIdentification");
const name_1 = require("./name");
const paymentInstrument_1 = require("./paymentInstrument");
const paymentInstrumentNotificationData_1 = require("./paymentInstrumentNotificationData");
const paymentNotificationRequest_1 = require("./paymentNotificationRequest");
const phone_1 = require("./phone");
const phoneNumber_1 = require("./phoneNumber");
const platformPaymentConfiguration_1 = require("./platformPaymentConfiguration");
const remediatingAction_1 = require("./remediatingAction");
const resource_1 = require("./resource");
const sweepConfigurationNotificationData_1 = require("./sweepConfigurationNotificationData");
const sweepConfigurationNotificationRequest_1 = require("./sweepConfigurationNotificationRequest");
const sweepConfigurationV2_1 = require("./sweepConfigurationV2");
const sweepCounterparty_1 = require("./sweepCounterparty");
const sweepSchedule_1 = require("./sweepSchedule");
const verificationDeadline_1 = require("./verificationDeadline");
const verificationError_1 = require("./verificationError");
const verificationErrorRecursive_1 = require("./verificationErrorRecursive");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "AccountHolder.StatusEnum": accountHolder_1.AccountHolder.StatusEnum,
    "AccountHolderCapability.AllowedLevelEnum": accountHolderCapability_1.AccountHolderCapability.AllowedLevelEnum,
    "AccountHolderCapability.RequestedLevelEnum": accountHolderCapability_1.AccountHolderCapability.RequestedLevelEnum,
    "AccountHolderCapability.VerificationStatusEnum": accountHolderCapability_1.AccountHolderCapability.VerificationStatusEnum,
    "AccountHolderNotificationRequest.TypeEnum": accountHolderNotificationRequest_1.AccountHolderNotificationRequest.TypeEnum,
    "AccountSupportingEntityCapability.AllowedLevelEnum": accountSupportingEntityCapability_1.AccountSupportingEntityCapability.AllowedLevelEnum,
    "AccountSupportingEntityCapability.RequestedLevelEnum": accountSupportingEntityCapability_1.AccountSupportingEntityCapability.RequestedLevelEnum,
    "AccountSupportingEntityCapability.VerificationStatusEnum": accountSupportingEntityCapability_1.AccountSupportingEntityCapability.VerificationStatusEnum,
    "BalanceAccount.StatusEnum": balanceAccount_1.BalanceAccount.StatusEnum,
    "BalanceAccountNotificationRequest.TypeEnum": balanceAccountNotificationRequest_1.BalanceAccountNotificationRequest.TypeEnum,
    "CapabilityProblemEntity.TypeEnum": capabilityProblemEntity_1.CapabilityProblemEntity.TypeEnum,
    "CapabilityProblemEntityRecursive.TypeEnum": capabilityProblemEntityRecursive_1.CapabilityProblemEntityRecursive.TypeEnum,
    "CapabilitySettings.FundingSourceEnum": capabilitySettings_1.CapabilitySettings.FundingSourceEnum,
    "CapabilitySettings.IntervalEnum": capabilitySettings_1.CapabilitySettings.IntervalEnum,
    "Card.FormFactorEnum": card_1.Card.FormFactorEnum,
    "CardOrderItemDeliveryStatus.StatusEnum": cardOrderItemDeliveryStatus_1.CardOrderItemDeliveryStatus.StatusEnum,
    "CardOrderNotificationRequest.TypeEnum": cardOrderNotificationRequest_1.CardOrderNotificationRequest.TypeEnum,
    "IbanAccountIdentification.TypeEnum": ibanAccountIdentification_1.IbanAccountIdentification.TypeEnum,
    "PaymentInstrument.StatusEnum": paymentInstrument_1.PaymentInstrument.StatusEnum,
    "PaymentInstrument.StatusReasonEnum": paymentInstrument_1.PaymentInstrument.StatusReasonEnum,
    "PaymentInstrument.TypeEnum": paymentInstrument_1.PaymentInstrument.TypeEnum,
    "PaymentNotificationRequest.TypeEnum": paymentNotificationRequest_1.PaymentNotificationRequest.TypeEnum,
    "Phone.TypeEnum": phone_1.Phone.TypeEnum,
    "PhoneNumber.PhoneTypeEnum": phoneNumber_1.PhoneNumber.PhoneTypeEnum,
    "SweepConfigurationNotificationRequest.TypeEnum": sweepConfigurationNotificationRequest_1.SweepConfigurationNotificationRequest.TypeEnum,
    "SweepConfigurationV2.CategoryEnum": sweepConfigurationV2_1.SweepConfigurationV2.CategoryEnum,
    "SweepConfigurationV2.PrioritiesEnum": sweepConfigurationV2_1.SweepConfigurationV2.PrioritiesEnum,
    "SweepConfigurationV2.ReasonEnum": sweepConfigurationV2_1.SweepConfigurationV2.ReasonEnum,
    "SweepConfigurationV2.StatusEnum": sweepConfigurationV2_1.SweepConfigurationV2.StatusEnum,
    "SweepConfigurationV2.TypeEnum": sweepConfigurationV2_1.SweepConfigurationV2.TypeEnum,
    "SweepSchedule.TypeEnum": sweepSchedule_1.SweepSchedule.TypeEnum,
    "VerificationDeadline.CapabilitiesEnum": verificationDeadline_1.VerificationDeadline.CapabilitiesEnum,
    "VerificationError.CapabilitiesEnum": verificationError_1.VerificationError.CapabilitiesEnum,
    "VerificationError.TypeEnum": verificationError_1.VerificationError.TypeEnum,
    "VerificationErrorRecursive.CapabilitiesEnum": verificationErrorRecursive_1.VerificationErrorRecursive.CapabilitiesEnum,
    "VerificationErrorRecursive.TypeEnum": verificationErrorRecursive_1.VerificationErrorRecursive.TypeEnum,
};
let typeMap = {
    "AccountHolder": accountHolder_1.AccountHolder,
    "AccountHolderCapability": accountHolderCapability_1.AccountHolderCapability,
    "AccountHolderNotificationData": accountHolderNotificationData_1.AccountHolderNotificationData,
    "AccountHolderNotificationRequest": accountHolderNotificationRequest_1.AccountHolderNotificationRequest,
    "AccountSupportingEntityCapability": accountSupportingEntityCapability_1.AccountSupportingEntityCapability,
    "Address": address_1.Address,
    "Amount": amount_1.Amount,
    "Authentication": authentication_1.Authentication,
    "Balance": balance_1.Balance,
    "BalanceAccount": balanceAccount_1.BalanceAccount,
    "BalanceAccountNotificationData": balanceAccountNotificationData_1.BalanceAccountNotificationData,
    "BalanceAccountNotificationRequest": balanceAccountNotificationRequest_1.BalanceAccountNotificationRequest,
    "BalancePlatformNotificationResponse": balancePlatformNotificationResponse_1.BalancePlatformNotificationResponse,
    "BankAccountDetails": bankAccountDetails_1.BankAccountDetails,
    "BulkAddress": bulkAddress_1.BulkAddress,
    "CapabilityProblem": capabilityProblem_1.CapabilityProblem,
    "CapabilityProblemEntity": capabilityProblemEntity_1.CapabilityProblemEntity,
    "CapabilityProblemEntityRecursive": capabilityProblemEntityRecursive_1.CapabilityProblemEntityRecursive,
    "CapabilitySettings": capabilitySettings_1.CapabilitySettings,
    "Card": card_1.Card,
    "CardConfiguration": cardConfiguration_1.CardConfiguration,
    "CardOrderItem": cardOrderItem_1.CardOrderItem,
    "CardOrderItemDeliveryStatus": cardOrderItemDeliveryStatus_1.CardOrderItemDeliveryStatus,
    "CardOrderNotificationRequest": cardOrderNotificationRequest_1.CardOrderNotificationRequest,
    "ContactDetails": contactDetails_1.ContactDetails,
    "DeliveryAddress": deliveryAddress_1.DeliveryAddress,
    "DeliveryContact": deliveryContact_1.DeliveryContact,
    "Expiry": expiry_1.Expiry,
    "IbanAccountIdentification": ibanAccountIdentification_1.IbanAccountIdentification,
    "Name": name_1.Name,
    "PaymentInstrument": paymentInstrument_1.PaymentInstrument,
    "PaymentInstrumentNotificationData": paymentInstrumentNotificationData_1.PaymentInstrumentNotificationData,
    "PaymentNotificationRequest": paymentNotificationRequest_1.PaymentNotificationRequest,
    "Phone": phone_1.Phone,
    "PhoneNumber": phoneNumber_1.PhoneNumber,
    "PlatformPaymentConfiguration": platformPaymentConfiguration_1.PlatformPaymentConfiguration,
    "RemediatingAction": remediatingAction_1.RemediatingAction,
    "Resource": resource_1.Resource,
    "SweepConfigurationNotificationData": sweepConfigurationNotificationData_1.SweepConfigurationNotificationData,
    "SweepConfigurationNotificationRequest": sweepConfigurationNotificationRequest_1.SweepConfigurationNotificationRequest,
    "SweepConfigurationV2": sweepConfigurationV2_1.SweepConfigurationV2,
    "SweepCounterparty": sweepCounterparty_1.SweepCounterparty,
    "SweepSchedule": sweepSchedule_1.SweepSchedule,
    "VerificationDeadline": verificationDeadline_1.VerificationDeadline,
    "VerificationError": verificationError_1.VerificationError,
    "VerificationErrorRecursive": verificationErrorRecursive_1.VerificationErrorRecursive,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map