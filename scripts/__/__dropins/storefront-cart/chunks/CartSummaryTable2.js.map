{"version":3,"file":"CartSummaryTable2.js","sources":["../../node_modules/@adobe-commerce/elsie/src/icons/Trash.svg","/@dropins/storefront-cart/src/components/CartSummaryTable/CartSummaryTable.tsx","/@dropins/storefront-cart/src/components/CartSummaryTable/Elements/Item/Item.tsx","/@dropins/storefront-cart/src/hooks/useCartItems.ts","/@dropins/storefront-cart/src/containers/CartSummaryTable/CartSummaryTable.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgTrash = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M1 5H23\", stroke: \"currentColor\", strokeWidth: 1.5, strokeMiterlimit: 10 }), /* @__PURE__ */ React.createElement(\"path\", { d: \"M17.3674 22H6.63446C5.67952 22 4.88992 21.2688 4.8379 20.3338L4 5H20L19.1621 20.3338C19.1119 21.2688 18.3223 22 17.3655 22H17.3674Z\", stroke: \"currentColor\", strokeWidth: 1.5, strokeMiterlimit: 10 }), /* @__PURE__ */ React.createElement(\"path\", { d: \"M9.87189 2H14.1281C14.6085 2 15 2.39766 15 2.88889V5H9V2.88889C9 2.39912 9.39006 2 9.87189 2Z\", stroke: \"currentColor\", strokeWidth: 1.5, strokeMiterlimit: 10 }), /* @__PURE__ */ React.createElement(\"path\", { d: \"M8.87402 8.58057L9.39348 17.682\", stroke: \"currentColor\", strokeWidth: 1.5, strokeMiterlimit: 10 }), /* @__PURE__ */ React.createElement(\"path\", { d: \"M14.6673 8.58057L14.146 17.682\", stroke: \"currentColor\", strokeWidth: 1.5, strokeMiterlimit: 10 }));\nexport default SvgTrash;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\n/**\n * CartSummaryTable is a responsive grid-based component that displays cart items in a table-like format.\n * It adapts to mobile views by switching to a stacked layout with labeled sections.\n * \n * @component\n */\n\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes, VComponent } from '@adobe-commerce/elsie/lib';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport '@/cart/components/CartSummaryTable/CartSummaryTable.css';\n\n/**\n * Represents a single row entry in the cart summary table\n * Each field accepts a VNode to allow for flexible content rendering\n */\nexport interface CartTableEntry {\n  /** The item UID */\n  uid: string;\n  /** Whether the item is updating */\n  updating: boolean;\n  /** Whether the item has an update error */\n  hasError: boolean;\n  /** The product details section (typically includes image, name, and options) */\n  item: VNode;\n  /** The unit price of the product */\n  price: VNode;\n  /** The quantity selector/display */\n  quantity: VNode;\n  /** The total price for this line item */\n  subtotal: VNode;\n  /** Actions bar on the bottom of the row */\n  actions: VNode;\n}\n\n/**\n * Props for the CartSummaryTable component\n */\nexport interface CartSummaryTableProps extends HTMLAttributes<HTMLDivElement> {\n  /** Array of cart entries to display in the table */\n  entries: CartTableEntry[];\n  /** Optional CSS class name for custom styling */\n  className?: string;\n}\n\n/**\n * CartSummaryTable component displays cart items in a responsive grid layout\n * - Uses CSS Grid for layout with 4 columns on desktop\n * - Switches to a stacked single-column layout on mobile with labeled sections\n * - Renders each entry's content using VComponent for proper component handling\n */\nexport const CartSummaryTable: FunctionComponent<CartSummaryTableProps> = ({\n  entries,\n  className,\n  ...props\n}) => {\n  const dictionary = useText({\n    itemLabel: 'Cart.CartSummaryTable.item',\n    priceLabel: 'Cart.CartSummaryTable.price',\n    qtyLabel: 'Cart.CartSummaryTable.qty',\n    subtotalLabel: 'Cart.CartSummaryTable.subtotal',\n    mobilePriceLabel: 'Cart.CartSummaryTable.mobilePrice',\n    mobileQtyLabel: 'Cart.CartSummaryTable.mobileQty',\n    mobileSubtotalLabel: 'Cart.CartSummaryTable.mobileSubtotal'\n  });\n\n  return (\n    <div {...props} className={classes(['cart-cart-summary-table', className])}>\n      {/* Table header - hidden on mobile */}\n      <div className=\"cart-cart-summary-table__header\">\n        <div className=\"cart-cart-summary-table__header-item\">{dictionary.itemLabel}</div>\n        <div className=\"cart-cart-summary-table__header-price\">{dictionary.priceLabel}</div>\n        <div className=\"cart-cart-summary-table__header-qty\">{dictionary.qtyLabel}</div>\n        <div className=\"cart-cart-summary-table__header-subtotal\">{dictionary.subtotalLabel}</div>\n      </div>\n      {/* Table body - adapts to grid layout on mobile */}\n      <div className=\"cart-cart-summary-table__body\">\n        {entries.map((entry) => (\n          <div key={entry.uid} className={classes([\n              'cart-cart-summary-table__row',\n              [ 'cart-cart-summary-table__row--updating', entry.updating ],\n              [ 'cart-cart-summary-table__row--error', entry.hasError ],\n            ])}\n          >\n            <div className=\"cart-cart-summary-table__cell-item\">\n              <VComponent node={entry.item} />\n            </div>\n            <div className=\"cart-cart-summary-table__cell-price\">\n              <span className=\"cart-cart-summary-table__mobile-label\">{dictionary.mobilePriceLabel}</span>\n              <VComponent node={entry.price} />\n            </div>\n            <div className=\"cart-cart-summary-table__cell-qty\">\n              <span className=\"cart-cart-summary-table__mobile-label\">{dictionary.mobileQtyLabel}</span>\n              <VComponent node={entry.quantity} />\n            </div>\n            <div className=\"cart-cart-summary-table__cell-subtotal\">\n              <span className=\"cart-cart-summary-table__mobile-label\">{dictionary.mobileSubtotalLabel}</span>\n              <VComponent node={entry.subtotal} />\n            </div>\n            <div className=\"cart-cart-summary-table__item-footer\">\n              <VComponent className=\"cart-cart-summary-table__item-actions\" node={entry.actions} />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","/********************************************************************\n *  Copyright 2025 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n  \nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes, VComponent } from '@adobe-commerce/elsie/lib';\nimport '@/cart/components/CartSummaryTable/Elements/Item/Item.css';\n\nexport interface ItemProps extends HTMLAttributes<HTMLDivElement> {\n  productTitle: VNode;\n  sku?: VNode;\n  image?: VNode;\n  configurations?: VNode;\n  alert?: VNode;\n  warning?: VNode;\n}\n\nexport const Item: FunctionComponent<ItemProps> = ({\n  className,\n  productTitle,\n  sku,\n  image,\n  configurations,\n  alert,\n  warning,\n  ...props\n}) => {\n  return (\n    <div {...props} className={classes(['cart-cart-summary-table__item', className])}>\n      {image && <VComponent className=\"cart-cart-summary-table__item-image-wrapper\" node={image} />}\n      <div className=\"cart-cart-summary-table__item-details\">\n        {productTitle && <VComponent className=\"cart-cart-summary-table__item-name\" node={productTitle} />}\n        {sku && <VComponent className=\"cart-cart-summary-table__sku\" node={sku} />}\n        {alert && <VComponent className=\"cart-cart-summary-table__item-quantity-alert-text\" node={alert} />}\n        {warning && <VComponent className=\"cart-cart-summary-table__item-quantity-warning-text\" node={warning} />}\n        {configurations && <VComponent className=\"cart-cart-summary-table__item-configurations\" node={configurations} />}\n      </div>\n    </div>\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\n/**\n * This hook provides an API for getting calculated cart items data.\n */\n\nimport { useState, useCallback, useMemo } from 'preact/compat';\nimport { CartModel } from '../data/models';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { state } from '@/cart/lib/state';\nimport { PriceProps } from '@adobe-commerce/elsie/components/Price';\nimport { updateProductsFromCart } from '@/cart/api';\nimport { debounce } from '@adobe-commerce/elsie/lib';\n\n\n/**\n * Params for the useCartItems hook\n * \n * @param {\n *  dictionary: ReturnType<typeof useText>;\n *  onQuantityUpdate?: (item: CartModel['items'][number], quantity: number) => void;\n *  onItemRemove?: (item: CartModel['items'][number]) => void;\n * }\n * \n * dictionary - The dictionary\n * onQuantityUpdate - The function to call when the quantity is updated\n * onItemRemove - The function to call when the item is removed\n */\nexport interface useCartItemsProps {\n  dictionary: ReturnType<typeof useText>;\n  onQuantityUpdate?: (item: CartModel['items'][number], quantity: number) => void;\n  onItemRemove?: (item: CartModel['items'][number]) => void;\n}\n\n/**\n * Params for the getConfiguration function\n */\ninterface GetConfigurationParams {\n  item: CartModel['items'][number];\n}\n\ninterface ItemUpdateState {\n  isUpdating: boolean;\n  updatedValue: any;\n}\n\n/**\n * Type for the API returned by useCartItems\n *\n * This interface ensures that the returned object from the hook is well-typed and clear for consumers.\n */\nexport interface UseCartItemsApi {\n  showIncludedTaxPrice: boolean; // Whether to show prices including tax\n  showExcludingTaxPrice: boolean; // Whether to show prices excluding tax\n  itemsUpdating: Map<string, ItemUpdateState>; // Tracks which items are currently being updated\n  itemUpdateErrors: Map<string, string>; // Tracks update errors for each item\n  getConfiguration: (params: GetConfigurationParams) => object | undefined; // Returns configuration details for a cart item\n  getPriceProps: (item: CartModel['items'][number]) => PriceProps; // Returns price display props for a cart item\n  getSubtotalProps: (item: CartModel['items'][number]) => { subtotalProps: PriceProps; subtotalDiscountProps: PriceProps | null }; // Returns subtotal and discount subtotal props\n  processQuantityChange: (item: CartModel['items'][number], value: number) => Promise<void>; // Handles quantity change with state and error management\n  debouncedQuantityChange: (item: CartModel['items'][number], value: number) => void; // Debounced version of processQuantityChange\n  setItemsUpdating: (itemsUpdating: Map<string, ItemUpdateState>) => void; // Allows external setting of updating state\n  getWarningMessage: (item: CartModel['items'][number]) => string | undefined; // Returns warning message for a cart item\n  setItemUpdateError: (uid: string, error: string) => void; // Sets or clears update error for an item\n  handleRemoveItem: (item: CartModel['items'][number]) => Promise<CartModel | null>; // Removes an item from the cart\n  setItemUpdating: (uid: string, state: boolean) => void; // Sets updating state for a specific item\n}\n\n/**\n * useCartItems hook\n *\n * Provides an API for managing and retrieving calculated cart items data, including price, subtotal, configuration, quantity updates, and error handling.\n *\n * @param {Object} params\n * @param {ReturnType<typeof useText>} params.dictionary - The i18n dictionary\n * @param {(item: CartModel['items'][number], quantity: number) => void} [params.onQuantityUpdate] - Callback when item quantity is updated\n * @param {(item: CartModel['items'][number]) => void} [params.onItemRemove] - Callback when item is removed\n *\n * @returns {Object} API for cart item management:\n *   - showIncludedTaxPrice: boolean\n *   - showExcludingTaxPrice: boolean\n *   - itemsUpdating: Map<string, ItemUpdateState>\n *   - itemUpdateErrors: Map<string, string>\n *   - getConfiguration(item): object | undefined\n *   - getPriceProps(item): PriceProps\n *   - getSubtotalProps(item): { subtotalProps: PriceProps, subtotalDiscountProps: PriceProps | null }\n *   - processQuantityChange(item, value): Promise<void>\n *   - debouncedQuantityChange(item, value): void\n *   - setItemsUpdating(map): void\n *   - getWarningMessage(item): string | undefined\n *   - setItemUpdateError(uid, error): void\n *   - handleRemoveItem(item): Promise<CartModel>\n *   - setItemUpdating(uid, state): void\n */\nexport const useCartItems = ({ dictionary, onQuantityUpdate, onItemRemove }: useCartItemsProps): UseCartItemsApi => {\n  // State for tracking which items are being updated (e.g., quantity change in progress)\n  const [itemsUpdating, setItemsUpdating] = useState<Map<string, ItemUpdateState>>(new Map());\n  // State for tracking errors related to item updates\n  const [itemUpdateErrors, setItemUpdateErrors] = useState<Map<string, string>>(new Map());\n\n  // Get cart display settings (e.g., tax display mode) from global state\n  const cartSettings = state?.config?.shoppingCartDisplaySetting;\n\n  // Determine which price display modes are active\n  const showIncludedTaxPrice = cartSettings?.price === 'INCLUDING_TAX';\n  const showExcludingTaxPrice = cartSettings?.price === 'INCLUDING_EXCLUDING_TAX';\n\n  /**\n   * Returns a configuration object for the cart item, combining bundle, selected, and customizable options, as well as recipient/sender info.\n   * Returns undefined if there is no configuration to show.\n   */\n  const getConfiguration = ({ item }: GetConfigurationParams) => {\n    // Merge all possible configuration sources into a single object\n    const configuration = {\n      ...item.bundleOptions,\n      ...item.selectedOptions,\n      ...item.customizableOptions,\n      // Add recipient/sender info if present\n      ...(item.recipient ? { [dictionary.recipient]: item.recipient } : null),\n      ...(item.recipientEmail && item.recipient\n        ? {\n          [dictionary.recipient]: `${item.recipient} (${item.recipientEmail})`,\n        }\n        : null),\n      ...(item.sender ? { [dictionary.sender]: item.sender } : null),\n      ...(item.senderEmail && item.sender\n        ? {\n          [dictionary.sender]: `${item.sender} (${item.senderEmail})`,\n        }\n        : {}),\n      ...(item.message ? { [dictionary.message]: item.message } : null),\n      // Add file/link info if present\n      ...(item.links && item.links.count\n        ? item.links.count > 1\n          ? {\n            [dictionary.files.replace(\n              '{count}',\n              item.links.count.toString()\n            )]: item.links.result,\n          }\n          : {\n            [dictionary.file.replace('{count}', item.links.count.toString())]:\n              item.links.result,\n          }\n        : null),\n    };\n\n    // If no configuration, return undefined\n    if (Object.keys(configuration).length === 0) {\n      return undefined;\n    }\n\n    return configuration;\n  };\n\n  /**\n   * Returns price props for the cart item, depending on tax and discount settings.\n   * Used for rendering the price in the UI.\n   */\n  const getPriceProps = (item: CartModel['items'][number]) => {\n    return showIncludedTaxPrice\n      ? item.discounted\n        ? {\n          amount: item.regularPrice.value,\n          currency: item.regularPrice.currency,\n          'data-testid': 'discounted-regular-item-price',\n        }\n        : {\n          amount: item.taxedPrice?.value,\n          currency: item.taxedPrice?.currency,\n          'data-testid': 'taxed-item-price',\n        }\n      : {\n        amount: item.regularPrice?.value,\n        currency: item.regularPrice?.currency,\n        'data-testid': 'regular-item-price',\n      };\n  };\n\n  /**\n   * Returns subtotal and discount subtotal props for the cart item.\n   * Used for rendering the subtotal and any discount in the UI.\n   */\n  const getSubtotalProps = (item: CartModel['items'][number]) => {\n    const subtotalProps: PriceProps = {\n      'aria-label': dictionary.regularPrice,\n    };\n    // If the item is discounted, prepare a separate object for the discount subtotal\n    const subtotalDiscountProps: PriceProps | null = item.discounted ? {} : null;\n\n    if (\n      ['INCLUDING_TAX', 'INCLUDING_EXCLUDING_TAX'].includes(\n        cartSettings?.price as string\n      )\n    ) {\n      subtotalProps['amount'] = item.rowTotalIncludingTax?.value;\n      subtotalProps['currency'] = item.rowTotalIncludingTax?.currency;\n      subtotalProps['variant'] = item.discounted ? 'strikethrough' : 'default';\n      // @ts-ignore: data-testid is used for testing\n      subtotalProps['data-testid'] = 'including-tax-item-total';\n\n      if (subtotalDiscountProps) {\n        // If discounted, show the original total as the discount\n        subtotalProps['amount'] = item.total?.value;\n        subtotalProps['currency'] = item.total?.currency;\n\n        subtotalDiscountProps['amount'] = item.rowTotalIncludingTax?.value;\n        subtotalDiscountProps['currency'] = item.rowTotalIncludingTax?.currency;\n        subtotalDiscountProps['sale'] = true;\n        subtotalDiscountProps['aria-label'] = dictionary.discountedPrice;\n        // @ts-ignore: data-testid is used for testing\n        subtotalDiscountProps['data-testid'] = 'discount-total';\n      }\n    } else {\n      subtotalProps['amount'] = item.total?.value;\n      subtotalProps['currency'] = item.total?.currency;\n      subtotalProps['variant'] = item.discounted ? 'strikethrough' : 'default';\n      // @ts-ignore: data-testid is used for testing\n      subtotalProps['data-testid'] = 'regular-item-total';\n\n      if (subtotalDiscountProps) {\n        subtotalDiscountProps['amount'] = item.discountedTotal?.value;\n        subtotalDiscountProps['currency'] = item.discountedTotal?.currency;\n        subtotalDiscountProps['sale'] = true;\n        subtotalDiscountProps['aria-label'] = dictionary.regularPrice;\n        // @ts-ignore: data-testid is used for testing\n        subtotalDiscountProps['data-testid'] = 'discount-total';\n      }\n    }\n\n    return {\n      subtotalProps,\n      subtotalDiscountProps,\n    };\n  };\n\n  /**\n   * Returns a warning message for the cart item, based on update errors, insufficient quantity, or low inventory.\n   * Returns undefined if there is no warning.\n   */\n  const getWarningMessage = (item: CartModel['items'][number]) => {\n    // Check for update error first\n    const updateErrorMessage = itemUpdateErrors.get(item.uid);\n\n    // Check for insufficient quantity\n    const insufficientQuantityText = item.insufficientQuantity && item.stockLevel\n      ? item.stockLevel === 'noNumber'\n        ? dictionary.insufficientQuantityGeneral // No stock level set\n        : dictionary.insufficientQuantity // Stock level set\n          .replace('{inventory}', item.stockLevel?.toString())\n          .replace('{count}', item.quantity.toString())\n      : undefined; // Could not generate insufficient quantity text\n\n    // Check for low inventory\n    const lowInventoryText = item.lowInventory &&\n      item.onlyXLeftInStock &&\n      dictionary.lowInventory.replace(\n        '{count}',\n        item.onlyXLeftInStock?.toString()\n      );\n\n    // Return the first warning found, or undefined\n    return updateErrorMessage || insufficientQuantityText || lowInventoryText || undefined;\n  };\n\n  /**\n   * Processes a quantity change for the cart item, updating state and handling errors.\n   * Handles optimistic UI updates and error state.\n   */\n  const processQuantityChange = useCallback(\n    async (item: CartModel['items'][number], value: number) => {\n\n      /**\n       * Updates the quantity for the cart item in the backend.\n       * This function is used internally by processQuantityChange.\n       */\n      const handleQuantityChange = (item: CartModel['items'][number], quantity: number) => {\n        return updateProductsFromCart([\n          {\n            uid: item.uid,\n            quantity,\n          },\n        ]);\n      };\n\n      if (isNaN(value) || item.quantity === value) {\n        return;\n      }\n\n      // Clear all item update errors before processing\n      setItemUpdateErrors(new Map());\n\n      try {\n        // Mark item as updating\n        setItemsUpdating((prev) => {\n          const next = new Map(prev);\n          next.set(item.uid, { isUpdating: true, updatedValue: value });\n          return next;\n        });\n\n        await handleQuantityChange(item, value);\n\n        // Callbacks for item removal or quantity update\n        if (value === 0) {\n          onItemRemove?.(item);\n        } else {\n          onQuantityUpdate?.(item, value);\n        }\n      } catch (error: any) {\n        // Remove updating state and set error message\n        setItemsUpdating((prev) => {\n          const next = new Map(prev);\n          next.delete(item.uid);\n          return next;\n        });\n        setItemUpdateErrors((prev) => {\n          const next = new Map(prev);\n          next.set(item.uid, error.message);\n          return next;\n        });\n      }\n    },\n    [onItemRemove, onQuantityUpdate]\n  );\n\n  /**\n   * Debounced version of processQuantityChange (500ms delay).\n   * Use this to avoid rapid API calls when the user is typing or clicking quickly.\n   */\n  const debouncedQuantityChange = useMemo(\n    () => debounce(processQuantityChange, 500),\n    [processQuantityChange]\n  );\n\n  /**\n   * Removes the item from the cart (sets quantity to 0).\n   * Also updates the UI state to reflect the removal.\n   */\n  const handleRemoveItem = (item: CartModel['items'][number]) => {\n    setItemsUpdating((prev) => {\n      const next = new Map(prev);\n      next.set(item.uid, { isUpdating: true, updatedValue: 0 });\n      return next;\n    });\n    return updateProductsFromCart([\n      {\n        uid: item.uid,\n        quantity: 0,\n      },\n    ]).then((data) => {\n      onItemRemove?.(item);\n      return Promise.resolve(data);\n    });\n  };\n\n  /**\n   * Sets the updating state for a specific cart item.\n   * Used to manually mark an item as updating or not.\n   */\n  const setItemUpdating = (uid: string, state: boolean) => {\n    setItemsUpdating((prev) => {\n      const next = new Map(prev);\n      next.set(uid, { isUpdating: state, updatedValue: state });\n      return next;\n    });\n  };\n\n  /**\n   * Sets or clears the update error for a specific cart item.\n   * Pass an error string to set, or an empty string to clear.\n   */\n  const setItemUpdateError = (uid: string, error: string) => {\n    setItemUpdateErrors((prev) => {\n      const next = new Map(prev);\n      if (error) {\n        next.set(uid, error);\n      } else {\n        next.delete(uid);\n      }\n      return next;\n    });\n  };\n\n  // Construct the API object to return from the hook\n  const api: UseCartItemsApi = {\n    showIncludedTaxPrice,\n    showExcludingTaxPrice,\n    itemsUpdating,\n    itemUpdateErrors,\n    getConfiguration,\n    getPriceProps,\n    getSubtotalProps,\n    processQuantityChange,\n    debouncedQuantityChange,\n    setItemsUpdating,\n    getWarningMessage,\n    setItemUpdateError,\n    handleRemoveItem,\n    setItemUpdating,\n  };\n\n  // Return the API for use in components\n  return api;\n};","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes, Container, Slot, SlotProps } from '@adobe-commerce/elsie/lib';\nimport { CartModel } from '@/cart/data/models/cart-model';\nimport { CartSummaryTable as CartSummaryTableComponent } from '@/cart/components';\nimport { Price, Skeleton, SkeletonRow, Image, ImageProps, Icon, Button } from '@adobe-commerce/elsie/components';\nimport { useState, useEffect, useMemo } from 'preact/hooks';\nimport { events } from '@adobe-commerce/event-bus';\nimport { Cart, OrderError, Trash, WarningWithCircle } from '@adobe-commerce/elsie/icons';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { Item } from '@/cart/components/CartSummaryTable/Elements/Item/Item';\nimport { useCartItems } from '@/cart/hooks/useCartItems';\nimport { getPersistedCartData } from '@/cart/lib/persisted-data';\n\nexport interface CartSummaryTableContainerProps extends HTMLAttributes<HTMLDivElement> {\n  /** Initial data for the cart */\n  initialData?: CartModel | null;\n  /** Optional CSS class name for custom styling */\n  className?: string;\n  /** Slots for customizing different parts of the table */\n  slots?: {\n    /** Slot for customizing the item cell content */\n    Item?: SlotProps<{ item: CartModel['items'][number] }>;\n    /** Slot for customizing the price cell content */\n    Price?: SlotProps<{ item: CartModel['items'][number] }>;\n    /** Slot for customizing the quantity cell content */\n    Quantity?: SlotProps<{\n      item: CartModel['items'][number],\n      isUpdating: boolean,\n      quantityInputValue: number,\n      handleInputChange: (e: Event) => void,\n      itemUpdateErrors: Map<string, string>,\n    }>;\n    /** Slot for customizing the subtotal cell content */\n    Subtotal?: SlotProps<{ item: CartModel['items'][number] }>;\n    /** Slot for customizing the thumbnail image on an item */\n    Thumbnail?: SlotProps<{\n      item: CartModel['items'][number],\n      defaultImageProps: ImageProps,\n      index: number,\n    }>;\n    /** Slot for customizing the product title on an item */\n    ProductTitle?: SlotProps<{ item: CartModel['items'][number] }>;\n    /** Slot for customizing the product sku on an item */\n    Sku?: SlotProps<{ item: CartModel['items'][number] }>;\n    /** Slot for customizing the product configurations on an item */\n    Configurations?: SlotProps<{ item: CartModel['items'][number] }>;\n    /** Slot for customizing the product alert on an item */\n    ItemAlert?: SlotProps<{ item: CartModel['items'][number] }>;\n    /** Slot for customizing the product warning on an item */\n    ItemWarning?: SlotProps<{ item: CartModel['items'][number] }>;\n    /** Slot for customizing the actions on an item */\n    Actions?: SlotProps<{\n      item: CartModel['items'][number],\n      itemsUpdating: Map<string, { isUpdating: boolean, updatedValue: number }>,\n      setItemUpdating: (uid: string, state: boolean) => void,\n      setItemUpdateError: (uid: string, error: string) => void,\n    }>;\n  };\n  /** Function for getting the product page route */\n  routeProduct?: (item: CartModel['items'][number]) => string;\n  /** Whether to allow quantity updates */\n  allowQuantityUpdates?: boolean;\n  /** Whether to allow remove items */\n  allowRemoveItems?: boolean;\n  /** On quantity update */\n  onQuantityUpdate?: (item: CartModel['items'][number], quantity: number) => void;\n  /** On item remove */\n  onItemRemove?: (item: CartModel['items'][number]) => void;\n}\n\n/**\n * Skeleton loader component for the cart summary table\n */\nconst CartSummaryTableSkeleton = () => {\n  return (\n    <Skeleton\n      data-testid=\"cart-summary-table-skeleton\"\n      className=\"cart-cart-summary-table__skeleton\"\n      rowGap=\"medium\"\n    >\n      <SkeletonRow\n        variant=\"row\"\n        size=\"xlarge\"\n        fullWidth={true}\n        lines={4}\n        multilineGap=\"small\"\n      />\n    </Skeleton>\n  );\n};\n\n/**\n * Container component for CartSummaryTable that provides slots for customizing the table cells\n * and handles data management\n */\nexport const CartSummaryTable: Container<CartSummaryTableContainerProps, CartModel | null> = ({\n  initialData = null,\n  routeProduct,\n  slots,\n  className,\n  allowQuantityUpdates = true,\n  allowRemoveItems = true,\n  onQuantityUpdate,\n  onItemRemove,\n  ...props\n}) => {\n  const [loading, setLoading] = useState(!initialData);\n  const [cartModelData, setCartModelData] = useState<CartModel | null>(initialData);\n  /** I18n text for the cart summary table */\n  const dictionary = useText({\n    file: 'Cart.CartItem.file',\n    files: 'Cart.CartItem.files',\n    heading: 'Cart.Cart.heading',\n    message: 'Cart.CartItem.message',\n    recipient: 'Cart.CartItem.recipient',\n    regularPrice: 'Cart.CartItem.regularPrice',\n    discountedPrice: 'Cart.CartItem.discountedPrice',\n    sender: 'Cart.CartItem.sender',\n    lowInventory: 'Cart.CartItem.lowInventory',\n    insufficientQuantity: 'Cart.CartItem.insufficientQuantity',\n    insufficientQuantityGeneral: 'Cart.CartItem.insufficientQuantityGeneral',\n    outOfStockHeading: 'Cart.OutOfStockMessage.heading',\n    outOfStockDescription: 'Cart.OutOfStockMessage.message',\n    outOfStockAlert: 'Cart.OutOfStockMessage.alert',\n    removeAction: 'Cart.OutOfStockMessage.action',\n    notAvailableMessage: 'Cart.CartItem.notAvailableMessage',\n    viewMore: 'Cart.Cart.viewMore',\n    viewAll: 'Cart.Cart.viewAll',\n    discountPercent: 'Cart.CartItem.discountPercentage',\n    savingsAmount: 'Cart.CartItem.savingsAmount',\n    includingTax: 'Cart.CartItem.includingTax',\n    excludingTax: 'Cart.CartItem.excludingTax',\n    remove: 'Dropin.CartItem.remove.label',\n    removeDefault: 'Dropin.CartItem.removeDefault.label',\n    quantity: 'Dropin.CartItem.quantity.label',\n  });\n\n  /** Helper functions */\n  const {\n    showIncludedTaxPrice,\n    showExcludingTaxPrice,\n    itemsUpdating,\n    itemUpdateErrors,\n    getConfiguration,\n    getPriceProps,\n    getSubtotalProps,\n    debouncedQuantityChange,\n    setItemsUpdating,\n    getWarningMessage,\n    handleRemoveItem,\n    setItemUpdating,\n    setItemUpdateError,\n  } = useCartItems({ dictionary, onQuantityUpdate, onItemRemove });\n\n  /**\n   * Handle the cart data event\n   */\n  useEffect(() => {\n    const cartDataEvent = events.on('cart/data', (payload: Cart | null) => {\n      setLoading(true);\n      setCartModelData(payload as CartModel);\n      setItemsUpdating(new Map());\n      setLoading(false);\n    }, { eager: true });\n\n    return () => {\n      cartDataEvent?.off();\n    };\n  }, [\n    setLoading,\n    setCartModelData,\n    setItemsUpdating,\n  ]);\n\n  // Transform cart items into table entries with slots for customization\n  const entries = useMemo(() => cartModelData?.items?.sort((a, b) => {\n    // Sort out of stock items and items with update errors last\n    // to show them at the top since we are rendering the list in reverse order\n    if (itemUpdateErrors.has(a.uid) && !itemUpdateErrors.has(b.uid)) return -1;\n    if (!itemUpdateErrors.has(a.uid) && itemUpdateErrors.has(b.uid)) return 1;\n    if (a.outOfStock && !b.outOfStock) return -1;\n    if (!a.outOfStock && b.outOfStock) return 1;\n    return 0;\n  })\n    .map((item, index) => {\n      const isUpdating = itemsUpdating.has(item.uid);\n      const warningMessage = getWarningMessage(item);\n\n      const productTitle = (\n        <Slot\n          name=\"ProductTitle\"\n          slot={slots?.ProductTitle}\n          context={{ item }}\n        >\n          {routeProduct ? (\n            <a href={routeProduct(item)}>{item.name}</a>\n          ) : (\n            item.name\n          )}\n        </Slot>\n      );\n\n      const defaultImageProps = {\n        src: item.image.src,\n        alt: item.image.alt,\n        width: '300',\n        height: '300',\n        params: { width: 300 },\n      };\n\n      const defaultImage = (\n        <Image\n          data-testid={`cart-table-item-image-${item.sku}`}\n          loading={index < 4 ? 'eager' : 'lazy'}\n          {...defaultImageProps}\n        />\n      );\n\n      const productImage = (\n        <Slot\n          name=\"Thumbnail\"\n          slot={slots?.Thumbnail}\n          className=\"cart-cart-summary-table__item-image-wrapper\"\n          context={{\n            item,\n            defaultImageProps: {\n              ...defaultImageProps,\n              loading: index < 4 ? 'eager' : 'lazy',\n            },\n            index,\n          }}\n        >\n          {routeProduct ? (\n            <a href={routeProduct(item)}>\n              {defaultImage}\n            </a>\n          ) : (\n            defaultImage\n          )}\n        </Slot>\n      );\n\n      const productSku = (\n        <Slot\n          name=\"Sku\"\n          slot={slots?.Sku}\n          context={{ item }}\n        >\n          {item.sku}\n        </Slot>\n      );\n\n      const itemAlert = item.outOfStock || slots?.ItemAlert ? (\n        <Slot\n          name=\"ItemAlert\"\n          slot={slots?.ItemAlert}\n          context={{ item }}\n        >\n          {item.outOfStock && (\n            <div className=\"cart-cart-summary-table__item-quantity-alert-wrapper\" data-testid={`cart-table-item-quantity-alert-${item.uid}`}>\n              <Icon className=\"cart-cart-summary-table__item-quantity-alert-icon\" source={OrderError} size={'16'} />\n              <span className=\"cart-cart-summary-table__item-quantity-alert-text\">\n                {dictionary.outOfStockAlert}\n              </span>\n            </div>\n          )}\n        </Slot>\n      ) : undefined;\n\n      const itemWarning = warningMessage || slots?.ItemWarning ? (\n        <Slot\n          name=\"ItemWarning\"\n          slot={slots?.ItemWarning}\n          context={{ item }}\n        >\n          {warningMessage && (\n            <div className=\"cart-cart-summary-table__item-quantity-warning-wrapper\" data-testid={`cart-table-item-quantity-warning-${item.uid}`}>\n              <Icon className=\"cart-cart-summary-table__item-quantity-warning-icon\" source={WarningWithCircle} size={'16'} />\n              <span className=\"cart-cart-summary-table__item-quantity-warning-text\">\n                {warningMessage}\n              </span>\n            </div>\n          )}\n        </Slot>\n      ) : undefined;\n\n      const itemConfigurations = getConfiguration({ item });\n      const productConfigurations = itemConfigurations || slots?.Configurations ? (\n        <Slot\n          name=\"Configurations\"\n          slot={slots?.Configurations}\n          context={{ item }}\n        >\n          {itemConfigurations && (\n            <ul className=\"cart-cart-summary-table__item-configurations\" data-testid={`cart-table-item-configurations-${item.sku}`}>\n              {Object.entries(itemConfigurations).map(([key, value]) => (\n                <li className=\"cart-cart-summary-table__item-configuration\" data-testid={`cart-table-item-configuration-${key}`} key={key}>\n                  <span className=\"cart-cart-summary-table__item-configuration-label\">{key}:</span>\n                  <span className=\"cart-cart-summary-table__item-configuration-value\">{value}</span>\n                </li>\n              ))}\n            </ul>\n          )}\n        </Slot>\n      ) : undefined;\n\n      const { subtotalProps, subtotalDiscountProps } = getSubtotalProps(item);\n\n      const updatedValue = itemsUpdating.get(item.uid)?.updatedValue;\n      const quantityInputValue = isUpdating && !isNaN(updatedValue) ? updatedValue : item.quantity;\n\n      const handleInputChange = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        const value = parseInt(target.value, 10);\n\n        debouncedQuantityChange(item, value);\n      };\n\n      const actions = (\n        <Slot\n          name=\"Actions\"\n          slot={slots?.Actions}\n          context={{ item, itemsUpdating, setItemUpdating, setItemUpdateError }}\n        >\n          {allowRemoveItems && (\n            <Button\n              variant=\"tertiary\"\n              size=\"medium\"\n              className=\"cart-cart-summary-table__item-remove-button\"\n              data-testid={`cart-table-item-remove-${item.uid}`}\n              icon={<Icon source={Trash} size={'32'} />}\n              onClick={() => handleRemoveItem(item)}\n              aria-label={dictionary.remove?.replace('{product}', item.name) || dictionary.removeDefault}\n            />\n          )}\n        </Slot>\n      );\n\n      return ({\n        key: item.uid,\n        uid: item.uid,\n        updating: isUpdating,\n        hasError: item.outOfStock || itemUpdateErrors.has(item.uid),\n        item: (\n          <Slot\n            name=\"Item\"\n            slot={slots?.Item}\n            context={{ item }}\n          >\n            <Item\n              productTitle={productTitle}\n              image={productImage}\n              sku={productSku}\n              configurations={productConfigurations}\n              alert={itemAlert}\n              warning={itemWarning}\n            />\n          </Slot>\n        ),\n        price: (\n          <Slot\n            name=\"Price\"\n            className=\"cart-cart-summary-table__item-price\"\n            slot={slots?.Price}\n            context={{ item }}\n          >\n            <Price\n              {...getPriceProps(item)}\n            />\n            {showIncludedTaxPrice && (\n              <span className=\"cart-cart-summary-table__item-price-tax-label\">\n                {dictionary.includingTax}:&nbsp;\n                <Price amount={item.taxedPrice?.value} currency={item.taxedPrice?.currency} />\n              </span>\n            )}\n            {showExcludingTaxPrice && (\n              <span className=\"cart-cart-summary-table__item-price-tax-label\">\n                {dictionary.excludingTax}:&nbsp;\n                <Price amount={item.regularPrice?.value} currency={item.regularPrice?.currency} />\n              </span>\n            )}\n\n          </Slot>\n        ),\n        quantity: (\n          <Slot\n            name=\"Quantity\"\n            className=\"cart-cart-summary-table__item-qty\"\n            slot={slots?.Quantity}\n            context={{ item, isUpdating, quantityInputValue, handleInputChange, itemUpdateErrors }}\n          >\n            {allowQuantityUpdates ? (\n              <input\n                id={`cart-table-item-quantity-${item.uid}`}\n                data-testid={`cart-table-item-quantity-${item.uid}`}\n                type=\"number\"\n                min=\"1\"\n                value={quantityInputValue}\n                disabled={isUpdating}\n                aria-label={dictionary.quantity}\n                className={classes([\n                  'cart-cart-summary-table__cell-qty-input',\n                  'cart-cart-summary-table__cell-qty-updater',\n                  ['cart-cart-summary-table__cell-qty-updater--disabled', isUpdating],\n                  ['cart-cart-summary-table__cell-qty-updater--error', itemUpdateErrors.has(item.uid)],\n                ])}\n                onChange={handleInputChange}\n              />\n            ) : (\n              <span>{item.quantity}</span>\n            )}\n          </Slot>\n        ),\n        subtotal: (\n          <Slot\n            name=\"Subtotal\"\n            className=\"cart-cart-summary-table__item-subtotal\"\n            slot={slots?.Subtotal}\n            context={{ item }}\n          >\n            <Price\n              {...subtotalProps}\n            />\n            {subtotalDiscountProps && (\n              <Price\n                {...subtotalDiscountProps}\n              />\n            )}\n            {showIncludedTaxPrice && (\n              <span className=\"cart-cart-summary-table__item-subtotal-tax-label\">\n                {dictionary.includingTax}:&nbsp;\n                <Price amount={item.rowTotalIncludingTax?.value} currency={item.rowTotalIncludingTax?.currency} />\n              </span>\n            )}\n            {showExcludingTaxPrice && (\n              <span className=\"cart-cart-summary-table__item-subtotal-tax-label\">\n                {dictionary.excludingTax}:&nbsp;\n                <Price amount={item.rowTotal?.value} currency={item.rowTotal?.currency} />\n              </span>\n            )}\n          </Slot>\n        ),\n        actions,\n      });\n    }) || [], [\n    cartModelData,\n    itemsUpdating,\n    allowQuantityUpdates,\n    routeProduct,\n    slots,\n    itemUpdateErrors,\n    dictionary,\n    getConfiguration,\n    allowRemoveItems,\n    debouncedQuantityChange,\n    getWarningMessage,\n    getPriceProps,\n    getSubtotalProps,\n    handleRemoveItem,\n    setItemUpdating,\n    setItemUpdateError,\n    showIncludedTaxPrice,\n    showExcludingTaxPrice,\n  ]);\n\n  /**\n   * Render the cart summary table skeleton if the cart is loading\n   */\n  if (loading) {\n    return <CartSummaryTableSkeleton />;\n  }\n\n  /**\n   * Render the cart summary table\n   */\n  return (\n    <CartSummaryTableComponent\n      entries={entries}\n      className={className}\n      {...props}\n    />\n  );\n};\n\nCartSummaryTable.getInitialData = async function () {\n  return getPersistedCartData();\n};"],"names":["SvgTrash","props","React","CartSummaryTable","entries","className","dictionary","useText","jsxs","classes","jsx","entry","VComponent","Item","productTitle","sku","image","configurations","alert","warning","useCartItems","onQuantityUpdate","onItemRemove","itemsUpdating","setItemsUpdating","useState","itemUpdateErrors","setItemUpdateErrors","cartSettings","_b","_a","state","showIncludedTaxPrice","showExcludingTaxPrice","getConfiguration","item","configuration","getPriceProps","_c","_d","getSubtotalProps","subtotalProps","subtotalDiscountProps","_e","_f","_g","_h","_i","_j","getWarningMessage","updateErrorMessage","insufficientQuantityText","lowInventoryText","processQuantityChange","useCallback","value","handleQuantityChange","quantity","updateProductsFromCart","prev","next","error","debouncedQuantityChange","useMemo","debounce","uid","data","CartSummaryTableSkeleton","Skeleton","SkeletonRow","initialData","routeProduct","slots","allowQuantityUpdates","allowRemoveItems","loading","setLoading","cartModelData","setCartModelData","handleRemoveItem","setItemUpdating","setItemUpdateError","useEffect","cartDataEvent","events","payload","a","b","index","isUpdating","warningMessage","Slot","defaultImageProps","defaultImage","Image","productImage","productSku","itemAlert","Icon","OrderError","itemWarning","WarningWithCircle","itemConfigurations","productConfigurations","key","updatedValue","quantityInputValue","handleInputChange","e","target","actions","Button","Trash","Price","CartSummaryTableComponent","getPersistedCartData"],"mappings":"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","x_google_ignoreList":[0]}