{"version":3,"file":"configs.test.js","sources":["/@dropins/tools/src/lib/aem/configs.test.ts"],"sourcesContent":["import {\n  resetConfig,\n  getRootPath,\n  getListOfRootPaths,\n  isMultistore,\n  getConfigValue,\n  getHeaders,\n  initializeConfig,\n} from './configs';\n\ndescribe('AEM Config', () => {\n  const mockConfig = {\n    public: {\n      default: {\n        headers: {\n          all: {\n            'x-test': 'test',\n          },\n          commerce: {\n            'x-commerce': 'commerce',\n          },\n        },\n      },\n    },\n  };\n\n  beforeEach(() => {\n    mockLocation('/');\n    resetConfig();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    jest.restoreAllMocks();\n  });\n\n  test('should initialize config (default)', () => {\n    const mockConfig = {\n      public: {\n        default: {\n          foo: 'bar',\n        },\n      },\n    };\n\n    const rootConfig = initializeConfig(mockConfig);\n\n    // Test config value retrieval\n    expect(rootConfig).toEqual(mockConfig.public.default);\n  });\n\n  test('should initialize config with default config if root path is not found', () => {\n    mockLocation('/not-found/');\n\n    const rootConfig = initializeConfig(mockConfig);\n\n    // Test config value retrieval\n    expect(rootConfig).toEqual(mockConfig.public.default);\n  });\n\n  test('should initialize config with default config if root path is empty', () => {\n    mockLocation('/sub-path/');\n\n    const rootConfig = initializeConfig({\n      ...mockConfig,\n      public: {\n        ...mockConfig.public,\n        '/sub-path/': {},\n      },\n    });\n\n    // Test config value retrieval\n    expect(rootConfig).toEqual(mockConfig.public.default);\n  });\n\n  test('should initialize config with overrides if root path is not empty', () => {\n    mockLocation('/sub-path/');\n\n    const rootConfig = initializeConfig({\n      ...mockConfig,\n      public: {\n        ...mockConfig.public,\n        '/sub-path/': {\n          headers: {\n            all: {\n              'x-test': 'test2',\n            },\n          },\n        },\n      },\n    });\n\n    // Test config value retrieval\n    expect(rootConfig).toEqual({\n      headers: {\n        all: {\n          'x-test': 'test2',\n        },\n        commerce: {\n          'x-commerce': 'commerce',\n        },\n      },\n    });\n  });\n\n  test('should throw error if no config is initialized', async () => {\n    expect(() => getConfigValue('foo')).toThrow(\n      'Configuration not initialized. Call initializeConfig() first.'\n    );\n  });\n\n  test('should get config value', async () => {\n    initializeConfig({\n      public: {\n        default: {\n          foo: 'bar',\n        },\n      },\n    });\n\n    expect(getConfigValue('foo')).toBe('bar');\n  });\n\n  test('should get config value from root path', () => {\n    mockLocation('/sub-path/');\n\n    initializeConfig({\n      ...mockConfig,\n      public: {\n        ...mockConfig.public,\n        '/sub-path/': {\n          foo: 'baz',\n          nested: {\n            foo: 'nested',\n          },\n        },\n      },\n    });\n\n    expect(getConfigValue('headers.all.x-test')).toBe('test');\n    expect(getConfigValue('foo')).toBe('baz');\n    expect(getConfigValue('nested.foo')).toBe('nested');\n  });\n\n  test('should warn if value is not found', async () => {\n    const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\n    initializeConfig(mockConfig);\n\n    getConfigValue('foo.bar');\n\n    expect(consoleSpy).toHaveBeenCalledWith(\n      'Property foo.bar does not exist in the object'\n    );\n  });\n\n  test('should warn if the root path has no config', async () => {\n    const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\n\n    const rootPath = getRootPath(null);\n\n    expect(rootPath).toBe('/');\n\n    expect(consoleSpy).toHaveBeenCalledWith(\n      'No config found. Please call initializeConfig() first.'\n    );\n  });\n\n  test('should warn if the root path is not found', async () => {\n    mockLocation('/no-found/');\n\n    const rootPath = getRootPath({\n      public: {\n        default: {},\n      },\n    });\n\n    expect(rootPath).toBe('/');\n  });\n\n  test('should get default root path', async () => {\n    mockLocation('/path/');\n\n    initializeConfig(mockConfig);\n\n    expect(getRootPath()).toBe('/');\n  });\n\n  test('should get root path from public config', async () => {\n    mockLocation('/test/');\n\n    initializeConfig({\n      ...mockConfig,\n      public: {\n        ...mockConfig.public,\n        '/test/': {},\n      },\n    });\n\n    expect(getRootPath()).toBe('/test/');\n  });\n\n  test('should get list of root paths', async () => {\n    initializeConfig({\n      ...mockConfig,\n      public: {\n        ...mockConfig.public,\n        '/test/': {},\n        '/test2/': {},\n      },\n    });\n\n    expect(getListOfRootPaths()).toEqual(['/test/', '/test2/']);\n  });\n\n  test('should warn if list of root paths has no config', async () => {\n    const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\n\n    const rootPaths = getListOfRootPaths();\n\n    expect(consoleSpy).toHaveBeenCalledWith(\n      'No config found. Please call initializeConfig() first.'\n    );\n\n    expect(rootPaths).toEqual([]);\n  });\n\n  test('should check if multistore', async () => {\n    initializeConfig(mockConfig);\n\n    expect(isMultistore()).toBe(false);\n\n    initializeConfig({\n      ...mockConfig,\n      public: {\n        ...mockConfig.public,\n        '/test/': {},\n      },\n    });\n\n    expect(isMultistore()).toBe(true);\n  });\n\n  test('should throw error if headers are not initialized', async () => {\n    expect(() => getHeaders('all')).toThrow(\n      'Configuration not initialized. Call initializeConfig() first.'\n    );\n  });\n\n  test('should get headers', async () => {\n    initializeConfig(mockConfig);\n\n    // All headers\n    expect(getHeaders('all')).toEqual(mockConfig.public.default.headers.all);\n    expect(getHeaders('commerce')).toEqual({\n      ...mockConfig.public.default.headers.all,\n      ...mockConfig.public.default.headers.commerce,\n    });\n  });\n\n  test('should get \"all\" headers if no config is found', async () => {\n    initializeConfig(mockConfig);\n\n    expect(getHeaders('not-found')).toEqual({\n      ...mockConfig.public.default.headers.all,\n    });\n  });\n\n  test('should get empty headers if no config is found', async () => {\n    initializeConfig({\n      public: {\n        default: {},\n      },\n    });\n\n    expect(getHeaders('not-found')).toEqual({});\n  });\n});\n\nfunction mockLocation(pathname: string) {\n  Object.defineProperty(window, 'location', {\n    value: {\n      pathname,\n      origin: 'http://localhost',\n    },\n  });\n}\n"],"names":["mockConfig","mockLocation","resetConfig","rootConfig","initializeConfig","getConfigValue","consoleSpy","rootPath","getRootPath","getListOfRootPaths","rootPaths","isMultistore","getHeaders","pathname"],"mappings":"mOAUA,SAAS,aAAc,IAAM,CAC3B,MAAMA,EAAa,CACjB,OAAQ,CACN,QAAS,CACP,QAAS,CACP,IAAK,CACH,SAAU,MACZ,EACA,SAAU,CACR,aAAc,UAAA,CAChB,CACF,CACF,CAEJ,EAEA,WAAW,IAAM,CACfC,EAAa,GAAG,EACJC,EAAA,CAAA,CACb,EAED,UAAU,IAAM,CACd,KAAK,cAAc,EACnB,KAAK,gBAAgB,CAAA,CACtB,EAED,KAAK,qCAAsC,IAAM,CAC/C,MAAMF,EAAa,CACjB,OAAQ,CACN,QAAS,CACP,IAAK,KAAA,CACP,CAEJ,EAEMG,EAAaC,EAAiBJ,CAAU,EAG9C,OAAOG,CAAU,EAAE,QAAQH,EAAW,OAAO,OAAO,CAAA,CACrD,EAED,KAAK,yEAA0E,IAAM,CACnFC,EAAa,aAAa,EAEpB,MAAAE,EAAaC,EAAiBJ,CAAU,EAG9C,OAAOG,CAAU,EAAE,QAAQH,EAAW,OAAO,OAAO,CAAA,CACrD,EAED,KAAK,qEAAsE,IAAM,CAC/EC,EAAa,YAAY,EAEzB,MAAME,EAAaC,EAAiB,CAClC,GAAGJ,EACH,OAAQ,CACN,GAAGA,EAAW,OACd,aAAc,CAAA,CAAC,CACjB,CACD,EAGD,OAAOG,CAAU,EAAE,QAAQH,EAAW,OAAO,OAAO,CAAA,CACrD,EAED,KAAK,oEAAqE,IAAM,CAC9EC,EAAa,YAAY,EAEzB,MAAME,EAAaC,EAAiB,CAClC,GAAGJ,EACH,OAAQ,CACN,GAAGA,EAAW,OACd,aAAc,CACZ,QAAS,CACP,IAAK,CACH,SAAU,OAAA,CACZ,CACF,CACF,CACF,CACD,EAGM,OAAAG,CAAU,EAAE,QAAQ,CACzB,QAAS,CACP,IAAK,CACH,SAAU,OACZ,EACA,SAAU,CACR,aAAc,UAAA,CAChB,CACF,CACD,CAAA,CACF,EAED,KAAK,iDAAkD,SAAY,CACjE,OAAO,IAAME,EAAe,KAAK,CAAC,EAAE,QAClC,+DACF,CAAA,CACD,EAED,KAAK,0BAA2B,SAAY,CACzBD,EAAA,CACf,OAAQ,CACN,QAAS,CACP,IAAK,KAAA,CACP,CACF,CACD,EAED,OAAOC,EAAe,KAAK,CAAC,EAAE,KAAK,KAAK,CAAA,CACzC,EAED,KAAK,yCAA0C,IAAM,CACnDJ,EAAa,YAAY,EAERG,EAAA,CACf,GAAGJ,EACH,OAAQ,CACN,GAAGA,EAAW,OACd,aAAc,CACZ,IAAK,MACL,OAAQ,CACN,IAAK,QAAA,CACP,CACF,CACF,CACD,EAED,OAAOK,EAAe,oBAAoB,CAAC,EAAE,KAAK,MAAM,EACxD,OAAOA,EAAe,KAAK,CAAC,EAAE,KAAK,KAAK,EACxC,OAAOA,EAAe,YAAY,CAAC,EAAE,KAAK,QAAQ,CAAA,CACnD,EAED,KAAK,oCAAqC,SAAY,CACpD,MAAMC,EAAa,KAAK,MAAM,QAAS,MAAM,EAAE,mBAAmB,IAAM,CAAA,CAAE,EAC1EF,EAAiBJ,CAAU,EAE3BK,EAAe,SAAS,EAExB,OAAOC,CAAU,EAAE,qBACjB,+CACF,CAAA,CACD,EAED,KAAK,6CAA8C,SAAY,CAC7D,MAAMA,EAAa,KAAK,MAAM,QAAS,MAAM,EAAE,mBAAmB,IAAM,CAAA,CAAE,EAEpEC,EAAWC,EAAY,IAAI,EAE1B,OAAAD,CAAQ,EAAE,KAAK,GAAG,EAEzB,OAAOD,CAAU,EAAE,qBACjB,wDACF,CAAA,CACD,EAED,KAAK,4CAA6C,SAAY,CAC5DL,EAAa,YAAY,EAEzB,MAAMM,EAAWC,EAAY,CAC3B,OAAQ,CACN,QAAS,CAAA,CAAC,CACZ,CACD,EAEM,OAAAD,CAAQ,EAAE,KAAK,GAAG,CAAA,CAC1B,EAED,KAAK,+BAAgC,SAAY,CAC/CN,EAAa,QAAQ,EAErBG,EAAiBJ,CAAU,EAE3B,OAAOQ,EAAY,CAAC,EAAE,KAAK,GAAG,CAAA,CAC/B,EAED,KAAK,0CAA2C,SAAY,CAC1DP,EAAa,QAAQ,EAEJG,EAAA,CACf,GAAGJ,EACH,OAAQ,CACN,GAAGA,EAAW,OACd,SAAU,CAAA,CAAC,CACb,CACD,EAED,OAAOQ,EAAY,CAAC,EAAE,KAAK,QAAQ,CAAA,CACpC,EAED,KAAK,gCAAiC,SAAY,CAC/BJ,EAAA,CACf,GAAGJ,EACH,OAAQ,CACN,GAAGA,EAAW,OACd,SAAU,CAAC,EACX,UAAW,CAAA,CAAC,CACd,CACD,EAED,OAAOS,GAAoB,EAAE,QAAQ,CAAC,SAAU,SAAS,CAAC,CAAA,CAC3D,EAED,KAAK,kDAAmD,SAAY,CAClE,MAAMH,EAAa,KAAK,MAAM,QAAS,MAAM,EAAE,mBAAmB,IAAM,CAAA,CAAE,EAEpEI,EAAYD,EAAmB,EAErC,OAAOH,CAAU,EAAE,qBACjB,wDACF,EAEA,OAAOI,CAAS,EAAE,QAAQ,EAAE,CAAA,CAC7B,EAED,KAAK,6BAA8B,SAAY,CAC7CN,EAAiBJ,CAAU,EAE3B,OAAOW,EAAa,CAAC,EAAE,KAAK,EAAK,EAEhBP,EAAA,CACf,GAAGJ,EACH,OAAQ,CACN,GAAGA,EAAW,OACd,SAAU,CAAA,CAAC,CACb,CACD,EAED,OAAOW,EAAa,CAAC,EAAE,KAAK,EAAI,CAAA,CACjC,EAED,KAAK,oDAAqD,SAAY,CACpE,OAAO,IAAMC,EAAW,KAAK,CAAC,EAAE,QAC9B,+DACF,CAAA,CACD,EAED,KAAK,qBAAsB,SAAY,CACrCR,EAAiBJ,CAAU,EAGpB,OAAAY,EAAW,KAAK,CAAC,EAAE,QAAQZ,EAAW,OAAO,QAAQ,QAAQ,GAAG,EACvE,OAAOY,EAAW,UAAU,CAAC,EAAE,QAAQ,CACrC,GAAGZ,EAAW,OAAO,QAAQ,QAAQ,IACrC,GAAGA,EAAW,OAAO,QAAQ,QAAQ,QAAA,CACtC,CAAA,CACF,EAED,KAAK,iDAAkD,SAAY,CACjEI,EAAiBJ,CAAU,EAE3B,OAAOY,EAAW,WAAW,CAAC,EAAE,QAAQ,CACtC,GAAGZ,EAAW,OAAO,QAAQ,QAAQ,GAAA,CACtC,CAAA,CACF,EAED,KAAK,iDAAkD,SAAY,CAChDI,EAAA,CACf,OAAQ,CACN,QAAS,CAAA,CAAC,CACZ,CACD,EAED,OAAOQ,EAAW,WAAW,CAAC,EAAE,QAAQ,CAAA,CAAE,CAAA,CAC3C,CACH,CAAC,EAED,SAASX,EAAaY,EAAkB,CAC/B,OAAA,eAAe,OAAQ,WAAY,CACxC,MAAO,CACL,SAAAA,EACA,OAAQ,kBAAA,CACV,CACD,CACH"}