{"version":3,"file":"assets.test.js","sources":["/@dropins/tools/src/lib/aem/assets.test.ts"],"sourcesContent":["import {\n  isAemAssetsEnabled,\n  getDefaultAemAssetsOptimizationParams,\n  isAemAssetsUrl,\n  generateAemAssetsOptimizedUrl,\n  tryGenerateAemAssetsOptimizedUrl,\n  makeAemAssetsImageSlot,\n  tryRenderAemAssetsImage,\n} from './assets';\n\nimport { getConfigValue } from './configs';\n\n// Mock the config\njest.mock('./configs', () => ({\n  getConfigValue: jest.fn().mockImplementation((key: string) => {\n    if (key === 'commerce-assets-enabled') {\n      return true;\n    }\n    return undefined;\n  }),\n}));\n\n// Mock window.location\nObject.defineProperty(window, 'location', {\nvalue: {\n    pathname: '/',\n    origin: 'https://example.com',\n    protocol: 'https:',\n},\n});\n\ndescribe('AEM Assets', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test('should be enabled', () => {\n    expect(isAemAssetsEnabled()).toBe(true);\n\n    (getConfigValue as jest.Mock).mockReturnValueOnce('true');\n    expect(isAemAssetsEnabled()).toBe(true);\n  });\n\n  test('should be disabled', () => {\n    (getConfigValue as jest.Mock).mockReturnValueOnce(false);\n    expect(isAemAssetsEnabled()).toBe(false);\n  });\n\n  test('should return default optimization params', () => {\n    const params = getDefaultAemAssetsOptimizationParams();\n    expect(params).toEqual({\n      quality: 80,\n      format: 'webp',\n    });\n  });\n\n  test('should return true if url is aem assets url', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    expect(isAemAssetsUrl(url)).toBe(true);\n  });\n\n  test('should return false if url is not aem assets url', () => {\n    const url = 'https://example.com/image.jpg';\n    expect(isAemAssetsUrl(url)).toBe(false);\n  });\n\n  test('should return true if url is aem assets url with protocol relative path', () => {\n    const url = '//example.com/adobe/assets/urn:aaid:aem:1234567890';\n    expect(isAemAssetsUrl(url)).toBe(true);\n  });\n\n  test('should generate aem assets optimized url', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const params = {\n      quality: 80,\n      format: 'webp',\n    };\n    const optimizedUrl = generateAemAssetsOptimizedUrl(url, alias, params);\n    expect(optimizedUrl).toBe('https://example.com/adobe/assets/urn:aaid:aem:1234567890/as/test.webp?quality=80');\n  });\n\n  test('should generate aem assets optimized url with default params', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const optimizedUrl = generateAemAssetsOptimizedUrl(url, alias);\n    expect(optimizedUrl).toBe('https://example.com/adobe/assets/urn:aaid:aem:1234567890/as/test.webp?quality=80');\n  });\n\n  test('should generate aem assets optimized url with crop', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const params = {\n      quality: 80,\n      format: 'webp',\n      crop: {\n        xOrigin: 0,\n        yOrigin: 0,\n      },\n    };\n    const optimizedUrl = generateAemAssetsOptimizedUrl(url, alias, params);\n    expect(optimizedUrl).toBe('https://example.com/adobe/assets/urn:aaid:aem:1234567890/as/test.webp?quality=80&crop=0p%2C0p%2C100p%2C100p');\n  });\n\n  test('should generate aem assets optimized url with size', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const params = {\n      quality: 80,\n      format: 'webp',\n      size: {\n        width: 100,\n        height: 100,\n      },\n    };\n    const optimizedUrl = generateAemAssetsOptimizedUrl(url, alias, params);\n    expect(optimizedUrl).toBe('https://example.com/adobe/assets/urn:aaid:aem:1234567890/as/test.webp?quality=80&size=100%2C100');\n  });\n\n  test('should generate aem assets optimized url with width and height', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const params = {\n      quality: 80,\n      format: 'webp',\n      width: 100,\n      height: 100,\n    };\n    const optimizedUrl = generateAemAssetsOptimizedUrl(url, alias, params);\n    expect(optimizedUrl).toBe('https://example.com/adobe/assets/urn:aaid:aem:1234567890/as/test.webp?quality=80&width=100&height=100');\n  });\n\n  test('should try generate aem assets optimized url', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const params = {\n      quality: 80,\n      format: 'webp',\n      width: 100,\n      height: 100,\n    };\n    const optimizedUrl = tryGenerateAemAssetsOptimizedUrl(url, alias, params);\n    expect(optimizedUrl).toBe('https://example.com/adobe/assets/urn:aaid:aem:1234567890/as/test.webp?quality=80&width=100&height=100');\n  });\n\n  test('should try generate aem assets optimized url with default params', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const optimizedUrl = tryGenerateAemAssetsOptimizedUrl(url, alias);\n    expect(optimizedUrl).toBe('https://example.com/adobe/assets/urn:aaid:aem:1234567890/as/test.webp?quality=80');\n  });\n\n  test('should try generate aem assets optimized url with crop', () => {\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const params = {\n      quality: 80,\n      format: 'webp',\n      crop: {\n        xOrigin: 0,\n        yOrigin: 0,\n        width: 100,\n        height: 100,\n      },\n    };\n    const optimizedUrl = tryGenerateAemAssetsOptimizedUrl(url, alias, params);\n    expect(optimizedUrl).toBe('https://example.com/adobe/assets/urn:aaid:aem:1234567890/as/test.webp?quality=80&crop=0p%2C0p%2C100p%2C100p');\n  }); \n\n  test('should return original url if aem assets is disabled', () => {\n    (getConfigValue as jest.Mock).mockReturnValueOnce(false);\n    const url = 'https://example.com/adobe/assets/urn:aaid:aem:1234567890';\n    const alias = 'test';\n    const params = {\n      quality: 80,\n      format: 'webp',\n    };\n    const optimizedUrl = tryGenerateAemAssetsOptimizedUrl(url, alias, params); \n    expect(optimizedUrl).toBe(url);\n  });\n\n  test('should return original url if url is not aem assets url', () => {\n    const url = 'https://example.com/image.jpg';\n    const alias = 'test';\n    const params = {\n      quality: 80,\n      format: 'webp',\n    };\n    const optimizedUrl = tryGenerateAemAssetsOptimizedUrl(url, alias, params);\n    expect(optimizedUrl).toBe(url);\n  });\n\n  test('should make aem assets image slot', () => {\n    const slot = makeAemAssetsImageSlot({\n      alias: 'test',\n      params: {},\n      imageProps: {\n        src: 'https://example.com/adobe/assets/urn:aaid:aem:1234567890',\n      },\n    });\n    const container = document.createElement('div');\n    slot({ replaceWith: (element: HTMLElement) => {\n      container.appendChild(element);\n    } });\n  });\n\n  test('should try render aem assets image', () => {\n    const container = document.createElement('div');\n    const ctx = {\n      replaceWith: (element: HTMLElement) => {\n        container.appendChild(element);\n      },\n    };\n    const config = {\n      alias: 'test',\n      params: {},\n      imageProps: {\n        src: 'https://example.com/adobe/assets/urn:aaid:aem:1234567890',\n      },\n    };\n    tryRenderAemAssetsImage(ctx, config);\n  });\n\n  test('should render default image if aem assets is disabled', () => {\n    (getConfigValue as jest.Mock).mockReturnValueOnce(false);\n    const container = document.createElement('div');\n    const ctx = {\n      replaceWith: (element: HTMLElement) => {\n        container.appendChild(element);\n      },\n    };\n    const config = {\n      alias: 'test',\n      params: {},\n      imageProps: {\n        src: 'https://example.com/adobe/assets/urn:aaid:aem:1234567890',\n      },\n    };\n    tryRenderAemAssetsImage(ctx, config);\n  });\n\n  test('should render default image if url is not aem assets url', () => {\n    const container = document.createElement('div');\n    const ctx = {\n      replaceWith: (element: HTMLElement) => {\n        container.appendChild(element);\n      },\n    };\n    const config = {\n      alias: 'test',\n      params: {},\n      imageProps: {\n        src: 'https://example.com/image.jpg',\n      },\n    };\n    tryRenderAemAssetsImage(ctx, config);\n  });\n});"],"names":["key","isAemAssetsEnabled","getConfigValue","params","getDefaultAemAssetsOptimizationParams","isAemAssetsUrl","optimizedUrl","generateAemAssetsOptimizedUrl","tryGenerateAemAssetsOptimizedUrl","url","slot","makeAemAssetsImageSlot","container","element","tryRenderAemAssetsImage"],"mappings":"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"}