{"version":3,"file":"recaptcha.js","sources":["@dropins/tools/src/recaptcha/configs/message.config.ts","@dropins/tools/src/recaptcha/configs/typeForms.config.ts","@dropins/tools/src/recaptcha/configs/recaptchaBadgeSelector.config.ts","@dropins/tools/src/recaptcha/lib/_extendConfig.ts","@dropins/tools/src/recaptcha/lib/_storageConfig.ts","@dropins/tools/src/recaptcha/lib/_checkRecaptchaBadge.ts","@dropins/tools/src/recaptcha/lib/_convertKeysToCamelCase.ts","@dropins/tools/src/recaptcha/services/recaptcha.service.ts","@dropins/tools/src/recaptcha/graphql/recaptchaConfig.graphql.ts","@dropins/tools/src/fetch-graphql/index.ts","@dropins/tools/src/recaptcha/index.ts"],"sourcesContent":["/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nexport const recaptchaMessage = {\n  failedFetch: 'Failed to fetch config from backend with status:',\n  failedSetStorageConfig: 'Failed to set storage config',\n  failedGetStorageConfig: 'Configuration could not be loaded.',\n  failedExecutionRecaptcha: 'Recaptcha execution failed',\n  failedInitializing: 'An error occurred while initializing ReCaptcha:',\n};\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nexport const typeDefaultForm: Record<string, string> = {\n  PLACE_ORDER: 'placeOrder',\n  CONTACT: 'contactUs',\n  CUSTOMER_LOGIN: 'generateCustomerToken',\n  CUSTOMER_FORGOT_PASSWORD: 'requestPasswordResetEmail',\n  CUSTOMER_CREATE: 'createCustomerV2',\n  CUSTOMER_EDIT: 'updateCustomerV2',\n  NEWSLETTER: 'subscribeEmailToNewsletter',\n  PRODUCT_REVIEW: 'createProductReview',\n  SENDFRIEND: 'SENDFRIEND',\n  BRAINTREE: 'BRAINTREE',\n};\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nexport const recaptchaBadgeSelector = '.grecaptcha-badge iframe';","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nimport { ReCaptchaV3Model } from '../types/recaptcha.types';\nimport { typeDefaultForm } from '../configs/typeForms.config';\n\nexport const extendConfig = (\n  config: ReCaptchaV3Model,\n  modifyParams: any[]\n): ReCaptchaV3Model | undefined => {\n  if (config && config.forms) {\n    const modifyForm = config.forms.concat(modifyParams).map((el) => {\n      if (typeof el !== 'string') return { ...el, enabledBadgePlace: false };\n\n      return {\n        badgeId: typeDefaultForm[el],\n        enabledBadgePlace: false,\n      };\n    });\n\n    return { ...config, forms: [...new Set(modifyForm)] };\n  }\n};\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nimport { recaptchaMessage } from '../configs';\nimport { ReCaptchaV3Model } from '../types/recaptcha.types';\n\nconst getConfigStorage = async (\n  storageKey: string,\n  retries = 1,\n  delay = 1000\n): Promise<ReCaptchaV3Model | null> => {\n  const storedConfig = sessionStorage.getItem(storageKey);\n\n  if (storedConfig !== null) {\n    return JSON.parse(storedConfig);\n  } else if (retries > 0) {\n    await new Promise((resolve) => setTimeout(resolve, delay));\n\n    return getConfigStorage(storageKey, retries - 1, delay);\n  }\n\n  return null;\n};\n\nconst setConfigStorage = (\n  storageKey: string,\n  config: ReCaptchaV3Model,\n  logger: boolean\n) => {\n  if (!storageKey || !config.websiteKey) return null;\n\n  try {\n    sessionStorage.setItem(storageKey, JSON.stringify(config));\n  } catch (error) {\n    logger && console.error(recaptchaMessage.failedSetStorageConfig, error);\n    return null;\n  }\n};\n\nexport { getConfigStorage, setConfigStorage };\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nimport { recaptchaBadgeSelector } from '../configs';\n\nconst waitForElement = (selector: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    try {\n      // Check if the element is already in the DOM\n      if (document.querySelector(selector)) {\n        resolve();\n        return;\n      }\n\n      // Create an observer to watch for changes\n      const observer = new MutationObserver(() => {\n        if (document.querySelector(selector)) {\n          resolve();\n          observer.disconnect();\n        }\n      });\n\n      // Start observing the body for child changes only\n      observer.observe(document.body, {\n        childList: true,\n        subtree: false,\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const checkRecaptchaBadge = async (): Promise<boolean> => {\n  try {\n    await waitForElement(recaptchaBadgeSelector);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nexport const convertKeysToCamelCase = (obj: {\n  [key: string]: any;\n}): { [key: string]: string | number | boolean } => {\n  const camelCaseKey = (key: string): string => {\n    return key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n  };\n\n  return Object.keys(obj).reduce((result, key) => {\n    const newKey = camelCaseKey(key);\n    result[newKey] = obj[key];\n    return result;\n  }, {} as { [key: string]: any });\n};\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nimport { recaptchaMessage } from '../configs';\nimport {\n  MutationObserverInit,\n  ReCaptchaV3Model,\n} from '../types/recaptcha.types';\nconst { failedExecutionRecaptcha } = recaptchaMessage;\n\nexport const getRecaptchaToken = async (\n  websiteKey: string\n): Promise<string> => {\n  if (!(window as any).grecaptcha) {\n    return Promise.reject(failedExecutionRecaptcha);\n  }\n\n  try {\n    const token = await window.grecaptcha.execute(websiteKey, {\n      action: 'click',\n    });\n\n    return token;\n  } catch (error) {\n    return Promise.reject(`${failedExecutionRecaptcha} : ${error}`);\n  }\n};\n\nexport const waitForReCaptcha = () => {\n  return new Promise((resolve) => {\n    const observer = new MutationObserver((_, obs) => {\n      if (window.grecaptcha) {\n        obs.disconnect();\n        resolve(true);\n      }\n    });\n\n    const observerOptions: MutationObserverInit = {\n      childList: true,\n      subtree: true,\n      attributes: true,\n    };\n\n    observer.observe(document.body, observerOptions);\n  });\n};\n\nexport const verifyReCaptchaLoad = async (\n  badgeId: string,\n  config: ReCaptchaV3Model,\n  logger: boolean\n): Promise<void> => {\n  if (!window.grecaptcha) {\n    await waitForReCaptcha();\n  }\n\n  return grecaptcha.ready(() => {\n    const badgeContainers = document.querySelectorAll(`#${badgeId}`);\n\n    if (!badgeContainers.length) return;\n\n    // Handle the case when multiple instances of the drop-in container rendered on the same page\n\n    badgeContainers.forEach(\n      (element) => (element.id = `${element.id}_${Math.random().toString(36)}`) // NOSONAR\n    );\n\n    badgeContainers.forEach((element) => {\n      if (element.innerHTML === '') {\n        try {\n          grecaptcha.render(element.id, {\n            sitekey: config.websiteKey as string,\n            badge: config.badgePosition,\n            size: 'invisible',\n            theme: config.theme ?? 'light',\n          });\n        } catch (error) {\n          logger && console.error(error);\n        }\n      }\n    });\n  });\n};\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nexport const RECAPTCHA_CONFIGURATION_V3 = `query {\n  recaptchaV3Config {\n    is_enabled\n    website_key\n    minimum_score\n    badge_position\n    language_code\n    failure_message\n    forms\n    theme\n  } \n}`;\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nexport type Header = { [key: string]: string | null };\n\nexport type FetchOptions = {\n  method?: 'GET' | 'POST';\n  variables?: { [key: string]: any };\n  signal?: AbortSignal;\n  cache?:\n    | 'default'\n    | 'no-store'\n    | 'reload'\n    | 'no-cache'\n    | 'force-cache'\n    | 'only-if-cached';\n};\n\nexport type FetchQueryError = Array<{\n  message: string;\n  extensions: { category: string };\n}>;\n\nexport type BeforeHook = (requestInit: RequestInit) => RequestInit;\nexport type AfterHook<T = any> = (\n    requestInit: RequestInit,\n    response: { errors?: FetchQueryError; data: T }\n) => { errors?: FetchQueryError; data: T };\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n\nclass FetchGraphQLMesh {\n  public _endpoint?: string;\n\n  get endpoint() {\n    return this._endpoint;\n  }\n\n  get fetchGraphQlHeaders() {\n    return this._fetchGraphQlHeaders;\n  }\n\n  public _fetchGraphQlHeaders: Header = {};\n\n  public _beforeHooks: BeforeHook[] = [];\n\n  public _afterHooks: AfterHook[] = [];\n\n  /**\n   * Sets the GraphQL endpoint.\n   * @param endpoint - The GraphQL endpoint.\n   */\n  public setEndpoint(endpoint: string) {\n    this._endpoint = endpoint;\n  }\n\n  /**\n   * Sets the GraphQL headers.\n   * @param key - The key of the header.\n   * @param value - The value of the header.\n   */\n  public setFetchGraphQlHeader(key: string, value: string | null) {\n    this._fetchGraphQlHeaders = {\n      ...this.fetchGraphQlHeaders,\n      [key]: value,\n    };\n  }\n  /**\n   * Removes a specific GraphQL header.\n   * @param key - The key of the header.\n   */\n  public removeFetchGraphQlHeader(key: string) {\n    delete this._fetchGraphQlHeaders[key];\n  }\n  /**\n   * Sets the GraphQL headers.\n   * @param header - The header object or a function that returns a header object.\n   * If a function is provided, it will be called with the previous headers.\n   * The returned object will be merged with the previous headers.\n   * @example\n   * ```js\n   * // set headers\n   * setFetchGraphQlHeaders({ test: 'test' });\n   * \n   * // merge with previous headers\n   * setFetchGraphQlHeaders((prev) => ({\n   *   ...prev,\n   *  test: 'test2',\n   * }));\n   * ```\n   */\n  public setFetchGraphQlHeaders(header: Header | ((prev: Header) => Header)) {\n    if (typeof header === 'function') {\n      this._fetchGraphQlHeaders = {\n        ...this._fetchGraphQlHeaders,\n        ...header(this._fetchGraphQlHeaders),\n      };\n    } else {\n      this._fetchGraphQlHeaders = { ...header };\n    }\n  }\n  /**\n   * Adds a hook executed before the GraphQL call.\n   * @param hook - The hook function.\n   * @example\n   * ```js\n   * // add before hook\n   * addBeforeHook((requestInit) => console.log('About to execute ' + requestInit.method + ' call.'));\n   *\n   * // modify the requestInit before executing the request\n   * addBeforeHook((requestInit) => {method: requestInit.method, body: 'new body'});\n   * ```\n   */\n  public addBeforeHook(hook: BeforeHook): void {\n    this._beforeHooks.push(hook);\n  }\n  /**\n   * Adds a hook executed before the GraphQL call.\n   * @param hook - The hook function.\n   * @example\n   * ```js\n   * // add before hook\n   * addAfterHook((requestInit, response) => console.log(\n   *     'The result of ' + requestInit.method + ' call is ' + response.json().body\n   * ));\n   *\n   * // modify the response\n   * addAfterHook((requestInit, response) => new Response(JSON.stringify({ ...response, modified: true }));\n   * ```\n   */\n  public addAfterHook(hook: AfterHook): void {\n    this._afterHooks.push(hook);\n  }\n  /**\n   * Fetches GraphQL data.\n   * @param query - The GraphQL query.\n   * @param options - Optional configuration for the fetch request.\n   * @returns\n   */\n  public async fetchGraphQl<T = any>(\n    query: string,\n    options?: FetchOptions\n  ): Promise<{ errors?: FetchQueryError; data: T }> {\n    const endpoint = this.endpoint;\n    const fetchGraphQlHeaders = this.fetchGraphQlHeaders;\n\n    if (!endpoint) throw Error('Missing \"url\"');\n\n    const method = options?.method ?? 'POST';\n    const cache = options?.cache;\n    const signal = options?.signal;\n\n    let body;\n    const url = new URL(endpoint);\n    const headers = {\n      ...defaultHeaders,\n      ...fetchGraphQlHeaders,\n    };\n\n    if (method === 'POST') {\n      body = JSON.stringify({\n        query,\n        variables: options?.variables,\n      });\n    }\n\n    if (method === 'GET') {\n      url.searchParams.append('query', minimizeGraphQlQuery(query));\n\n      if (options?.variables)\n        url.searchParams.append('variables', JSON.stringify(options.variables));\n    }\n\n    let requestInit: RequestInit = {\n      method,\n      headers,\n      body,\n      cache,\n      signal,\n    };\n\n    requestInit = await this._beforeHooks.reduce(\n        async (prev, hook) => hook(await prev),\n        Promise.resolve(requestInit)\n    );\n\n    return await fetch(url, requestInit).then((r) => r.json().then(\n        (response) => this._afterHooks.reduce(\n            async (result, hook) => hook(requestInit, await result),\n            Promise.resolve(response)\n        )\n    ));\n  }\n  /**\n   * Gets the configuration.\n   */\n  public getConfig() {\n    return {\n      endpoint: this.endpoint,\n      fetchGraphQlHeaders: this.fetchGraphQlHeaders,\n    };\n  }\n\n  public getMethods() {\n    return {\n      setEndpoint: this.setEndpoint.bind(this),\n      setFetchGraphQlHeader: this.setFetchGraphQlHeader.bind(this),\n      removeFetchGraphQlHeader: this.removeFetchGraphQlHeader.bind(this),\n      setFetchGraphQlHeaders: this.setFetchGraphQlHeaders.bind(this),\n      fetchGraphQl: this.fetchGraphQl.bind(this),\n      getConfig: this.getConfig.bind(this),\n      addBeforeHook: this.addBeforeHook.bind(this),\n      addAfterHook: this.addAfterHook.bind(this),\n    };\n  }\n}\n\nconst mesh = new FetchGraphQLMesh();\n\n/**\n * `FetchGraphQL` is a class that extends `FetchGraphQLMesh`.\n * It provides methods to get the GraphQL endpoint and headers.\n *\n * @class\n *\n */\nexport class FetchGraphQL extends FetchGraphQLMesh {\n  get endpoint() {\n    return this._endpoint ?? mesh.endpoint;\n  }\n\n  get fetchGraphQlHeaders() {\n    return (\n      (this._endpoint\n        ? this._fetchGraphQlHeaders\n        : { ...this._fetchGraphQlHeaders, ...mesh.fetchGraphQlHeaders })\n    );\n  }\n}\n\nfunction minimizeGraphQlQuery(query: string) {\n  // Remove comments\n  query = query.replace(/#.*/g, '');\n\n  // Remove extra spaces, tabs, and line breaks\n  query = query.replace(/\\s+/g, ' ');\n\n  return query.trim();\n}\n/**\n * Exports several methods from the `mesh` object.\n *\n * @property {Function} setEndpoint - Sets the GraphQL endpoint.\n * @property {Function} setFetchGraphQlHeaders - Sets the GraphQL headers.\n * @property {Function} setFetchGraphQlHeader - Sets a specific GraphQL header.\n * @property {Function} removeFetchGraphQlHeader - Removes a specific GraphQL header.\n * @property {Function} fetchGraphQl - Fetches GraphQL data.\n * @property {Function} getConfig - Gets the configuration.\n */\n\n// Global Mesh instance\nexport const {\n  setEndpoint,\n  setFetchGraphQlHeaders,\n  setFetchGraphQlHeader,\n  removeFetchGraphQlHeader,\n  fetchGraphQl,\n  getConfig,\n  addBeforeHook,\n  addAfterHook,\n} = mesh.getMethods();\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nimport {\n  ReCaptchaV3Response,\n  PropsFormTypes,\n  ReCaptchaV3Model,\n} from './types/recaptcha.types';\nimport { recaptchaMessage, recaptchaBadgeSelector } from './configs';\nimport {\n  extendConfig,\n  setConfigStorage,\n  getConfigStorage,\n  checkRecaptchaBadge,\n  convertKeysToCamelCase,\n} from './lib';\nimport {\n  getRecaptchaToken,\n  verifyReCaptchaLoad,\n} from './services/recaptcha.service';\nimport { RECAPTCHA_CONFIGURATION_V3 } from './graphql/recaptchaConfig.graphql';\n\nimport { FetchGraphQL } from '@adobe-commerce/fetch-graphql';\n\nexport const recaptchaFetchApi = new FetchGraphQL().getMethods();\n\nexport class RecaptchaModule {\n  _enableReCAPTCHA: boolean = false;\n  _recaptchaBackendEndpoint: string =\n    recaptchaFetchApi.getConfig()?.endpoint || '';\n  _recaptchaScriptUrl: string = 'https://www.google.com/recaptcha/api.js';\n  _configStorageKey: string = 'recaptchaConfig';\n  _logger: boolean = false;\n\n  async _updateBadgePosition(\n    badgeId: string,\n    config: ReCaptchaV3Model\n  ): Promise<void | null> {\n    if (!config) return;\n\n    if (config?.badgePosition === 'inline') {\n      await verifyReCaptchaLoad(badgeId, config, this._logger);\n    } else {\n      const isBadgeLoaded = await checkRecaptchaBadge();\n\n      if (!isBadgeLoaded) return;\n\n      const recaptchaBadge = document.querySelector(\n        recaptchaBadgeSelector\n      ) as HTMLIFrameElement;\n\n      const shouldUpdateSrc =\n        config.theme &&\n        recaptchaBadge &&\n        !recaptchaBadge.src.includes('theme=dark') &&\n        !recaptchaBadge.src.includes('theme=light');\n\n      if (shouldUpdateSrc) {\n        recaptchaBadge.setAttribute(\n          'src',\n          `${recaptchaBadge.src}&theme=${config.theme}`\n        );\n      }\n    }\n  }\n\n  async _addRecaptchaScript(): Promise<void> {\n    const config = await this._loadConfig();\n\n    if (!document.getElementById('recaptchaId') && config) {\n      const webApiKey = config.websiteKey;\n      const isBadgeGlobal = config.badgePosition === 'inline';\n      const languageCode = config.languageCode;\n\n      if (!webApiKey) return;\n\n      const script = document.createElement('script');\n      script.setAttribute('id', 'recaptchaId');\n      script.defer = true;\n      script.src = isBadgeGlobal\n        ? `${this._recaptchaScriptUrl}?render=${webApiKey}&badge=none&hl=${languageCode}`\n        : `${this._recaptchaScriptUrl}?render=${webApiKey}&badge=${config.badgePosition}&hl=${languageCode}`;\n\n      document.head.appendChild(script);\n    }\n  }\n\n  async _fetchStoreConfig(): Promise<ReCaptchaV3Response | undefined> {\n    try {\n      const response = await recaptchaFetchApi.fetchGraphQl(\n        RECAPTCHA_CONFIGURATION_V3,\n        {\n          method: 'GET',\n          cache: 'force-cache',\n        }\n      );\n\n      if (response?.errors?.length) {\n        this._logger && console.error(response.errors[0].message);\n\n        return;\n      }\n\n      return response;\n    } catch (error) {\n      this._logger && console.error(`${recaptchaMessage.failedFetch}:`, error);\n    }\n  }\n\n  async _loadConfig(): Promise<ReCaptchaV3Model | null> {\n    const config = await getConfigStorage(this._configStorageKey);\n\n    if (!config) {\n      this._logger && console.error(recaptchaMessage.failedGetStorageConfig);\n\n      return null;\n    }\n\n    this._enableReCAPTCHA = !!config.isEnabled;\n\n    return config;\n  }\n\n  setEndpoint(url: string) {\n    if (!url) return;\n\n    this._recaptchaBackendEndpoint = url;\n    recaptchaFetchApi.setEndpoint(url);\n  }\n\n  async setConfig(configList: PropsFormTypes[]) {\n    try {\n      const config = await this._fetchStoreConfig();\n\n      if (!config?.data?.recaptchaV3Config) {\n        sessionStorage.removeItem(this._configStorageKey);\n        return;\n      }\n\n      const transformConfig: ReCaptchaV3Model = convertKeysToCamelCase(\n        config?.data?.recaptchaV3Config\n      );\n\n      const extendedRecaptchaConfig = extendConfig(transformConfig, configList);\n\n      if (extendedRecaptchaConfig) {\n        setConfigStorage(\n          this._configStorageKey,\n          extendedRecaptchaConfig,\n          this._logger\n        );\n      }\n    } catch (error) {\n      this._logger &&\n        console.error(recaptchaMessage.failedSetStorageConfig, error);\n\n      sessionStorage.removeItem(this._configStorageKey);\n    }\n  }\n\n  async initReCaptcha(lazyLoadTimeout = 3000) {\n    // IIFE added to fix SonarQube error \"Promise returned in function argument where a void return was expected\"\n    setTimeout(() => {\n      (async () => {\n        try {\n          const config = await this._loadConfig();\n\n          if (!config?.forms || !config.isEnabled) {\n            return;\n          }\n\n          await this._addRecaptchaScript();\n\n          if (config.badgePosition === 'inline') {\n            await Promise.all(\n              (config.forms as PropsFormTypes[]).map((element) =>\n                this._updateBadgePosition(element.badgeId, config)\n              )\n            );\n          } else {\n            await this._updateBadgePosition('', config);\n          }\n        } catch (error) {\n          this._logger &&\n            console.error(recaptchaMessage.failedInitializing, error);\n        }\n      })();\n    }, lazyLoadTimeout);\n  }\n\n  async verifyReCaptcha(): Promise<string | undefined> {\n    try {\n      const config = await this._loadConfig();\n\n      if (!config?.forms || !config.websiteKey || !config.isEnabled) {\n        return undefined;\n      }\n\n      return await getRecaptchaToken(config.websiteKey);\n    } catch (error) {\n      this._logger && console.error(error);\n    }\n  }\n\n  enableLogger(logger: boolean) {\n    this._logger = logger;\n  }\n\n  getMethods() {\n    return {\n      enableLogger: this.enableLogger.bind(this),\n      setEndpoint: this.setEndpoint.bind(this),\n      setConfig: this.setConfig.bind(this),\n      initReCaptcha: this.initReCaptcha.bind(this),\n      verifyReCaptcha: this.verifyReCaptcha.bind(this),\n    };\n  }\n}\n\nconst recaptcha = new RecaptchaModule();\n\nconst { initReCaptcha, verifyReCaptcha, setEndpoint, setConfig, enableLogger } =\n  recaptcha.getMethods();\n\nexport { setEndpoint, setConfig, initReCaptcha, verifyReCaptcha, enableLogger };\n"],"names":["recaptchaMessage","typeDefaultForm","recaptchaBadgeSelector","extendConfig","config","modifyParams","modifyForm","el","getConfigStorage","storageKey","retries","delay","storedConfig","resolve","setConfigStorage","logger","error","waitForElement","selector","reject","observer","checkRecaptchaBadge","convertKeysToCamelCase","obj","camelCaseKey","key","_","letter","result","newKey","failedExecutionRecaptcha","getRecaptchaToken","websiteKey","waitForReCaptcha","obs","observerOptions","verifyReCaptchaLoad","badgeId","badgeContainers","element","RECAPTCHA_CONFIGURATION_V3","defaultHeaders","FetchGraphQLMesh","endpoint","value","header","hook","query","options","fetchGraphQlHeaders","method","cache","signal","body","url","headers","minimizeGraphQlQuery","requestInit","prev","r","response","mesh","FetchGraphQL","setEndpoint","setFetchGraphQlHeaders","setFetchGraphQlHeader","removeFetchGraphQlHeader","fetchGraphQl","getConfig","addBeforeHook","addAfterHook","recaptchaFetchApi","RecaptchaModule","_a","recaptchaBadge","webApiKey","isBadgeGlobal","languageCode","script","configList","_b","transformConfig","extendedRecaptchaConfig","lazyLoadTimeout","recaptcha","initReCaptcha","verifyReCaptcha","setConfig","enableLogger"],"mappings":"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","x_google_ignoreList":[9]}