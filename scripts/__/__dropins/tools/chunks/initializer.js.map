{"version":3,"file":"initializer.js","sources":["/@dropins/tools/src/lib/config.ts","/@dropins/tools/src/lib/initializer.ts"],"sourcesContent":["/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nexport class Config<T> {\n  private config: T;\n\n  constructor(initialConfig: T) {\n    this.config = initialConfig;\n  }\n\n  getConfig(): T {\n    return this.config;\n  }\n\n  setConfig(newConfig: T): void {\n    this.config = newConfig;\n  }\n}\n","/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nimport {\n  Config,\n  setImageParamsKeyMap,\n} from '@adobe-commerce/elsie/lib';\n\ntype Listener = { off(): void };\n\ntype Listeners<T> = (config?: T) => Array<Listener | undefined>;\n\ntype Init<T> = (config?: T) => Promise<void>;\n\ntype Options<T> = { init: Init<T>; listeners: Listeners<T> };\n\nexport type Model<T = any, D = any> = {\n  transformer?: (data: D) => T & { [key: string]: any };\n};\n\n/**\n * The `Initializer` class is responsible for setting up event listeners and initializing a module with the given configuration.\n *\n * @template T - The type of the configuration object.\n * @class\n */\nexport class Initializer<T> {\n  private _listeners: Listener[] = [];\n  listeners: Listeners<T>;\n  init: Init<T>;\n  config = new Config<T>({} as T);\n\n  /**\n   * Creates an instance of Initializer.\n   * @param options - The initialization options.\n   * @param options.init - A function that initializes the module.\n   * @param options.listeners - A function that sets up event listeners.\n   */\n  constructor({ init, listeners }: Options<T>) {\n    this.listeners = (config) => {\n      // Unbind existing listeners\n      this._listeners.forEach((listener) => listener.off());\n      // Bind new listeners\n      return (this._listeners = listeners(config) as Listener[]);\n    };\n\n    this.init = (options) => {\n      const { imageParamsKeyMap, ...rest } =\n        options as any;\n      this.config.setConfig({ ...this.config.getConfig(), ...rest });\n      setImageParamsKeyMap(imageParamsKeyMap);\n      return init(options);\n    };\n  }\n}\n\ntype Initializers = [Initializer<any>, { [key: string]: any } | undefined][];\n\n/**\n * The Initializers class provides methods to register, mount, and configure initializers.\n *\n * @class\n *\n * @method register - Registers a new initializer. If the initializers have already been mounted, it immediately binds the event listeners and initializes the API for the new initializer.\n * @method mount - Mounts all registered initializers. This involves binding the event listeners and initializing the APIs for each initializer, in that order.\n * @method setImageParamKeys - Sets the image parameter keys. These keys are used when initializing the APIs for the initializers.\n */\nexport class initializers {\n  static _initializers: Initializers = [];\n  static _mounted: boolean = false;\n  static _imageParamsKeyMap: { [key: string]: string } | undefined = undefined;\n  /**\n   * Registers a new initializer. If the initializers have already been mounted,it immediately binds the event listeners and initializes the API for the new initializer.\n   * @param initializer - The initializer to register.\n   * @param options - Optional configuration for the initializer.\n   */\n  static register(\n    initializer: Initializer<any>,\n    options?: { [key: string]: any }\n  ) {\n    if (initializers._mounted) {\n      initializer.listeners?.(options);\n      initializer.init?.(options);\n    }\n    initializers._initializers.push([initializer, options]);\n  }\n\n  /**\n   * Mounts the provided initializer immediately. This involves binding the event listeners and initializing the API for the initializer.\n   */\n  static async mountImmediately(\n    initializer: Initializer<any>,\n    options?: { [key: string]: any }\n  ) {\n    initializer.listeners?.(options);\n    await initializer.init?.({\n      imageParamsKeyMap: initializers._imageParamsKeyMap,\n      ...options,\n    });\n  }\n\n  /**\n   * Mounts all registered initializers. This involves binding the event listeners and initializing the APIs for each initializer, in that order.\n   */\n  static mount() {\n    initializers._mounted = true;\n    // In this specific order\n    // 1. Bind events\n    initializers._initializers?.forEach(([initializer, options]) => {\n      initializer.listeners?.(options);\n    });\n\n    // 2. Initialize APIs\n    initializers._initializers?.forEach(([initializer, options]) => {\n      initializer.init?.({\n        imageParamsKeyMap: initializers._imageParamsKeyMap,\n        ...options,\n      });\n    });\n  }\n  /**\n   * Sets the image parameter keys. These keys are used when initializing the APIs for the initializers.\n   * @param params - The image parameter keys.\n   */\n  static setImageParamKeys(params: { [key: string]: any }) {\n    initializers._imageParamsKeyMap = params;\n  }\n}\n"],"names":["Config","initialConfig","__publicField","newConfig","Initializer","init","listeners","config","listener","options","imageParamsKeyMap","rest","setImageParamsKeyMap","_initializers","initializer","_a","_b","params","initializers"],"mappings":"iNASO,MAAMA,CAAU,CAGrB,YAAYC,EAAkB,CAFtBC,EAAA,eAGN,KAAK,OAASD,CAAA,CAGhB,WAAe,CACb,OAAO,KAAK,MAAA,CAGd,UAAUE,EAAoB,CAC5B,KAAK,OAASA,CAAA,CAElB,CCSO,MAAMC,CAAe,CAY1B,YAAY,CAAE,KAAAC,EAAM,UAAAC,GAAyB,CAXrCJ,EAAA,kBAAyB,CAAC,GAClCA,EAAA,kBACAA,EAAA,aACAA,EAAA,cAAS,IAAIF,EAAU,EAAO,GASvB,KAAA,UAAaO,IAEhB,KAAK,WAAW,QAASC,GAAaA,EAAS,KAAK,EAE5C,KAAK,WAAaF,EAAUC,CAAM,GAGvC,KAAA,KAAQE,GAAY,CACvB,KAAM,CAAE,kBAAAC,EAAmB,GAAGC,CAAA,EAC5BF,EACG,YAAA,OAAO,UAAU,CAAE,GAAG,KAAK,OAAO,UAAU,EAAG,GAAGE,EAAM,EAC7DC,EAAqBF,CAAiB,EAC/BL,EAAKI,CAAO,CACrB,CAAA,CAEJ,CAaO,MAAMI,EAAN,MAAMA,CAAa,CASxB,OAAO,SACLC,EACAL,EACA,SACII,EAAa,YACfE,EAAAD,EAAY,YAAZ,MAAAC,EAAA,KAAAD,EAAwBL,IACxBO,EAAAF,EAAY,OAAZ,MAAAE,EAAA,KAAAF,EAAmBL,IAErBI,EAAa,cAAc,KAAK,CAACC,EAAaL,CAAO,CAAC,CAAA,CAMxD,aAAa,iBACXK,EACAL,EACA,UACAM,EAAAD,EAAY,YAAZ,MAAAC,EAAA,KAAAD,EAAwBL,GACxB,OAAMO,EAAAF,EAAY,OAAZ,YAAAE,EAAA,KAAAF,EAAmB,CACvB,kBAAmBD,EAAa,mBAChC,GAAGJ,CAAA,GACJ,CAMH,OAAO,OAAQ,SACbI,EAAa,SAAW,IAGxBE,EAAAF,EAAa,gBAAb,MAAAE,EAA4B,QAAQ,CAAC,CAACD,EAAaL,CAAO,IAAM,QAC9DM,EAAAD,EAAY,YAAZ,MAAAC,EAAA,KAAAD,EAAwBL,EAAO,IAIjCO,EAAAH,EAAa,gBAAb,MAAAG,EAA4B,QAAQ,CAAC,CAACF,EAAaL,CAAO,IAAM,QAC9DM,EAAAD,EAAY,OAAZ,MAAAC,EAAA,KAAAD,EAAmB,CACjB,kBAAmBD,EAAa,mBAChC,GAAGJ,CAAA,EACJ,EACF,CAMH,OAAO,kBAAkBQ,EAAgC,CACvDJ,EAAa,mBAAqBI,CAAA,CAEtC,EA3DEf,EADWW,EACJ,gBAA8B,CAAC,GACtCX,EAFWW,EAEJ,WAAoB,IAC3BX,EAHWW,EAGJ,sBAHF,IAAMK,EAANL"}