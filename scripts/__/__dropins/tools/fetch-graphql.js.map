{"version":3,"file":"fetch-graphql.js","sources":["@dropins/tools/src/fetch-graphql/index.ts"],"sourcesContent":["/********************************************************************\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  Adobe permits you to use, modify, and distribute this \n * file in accordance with the terms of the Adobe license agreement \n * accompanying it. \n *******************************************************************/\n\nexport type Header = { [key: string]: string | null };\n\nexport type FetchOptions = {\n  method?: 'GET' | 'POST';\n  variables?: { [key: string]: any };\n  signal?: AbortSignal;\n  cache?:\n    | 'default'\n    | 'no-store'\n    | 'reload'\n    | 'no-cache'\n    | 'force-cache'\n    | 'only-if-cached';\n};\n\nexport type FetchQueryError = Array<{\n  message: string;\n  extensions: { category: string };\n}>;\n\nexport type BeforeHook = (requestInit: RequestInit) => RequestInit;\nexport type AfterHook<T = any> = (\n    requestInit: RequestInit,\n    response: { errors?: FetchQueryError; data: T }\n) => { errors?: FetchQueryError; data: T };\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n\nclass FetchGraphQLMesh {\n  public _endpoint?: string;\n\n  get endpoint() {\n    return this._endpoint;\n  }\n\n  get fetchGraphQlHeaders() {\n    return this._fetchGraphQlHeaders;\n  }\n\n  public _fetchGraphQlHeaders: Header = {};\n\n  public _beforeHooks: BeforeHook[] = [];\n\n  public _afterHooks: AfterHook[] = [];\n\n  /**\n   * Sets the GraphQL endpoint.\n   * @param endpoint - The GraphQL endpoint.\n   */\n  public setEndpoint(endpoint: string) {\n    this._endpoint = endpoint;\n  }\n\n  /**\n   * Sets the GraphQL headers.\n   * @param key - The key of the header.\n   * @param value - The value of the header.\n   */\n  public setFetchGraphQlHeader(key: string, value: string | null) {\n    this._fetchGraphQlHeaders = {\n      ...this.fetchGraphQlHeaders,\n      [key]: value,\n    };\n  }\n  /**\n   * Removes a specific GraphQL header.\n   * @param key - The key of the header.\n   */\n  public removeFetchGraphQlHeader(key: string) {\n    delete this._fetchGraphQlHeaders[key];\n  }\n  /**\n   * Sets the GraphQL headers.\n   * @param header - The header object or a function that returns a header object.\n   * If a function is provided, it will be called with the previous headers.\n   * The returned object will be merged with the previous headers.\n   * @example\n   * ```js\n   * // set headers\n   * setFetchGraphQlHeaders({ test: 'test' });\n   * \n   * // merge with previous headers\n   * setFetchGraphQlHeaders((prev) => ({\n   *   ...prev,\n   *  test: 'test2',\n   * }));\n   * ```\n   */\n  public setFetchGraphQlHeaders(header: Header | ((prev: Header) => Header)) {\n    if (typeof header === 'function') {\n      this._fetchGraphQlHeaders = {\n        ...this._fetchGraphQlHeaders,\n        ...header(this._fetchGraphQlHeaders),\n      };\n    } else {\n      this._fetchGraphQlHeaders = { ...header };\n    }\n  }\n  /**\n   * Adds a hook executed before the GraphQL call.\n   * @param hook - The hook function.\n   * @example\n   * ```js\n   * // add before hook\n   * addBeforeHook((requestInit) => console.log('About to execute ' + requestInit.method + ' call.'));\n   *\n   * // modify the requestInit before executing the request\n   * addBeforeHook((requestInit) => {method: requestInit.method, body: 'new body'});\n   * ```\n   */\n  public addBeforeHook(hook: BeforeHook): void {\n    this._beforeHooks.push(hook);\n  }\n  /**\n   * Adds a hook executed before the GraphQL call.\n   * @param hook - The hook function.\n   * @example\n   * ```js\n   * // add before hook\n   * addAfterHook((requestInit, response) => console.log(\n   *     'The result of ' + requestInit.method + ' call is ' + response.json().body\n   * ));\n   *\n   * // modify the response\n   * addAfterHook((requestInit, response) => new Response(JSON.stringify({ ...response, modified: true }));\n   * ```\n   */\n  public addAfterHook(hook: AfterHook): void {\n    this._afterHooks.push(hook);\n  }\n  /**\n   * Fetches GraphQL data.\n   * @param query - The GraphQL query.\n   * @param options - Optional configuration for the fetch request.\n   * @returns\n   */\n  public async fetchGraphQl<T = any>(\n    query: string,\n    options?: FetchOptions\n  ): Promise<{ errors?: FetchQueryError; data: T }> {\n    const endpoint = this.endpoint;\n    const fetchGraphQlHeaders = this.fetchGraphQlHeaders;\n\n    if (!endpoint) throw Error('Missing \"url\"');\n\n    const method = options?.method ?? 'POST';\n    const cache = options?.cache;\n    const signal = options?.signal;\n\n    let body;\n    const url = new URL(endpoint);\n    const headers = {\n      ...defaultHeaders,\n      ...fetchGraphQlHeaders,\n    };\n\n    if (method === 'POST') {\n      body = JSON.stringify({\n        query,\n        variables: options?.variables,\n      });\n    }\n\n    if (method === 'GET') {\n      url.searchParams.append('query', minimizeGraphQlQuery(query));\n\n      if (options?.variables)\n        url.searchParams.append('variables', JSON.stringify(options.variables));\n    }\n\n    let requestInit: RequestInit = {\n      method,\n      headers,\n      body,\n      cache,\n      signal,\n    };\n\n    requestInit = await this._beforeHooks.reduce(\n        async (prev, hook) => hook(await prev),\n        Promise.resolve(requestInit)\n    );\n\n    return await fetch(url, requestInit).then((r) => r.json().then(\n        (response) => this._afterHooks.reduce(\n            async (result, hook) => hook(requestInit, await result),\n            Promise.resolve(response)\n        )\n    ));\n  }\n  /**\n   * Gets the configuration.\n   */\n  public getConfig() {\n    return {\n      endpoint: this.endpoint,\n      fetchGraphQlHeaders: this.fetchGraphQlHeaders,\n    };\n  }\n\n  public getMethods() {\n    return {\n      setEndpoint: this.setEndpoint.bind(this),\n      setFetchGraphQlHeader: this.setFetchGraphQlHeader.bind(this),\n      removeFetchGraphQlHeader: this.removeFetchGraphQlHeader.bind(this),\n      setFetchGraphQlHeaders: this.setFetchGraphQlHeaders.bind(this),\n      fetchGraphQl: this.fetchGraphQl.bind(this),\n      getConfig: this.getConfig.bind(this),\n      addBeforeHook: this.addBeforeHook.bind(this),\n      addAfterHook: this.addAfterHook.bind(this),\n    };\n  }\n}\n\nconst mesh = new FetchGraphQLMesh();\n\n/**\n * `FetchGraphQL` is a class that extends `FetchGraphQLMesh`.\n * It provides methods to get the GraphQL endpoint and headers.\n *\n * @class\n *\n */\nexport class FetchGraphQL extends FetchGraphQLMesh {\n  get endpoint() {\n    return this._endpoint ?? mesh.endpoint;\n  }\n\n  get fetchGraphQlHeaders() {\n    return (\n      (this._endpoint\n        ? this._fetchGraphQlHeaders\n        : { ...this._fetchGraphQlHeaders, ...mesh.fetchGraphQlHeaders })\n    );\n  }\n}\n\nfunction minimizeGraphQlQuery(query: string) {\n  // Remove comments\n  query = query.replace(/#.*/g, '');\n\n  // Remove extra spaces, tabs, and line breaks\n  query = query.replace(/\\s+/g, ' ');\n\n  return query.trim();\n}\n/**\n * Exports several methods from the `mesh` object.\n *\n * @property {Function} setEndpoint - Sets the GraphQL endpoint.\n * @property {Function} setFetchGraphQlHeaders - Sets the GraphQL headers.\n * @property {Function} setFetchGraphQlHeader - Sets a specific GraphQL header.\n * @property {Function} removeFetchGraphQlHeader - Removes a specific GraphQL header.\n * @property {Function} fetchGraphQl - Fetches GraphQL data.\n * @property {Function} getConfig - Gets the configuration.\n */\n\n// Global Mesh instance\nexport const {\n  setEndpoint,\n  setFetchGraphQlHeaders,\n  setFetchGraphQlHeader,\n  removeFetchGraphQlHeader,\n  fetchGraphQl,\n  getConfig,\n  addBeforeHook,\n  addAfterHook,\n} = mesh.getMethods();\n"],"names":["defaultHeaders","FetchGraphQLMesh","__publicField","endpoint","key","value","header","hook","query","options","fetchGraphQlHeaders","method","cache","signal","body","url","headers","minimizeGraphQlQuery","requestInit","prev","r","response","result","mesh","FetchGraphQL","setEndpoint","setFetchGraphQlHeaders","setFetchGraphQlHeader","removeFetchGraphQlHeader","fetchGraphQl","getConfig","addBeforeHook","addAfterHook"],"mappings":"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"}